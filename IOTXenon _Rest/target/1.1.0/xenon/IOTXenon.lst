
c:/projects/IOTXenon/target/1.1.0/xenon/IOTXenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018458  2**0
                  CONTENTS
  3 .data         000000bc  2003e1bc  000d8370  0000e1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000578  2003e278  2003e278  0001e278  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d842c  000d842c  0001842c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8454  000d8454  00018454  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b0202  00000000  00000000  00018458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001051a  00000000  00000000  000c865a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016038  00000000  00000000  000d8b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002250  00000000  00000000  000eebac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003468  00000000  00000000  000f0dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000355dd  00000000  00000000  000f4264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027d0e  00000000  00000000  00129841  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d6f61  00000000  00000000  0015154f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c340  00000000  00000000  002284b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	c4 7a 0d 00                                         .z..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc17 	bl	d6860 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc1c 	bl	d6876 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e1bc 	.word	0x2003e1bc
   d4048:	000d8370 	.word	0x000d8370
   d404c:	2003e278 	.word	0x2003e278
   d4050:	2003e278 	.word	0x2003e278
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fb4f 	bl	d56fc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d836c 	.word	0x000d836c
   d4080:	000d8330 	.word	0x000d8330

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b824 	b.w	d40d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f855 	bl	d4138 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb01 	b.w	d5698 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc9d 	b.w	d49d4 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bc9b 	b.w	d49d4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bca1 	b.w	d49e4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc9f 	b.w	d49e4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.4>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d40b6:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40b8:	2000      	movs	r0, #0
   d40ba:	f000 fc7b 	bl	d49b4 <spark_sync_time_pending>
   d40be:	b128      	cbz	r0, d40cc <_ZN10CloudClass12syncTimeDoneEv.isra.4+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40c0:	f000 fc60 	bl	d4984 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40c4:	f080 0001 	eor.w	r0, r0, #1
   d40c8:	b2c0      	uxtb	r0, r0
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	2001      	movs	r0, #1
    }
   d40ce:	bd08      	pop	{r3, pc}

000d40d0 <setup>:
void callback(char* topic, byte* payload, unsigned int length) {
	Serial.printf("Callback");
}

void setup()
{
   d40d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Serial.begin(9600);
   d40d2:	f001 fbff 	bl	d58d4 <_Z16_fetch_usbserialv>
   d40d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40da:	f001 fbef 	bl	d58bc <_ZN9USBSerial5beginEl>
	Time.zone(1);
   d40de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d40e2:	f001 f993 	bl	d540c <_ZN9TimeClass4zoneEf>
	Serial.println(System.deviceID());
   d40e6:	f001 fbf5 	bl	d58d4 <_Z16_fetch_usbserialv>
   d40ea:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d40ec:	4668      	mov	r0, sp
   d40ee:	f000 fc51 	bl	d4994 <spark_deviceID>
   d40f2:	9900      	ldr	r1, [sp, #0]
   d40f4:	4620      	mov	r0, r4
   d40f6:	f001 f8fd 	bl	d52f4 <_ZN5Print7printlnEPKc>
   d40fa:	4668      	mov	r0, sp
   d40fc:	f001 f86b 	bl	d51d6 <_ZN6StringD1Ev>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4100:	2000      	movs	r0, #0
   d4102:	f000 fc4f 	bl	d49a4 <spark_sync_time>
	Particle.syncTime();
  	waitUntil(Particle.syncTimeDone);
   d4106:	f7ff ffd6 	bl	d40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.4>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d410a:	b168      	cbz	r0, d4128 <setup+0x58>
   d410c:	f7ff ffd3 	bl	d40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.4>
	dht.begin();
   d4110:	4807      	ldr	r0, [pc, #28]	; (d4130 <setup+0x60>)
   d4112:	f000 f8cd 	bl	d42b0 <_ZN3DHT5beginEv>
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4116:	4807      	ldr	r0, [pc, #28]	; (d4134 <setup+0x64>)
   d4118:	2300      	movs	r3, #0
   d411a:	461a      	mov	r2, r3
   d411c:	4619      	mov	r1, r3
   d411e:	6840      	ldr	r0, [r0, #4]
   d4120:	f000 fbd8 	bl	d48d4 <network_connect>
	Mesh.connect();
}
   d4124:	b004      	add	sp, #16
   d4126:	bd10      	pop	{r4, pc}
            spark_process();
   d4128:	f000 fc24 	bl	d4974 <spark_process>
   d412c:	e7eb      	b.n	d4106 <setup+0x36>
   d412e:	bf00      	nop
   d4130:	2003e28c 	.word	0x2003e28c
   d4134:	2003e414 	.word	0x2003e414

000d4138 <loop>:

void loop()
{
   d4138:	b570      	push	{r4, r5, r6, lr}
	float temp, humidity;
	temp = dht.getTempCelcius();
   d413a:	4c27      	ldr	r4, [pc, #156]	; (d41d8 <loop+0xa0>)
	dht.begin();
	Mesh.connect();
}

void loop()
{
   d413c:	b0ca      	sub	sp, #296	; 0x128
	float temp, humidity;
	temp = dht.getTempCelcius();
   d413e:	4620      	mov	r0, r4
   d4140:	f000 f9a0 	bl	d4484 <_ZN3DHT14getTempCelciusEv>
	humidity = dht.getHumidity();
   d4144:	4620      	mov	r0, r4
}

void loop()
{
	float temp, humidity;
	temp = dht.getTempCelcius();
   d4146:	ee10 5a10 	vmov	r5, s0
	humidity = dht.getHumidity();
   d414a:	f000 f9ad 	bl	d44a8 <_ZN3DHT11getHumidityEv>
   d414e:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
	time_t timestamp = Time.now();
   d4152:	f001 fa4a 	bl	d55ea <_ZN9TimeClass3nowEv>
   d4156:	4606      	mov	r6, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4158:	a80b      	add	r0, sp, #44	; 0x2c
   d415a:	f000 fc1b 	bl	d4994 <spark_deviceID>
	char message[217];	
	sprintf(message,"{\"deviceID\":\"%s\",\"timestamp\":\"%s\",\"temperature\":%f,\"tempUnit\":\"%c\",\"humidity\":%f,\"humUnit\":\"%c\"}",System.deviceID().c_str(),Time.format(timestamp, TIME_FORMAT_ISO8601_FULL).c_str(),temp,'C',humidity,'%');
   d415e:	4b1f      	ldr	r3, [pc, #124]	; (d41dc <loop+0xa4>)
   d4160:	491f      	ldr	r1, [pc, #124]	; (d41e0 <loop+0xa8>)
   d4162:	681b      	ldr	r3, [r3, #0]
   d4164:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d4166:	4632      	mov	r2, r6
   d4168:	a80f      	add	r0, sp, #60	; 0x3c
   d416a:	f001 f9eb 	bl	d5544 <_ZN9TimeClass6formatElPKc>
   d416e:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4172:	2325      	movs	r3, #37	; 0x25
   d4174:	ee10 0a10 	vmov	r0, s0
   d4178:	9306      	str	r3, [sp, #24]
   d417a:	f002 f9db 	bl	d6534 <__aeabi_f2d>
   d417e:	2343      	movs	r3, #67	; 0x43
   d4180:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4184:	4628      	mov	r0, r5
   d4186:	9302      	str	r3, [sp, #8]
   d4188:	f002 f9d4 	bl	d6534 <__aeabi_f2d>
   d418c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d418e:	4622      	mov	r2, r4
   d4190:	e9cd 0100 	strd	r0, r1, [sp]
   d4194:	4913      	ldr	r1, [pc, #76]	; (d41e4 <loop+0xac>)
   d4196:	a813      	add	r0, sp, #76	; 0x4c
   d4198:	f000 fc34 	bl	d4a04 <sprintf>
   d419c:	a80f      	add	r0, sp, #60	; 0x3c
   d419e:	f001 f81a 	bl	d51d6 <_ZN6StringD1Ev>
   d41a2:	a80b      	add	r0, sp, #44	; 0x2c
   d41a4:	f001 f817 	bl	d51d6 <_ZN6StringD1Ev>
	Serial.printlnf("%s",message);
   d41a8:	f001 fb94 	bl	d58d4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41ac:	ab13      	add	r3, sp, #76	; 0x4c
   d41ae:	4a0e      	ldr	r2, [pc, #56]	; (d41e8 <loop+0xb0>)
   d41b0:	2101      	movs	r1, #1
   d41b2:	f001 f8d8 	bl	d5366 <_ZN5Print11printf_implEbPKcz>
	Mesh.publish("sensorData",message);
   d41b6:	aa13      	add	r2, sp, #76	; 0x4c
   d41b8:	490c      	ldr	r1, [pc, #48]	; (d41ec <loop+0xb4>)
   d41ba:	480d      	ldr	r0, [pc, #52]	; (d41f0 <loop+0xb8>)
   d41bc:	f001 fd4e 	bl	d5c5c <_ZN5spark11MeshPublish7publishEPKcS2_>
	Serial.println("published");
   d41c0:	f001 fb88 	bl	d58d4 <_Z16_fetch_usbserialv>
   d41c4:	490b      	ldr	r1, [pc, #44]	; (d41f4 <loop+0xbc>)
   d41c6:	f001 f895 	bl	d52f4 <_ZN5Print7printlnEPKc>
	delay(1000);
   d41ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41ce:	f001 fa1d 	bl	d560c <delay>
   d41d2:	b04a      	add	sp, #296	; 0x128
   d41d4:	bd70      	pop	{r4, r5, r6, pc}
   d41d6:	bf00      	nop
   d41d8:	2003e28c 	.word	0x2003e28c
   d41dc:	2003e1bc 	.word	0x2003e1bc
   d41e0:	2003e2b8 	.word	0x2003e2b8
   d41e4:	000d7ae1 	.word	0x000d7ae1
   d41e8:	000d7b42 	.word	0x000d7b42
   d41ec:	000d7b45 	.word	0x000d7b45
   d41f0:	2003e41c 	.word	0x2003e41c
   d41f4:	000d7b50 	.word	0x000d7b50

000d41f8 <_GLOBAL__sub_I_deviceID>:
   d41f8:	b510      	push	{r4, lr}
   d41fa:	4c09      	ldr	r4, [pc, #36]	; (d4220 <_GLOBAL__sub_I_deviceID+0x28>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41fc:	f000 f96e 	bl	d44dc <HAL_Pin_Map>
   d4200:	4620      	mov	r0, r4
   d4202:	f000 fbc7 	bl	d4994 <spark_deviceID>
#include "MQTT.h"
#include <time.h>
#define DHTPIN 	A2     // set pin


String deviceID = System.deviceID();
   d4206:	4a07      	ldr	r2, [pc, #28]	; (d4224 <_GLOBAL__sub_I_deviceID+0x2c>)
   d4208:	4907      	ldr	r1, [pc, #28]	; (d4228 <_GLOBAL__sub_I_deviceID+0x30>)
   d420a:	4620      	mov	r0, r4
   d420c:	f001 fee0 	bl	d5fd0 <__aeabi_atexit>
DHT dht(DHTPIN);
   d4210:	2206      	movs	r2, #6
   d4212:	2111      	movs	r1, #17
   d4214:	4805      	ldr	r0, [pc, #20]	; (d422c <_GLOBAL__sub_I_deviceID+0x34>)
	sprintf(message,"{\"deviceID\":\"%s\",\"timestamp\":\"%s\",\"temperature\":%f,\"tempUnit\":\"%c\",\"humidity\":%f,\"humUnit\":\"%c\"}",System.deviceID().c_str(),Time.format(timestamp, TIME_FORMAT_ISO8601_FULL).c_str(),temp,'C',humidity,'%');
	Serial.printlnf("%s",message);
	Mesh.publish("sensorData",message);
	Serial.println("published");
	delay(1000);
   d4216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <time.h>
#define DHTPIN 	A2     // set pin


String deviceID = System.deviceID();
DHT dht(DHTPIN);
   d421a:	f000 b843 	b.w	d42a4 <_ZN3DHTC1Ehh>
   d421e:	bf00      	nop
   d4220:	2003e27c 	.word	0x2003e27c
   d4224:	2003e278 	.word	0x2003e278
   d4228:	000d51d7 	.word	0x000d51d7
   d422c:	2003e28c 	.word	0x2003e28c

000d4230 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4230:	f000 b954 	b.w	d44dc <HAL_Pin_Map>

000d4234 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4234:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4236:	6803      	ldr	r3, [r0, #0]
   d4238:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d423a:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d423c:	d904      	bls.n	d4248 <nrf_gpio_pin_port_decode+0x14>
   d423e:	4a07      	ldr	r2, [pc, #28]	; (d425c <nrf_gpio_pin_port_decode+0x28>)
   d4240:	2100      	movs	r1, #0
   d4242:	200a      	movs	r0, #10
   d4244:	f000 fb0a 	bl	d485c <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d4248:	6823      	ldr	r3, [r4, #0]
   d424a:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d424c:	bf83      	ittte	hi
   d424e:	f003 031f 	andhi.w	r3, r3, #31
   d4252:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4254:	4802      	ldrhi	r0, [pc, #8]	; (d4260 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4256:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d425a:	bd10      	pop	{r4, pc}
   d425c:	000d459d 	.word	0x000d459d
   d4260:	50000300 	.word	0x50000300

000d4264 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4264:	b507      	push	{r0, r1, r2, lr}
   d4266:	ab02      	add	r3, sp, #8
   d4268:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d426c:	4618      	mov	r0, r3
   d426e:	f7ff ffe1 	bl	d4234 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4272:	9a01      	ldr	r2, [sp, #4]
   d4274:	2301      	movs	r3, #1
   d4276:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4278:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d427c:	b003      	add	sp, #12
   d427e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4282 <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4282:	b507      	push	{r0, r1, r2, lr}
   d4284:	ab02      	add	r3, sp, #8
   d4286:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d428a:	4618      	mov	r0, r3
   d428c:	f7ff ffd2 	bl	d4234 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4290:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4294:	9801      	ldr	r0, [sp, #4]
   d4296:	fa23 f000 	lsr.w	r0, r3, r0
}
   d429a:	f000 0001 	and.w	r0, r0, #1
   d429e:	b003      	add	sp, #12
   d42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a4 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d42a4:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d42a6:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d42a8:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d42aa:	7402      	strb	r2, [r0, #16]
}
   d42ac:	4770      	bx	lr
	...

000d42b0 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d42b0:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d42b2:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d42b4:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d42b6:	7980      	ldrb	r0, [r0, #6]
   d42b8:	f001 fe36 	bl	d5f28 <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d42bc:	4a07      	ldr	r2, [pc, #28]	; (d42dc <_ZN3DHT5beginEv+0x2c>)
   d42be:	79a3      	ldrb	r3, [r4, #6]
   d42c0:	6812      	ldr	r2, [r2, #0]
   d42c2:	011b      	lsls	r3, r3, #4
   d42c4:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d42c6:	5cd0      	ldrb	r0, [r2, r3]
   d42c8:	784b      	ldrb	r3, [r1, #1]
   d42ca:	f003 031f 	and.w	r3, r3, #31
   d42ce:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d42d2:	f7ff ffc7 	bl	d4264 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d42d6:	2300      	movs	r3, #0
   d42d8:	60e3      	str	r3, [r4, #12]
   d42da:	bd10      	pop	{r4, pc}
   d42dc:	2003e2a0 	.word	0x2003e2a0

000d42e0 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d42e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42e4:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42e6:	f000 f961 	bl	d45ac <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d42ea:	68e3      	ldr	r3, [r4, #12]
   d42ec:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d42ee:	bf84      	itt	hi
   d42f0:	2300      	movhi	r3, #0
   d42f2:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d42f4:	7c23      	ldrb	r3, [r4, #16]
   d42f6:	b933      	cbnz	r3, d4306 <_ZN3DHT4readEv+0x26>
   d42f8:	68e3      	ldr	r3, [r4, #12]
   d42fa:	1ac0      	subs	r0, r0, r3
   d42fc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4300:	d201      	bcs.n	d4306 <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4302:	2001      	movs	r0, #1
   d4304:	e0a8      	b.n	d4458 <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d4306:	2500      	movs	r5, #0

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4308:	4e55      	ldr	r6, [pc, #340]	; (d4460 <_ZN3DHT4readEv+0x180>)
   d430a:	7425      	strb	r5, [r4, #16]
   d430c:	f000 f94e 	bl	d45ac <HAL_Timer_Get_Milli_Seconds>
   d4310:	79a3      	ldrb	r3, [r4, #6]
   d4312:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4314:	60e0      	str	r0, [r4, #12]
   d4316:	011b      	lsls	r3, r3, #4
   d4318:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d431a:	7125      	strb	r5, [r4, #4]
   d431c:	70e5      	strb	r5, [r4, #3]
   d431e:	70a5      	strb	r5, [r4, #2]
   d4320:	7065      	strb	r5, [r4, #1]
   d4322:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4324:	5cd0      	ldrb	r0, [r2, r3]
   d4326:	784b      	ldrb	r3, [r1, #1]
   d4328:	f003 031f 	and.w	r3, r3, #31
   d432c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4330:	f7ff ff98 	bl	d4264 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4334:	20fa      	movs	r0, #250	; 0xfa
   d4336:	f001 f969 	bl	d560c <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d433a:	2101      	movs	r1, #1
   d433c:	79a0      	ldrb	r0, [r4, #6]
   d433e:	f001 fdf3 	bl	d5f28 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4342:	79a3      	ldrb	r3, [r4, #6]
   d4344:	6832      	ldr	r2, [r6, #0]
   d4346:	011b      	lsls	r3, r3, #4
   d4348:	18d1      	adds	r1, r2, r3
   d434a:	5cd2      	ldrb	r2, [r2, r3]
   d434c:	784b      	ldrb	r3, [r1, #1]
   d434e:	a802      	add	r0, sp, #8
   d4350:	f003 031f 	and.w	r3, r3, #31
   d4354:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4358:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d435c:	f7ff ff6a 	bl	d4234 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4360:	9b01      	ldr	r3, [sp, #4]
   d4362:	f04f 0801 	mov.w	r8, #1
   d4366:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d436a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d436e:	2014      	movs	r0, #20
   d4370:	f001 f94c 	bl	d560c <delay>
	noInterrupts();
   d4374:	f001 fad4 	bl	d5920 <_Z12noInterruptsv>

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4378:	79a3      	ldrb	r3, [r4, #6]
   d437a:	6832      	ldr	r2, [r6, #0]
   d437c:	011b      	lsls	r3, r3, #4
   d437e:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4380:	5cd0      	ldrb	r0, [r2, r3]
   d4382:	784b      	ldrb	r3, [r1, #1]
   d4384:	f003 031f 	and.w	r3, r3, #31
   d4388:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d438c:	f7ff ff6a 	bl	d4264 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4390:	2028      	movs	r0, #40	; 0x28
   d4392:	f000 f903 	bl	d459c <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d4396:	4629      	mov	r1, r5
   d4398:	79a0      	ldrb	r0, [r4, #6]
   d439a:	f001 fdc5 	bl	d5f28 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d439e:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d43a0:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43a4:	79a3      	ldrb	r3, [r4, #6]
   d43a6:	6832      	ldr	r2, [r6, #0]
   d43a8:	011b      	lsls	r3, r3, #4
   d43aa:	18d1      	adds	r1, r2, r3
   d43ac:	f812 a003 	ldrb.w	sl, [r2, r3]
   d43b0:	784b      	ldrb	r3, [r1, #1]
   d43b2:	f003 031f 	and.w	r3, r3, #31
   d43b6:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d43ba:	4650      	mov	r0, sl
   d43bc:	f7ff ff61 	bl	d4282 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d43c0:	4650      	mov	r0, sl
   d43c2:	f7ff ff5e 	bl	d4282 <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d43c6:	4580      	cmp	r8, r0
   d43c8:	fa5f f98b 	uxtb.w	r9, fp
   d43cc:	d108      	bne.n	d43e0 <_ZN3DHT4readEv+0x100>
   d43ce:	2001      	movs	r0, #1
   d43d0:	f10b 0b01 	add.w	fp, fp, #1
   d43d4:	f000 f8e2 	bl	d459c <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d43d8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d43dc:	d1e2      	bne.n	d43a4 <_ZN3DHT4readEv+0xc4>
   d43de:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43e0:	79a3      	ldrb	r3, [r4, #6]
   d43e2:	6832      	ldr	r2, [r6, #0]
   d43e4:	011b      	lsls	r3, r3, #4
   d43e6:	18d1      	adds	r1, r2, r3
   d43e8:	f812 8003 	ldrb.w	r8, [r2, r3]
   d43ec:	784b      	ldrb	r3, [r1, #1]
   d43ee:	f003 031f 	and.w	r3, r3, #31
   d43f2:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d43f6:	4640      	mov	r0, r8
   d43f8:	f7ff ff43 	bl	d4282 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d43fc:	4640      	mov	r0, r8
   d43fe:	f7ff ff40 	bl	d4282 <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4402:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4406:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d440a:	d014      	beq.n	d4436 <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d440c:	2d03      	cmp	r5, #3
   d440e:	d90e      	bls.n	d442e <_ZN3DHT4readEv+0x14e>
   d4410:	07eb      	lsls	r3, r5, #31
   d4412:	d40c      	bmi.n	d442e <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4414:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4416:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4418:	5ca3      	ldrb	r3, [r4, r2]
   d441a:	005b      	lsls	r3, r3, #1
   d441c:	b2db      	uxtb	r3, r3
   d441e:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4420:	7a21      	ldrb	r1, [r4, #8]
   d4422:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4424:	bf3c      	itt	cc
   d4426:	f043 0301 	orrcc.w	r3, r3, #1
   d442a:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d442c:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d442e:	3501      	adds	r5, #1
   d4430:	b2ed      	uxtb	r5, r5
   d4432:	2d55      	cmp	r5, #85	; 0x55
   d4434:	d1b4      	bne.n	d43a0 <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4436:	f001 fa75 	bl	d5924 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d443a:	2f27      	cmp	r7, #39	; 0x27
   d443c:	d90b      	bls.n	d4456 <_ZN3DHT4readEv+0x176>
   d443e:	7822      	ldrb	r2, [r4, #0]
   d4440:	7863      	ldrb	r3, [r4, #1]
   d4442:	7921      	ldrb	r1, [r4, #4]
   d4444:	4413      	add	r3, r2
   d4446:	78a2      	ldrb	r2, [r4, #2]
   d4448:	4413      	add	r3, r2
   d444a:	78e2      	ldrb	r2, [r4, #3]
   d444c:	4413      	add	r3, r2
   d444e:	b2db      	uxtb	r3, r3
   d4450:	4299      	cmp	r1, r3
   d4452:	f43f af56 	beq.w	d4302 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4456:	2000      	movs	r0, #0

}
   d4458:	b003      	add	sp, #12
   d445a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d445e:	bf00      	nop
   d4460:	2003e2a0 	.word	0x2003e2a0

000d4464 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4464:	b510      	push	{r4, lr}
   d4466:	4604      	mov	r4, r0
	float f;

	if (read())
   d4468:	f7ff ff3a 	bl	d42e0 <_ZN3DHT4readEv>
   d446c:	b128      	cbz	r0, d447a <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d446e:	78a3      	ldrb	r3, [r4, #2]
   d4470:	ee00 3a10 	vmov	s0, r3
   d4474:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4478:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d447a:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4480 <_ZN3DHT15readTemperatureEv+0x1c>
}
   d447e:	bd10      	pop	{r4, pc}
   d4480:	7fc00000 	.word	0x7fc00000

000d4484 <_ZN3DHT14getTempCelciusEv>:
	return readHumidity();
}

float DHT::getTempCelcius()
{
	return readTemperature();
   d4484:	f7ff bfee 	b.w	d4464 <_ZN3DHT15readTemperatureEv>

000d4488 <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4488:	b510      	push	{r4, lr}
   d448a:	4604      	mov	r4, r0
	float f;

	if (read())
   d448c:	f7ff ff28 	bl	d42e0 <_ZN3DHT4readEv>
   d4490:	b128      	cbz	r0, d449e <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4492:	7823      	ldrb	r3, [r4, #0]
   d4494:	ee00 3a10 	vmov	s0, r3
   d4498:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d449c:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d449e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d44a4 <_ZN3DHT12readHumidityEv+0x1c>
}
   d44a2:	bd10      	pop	{r4, pc}
   d44a4:	7fc00000 	.word	0x7fc00000

000d44a8 <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d44a8:	f7ff bfee 	b.w	d4488 <_ZN3DHT12readHumidityEv>

000d44ac <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d44ac:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44ae:	f000 f815 	bl	d44dc <HAL_Pin_Map>
   d44b2:	4b01      	ldr	r3, [pc, #4]	; (d44b8 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d44b4:	6018      	str	r0, [r3, #0]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	2003e2a0 	.word	0x2003e2a0

000d44bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <netdb_freeaddrinfo+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	689b      	ldr	r3, [r3, #8]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030268 	.word	0x00030268

000d44cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <netdb_getaddrinfo+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	68db      	ldr	r3, [r3, #12]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030268 	.word	0x00030268

000d44dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <HAL_Pin_Map+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	681b      	ldr	r3, [r3, #0]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	0003022c 	.word	0x0003022c

000d44ec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <HAL_Pin_Mode+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	689b      	ldr	r3, [r3, #8]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003022c 	.word	0x0003022c

000d44fc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <HAL_Interrupts_Enable_All+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	6a1b      	ldr	r3, [r3, #32]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003022c 	.word	0x0003022c

000d450c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <HAL_Interrupts_Disable_All+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003022c 	.word	0x0003022c

000d451c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <HAL_SPI_Init+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	69db      	ldr	r3, [r3, #28]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	00030230 	.word	0x00030230

000d452c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <HAL_SPI_Is_Enabled+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6a1b      	ldr	r3, [r3, #32]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030230 	.word	0x00030230

000d453c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <if_name_to_index+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	691b      	ldr	r3, [r3, #16]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003026c 	.word	0x0003026c

000d454c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <if_index_to_name+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	695b      	ldr	r3, [r3, #20]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003026c 	.word	0x0003026c

000d455c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <if_get_by_index+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	699b      	ldr	r3, [r3, #24]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003026c 	.word	0x0003026c

000d456c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <if_get_addrs+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003026c 	.word	0x0003026c

000d457c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <if_free_if_addrs+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003026c 	.word	0x0003026c

000d458c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_RNG_GetRandomNumber+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	685b      	ldr	r3, [r3, #4]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030218 	.word	0x00030218

000d459c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_Delay_Microseconds+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	68db      	ldr	r3, [r3, #12]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030218 	.word	0x00030218

000d45ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	695b      	ldr	r3, [r3, #20]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030218 	.word	0x00030218

000d45bc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_RTC_Get_UnixTime+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	69db      	ldr	r3, [r3, #28]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030218 	.word	0x00030218

000d45cc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_RTC_Time_Is_Valid+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030218 	.word	0x00030218

000d45dc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <os_thread_is_current+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	689b      	ldr	r3, [r3, #8]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030248 	.word	0x00030248

000d45ec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <os_thread_join+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	691b      	ldr	r3, [r3, #16]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030248 	.word	0x00030248

000d45fc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <os_thread_cleanup+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	695b      	ldr	r3, [r3, #20]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030248 	.word	0x00030248

000d460c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <os_mutex_create+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030248 	.word	0x00030248

000d461c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <os_mutex_recursive_create+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030248 	.word	0x00030248

000d462c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <os_mutex_recursive_lock+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030248 	.word	0x00030248

000d463c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <os_mutex_recursive_unlock+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030248 	.word	0x00030248

000d464c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <inet_inet_ntop+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	695b      	ldr	r3, [r3, #20]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030264 	.word	0x00030264

000d465c <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <inet_inet_pton+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	699b      	ldr	r3, [r3, #24]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030264 	.word	0x00030264

000d466c <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <inet_htonl+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6a1b      	ldr	r3, [r3, #32]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030264 	.word	0x00030264

000d467c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <inet_ntohs+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030264 	.word	0x00030264

000d468c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <inet_htons+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030264 	.word	0x00030264

000d469c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_USART_Init+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	681b      	ldr	r3, [r3, #0]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003023c 	.word	0x0003023c

000d46ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_USART_Write_Data+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	68db      	ldr	r3, [r3, #12]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003023c 	.word	0x0003023c

000d46bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_USART_Available_Data+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	691b      	ldr	r3, [r3, #16]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	0003023c 	.word	0x0003023c

000d46cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_USART_Read_Data+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	695b      	ldr	r3, [r3, #20]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003023c 	.word	0x0003023c

000d46dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_USART_Peek_Data+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	699b      	ldr	r3, [r3, #24]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	0003023c 	.word	0x0003023c

000d46ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_USART_Flush_Data+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	69db      	ldr	r3, [r3, #28]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	0003023c 	.word	0x0003023c

000d46fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_USART_Is_Enabled+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	6a1b      	ldr	r3, [r3, #32]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	0003023c 	.word	0x0003023c

000d470c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <HAL_USART_Available_Data_For_Write+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	0003023c 	.word	0x0003023c

000d471c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <HAL_I2C_Write_Data+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6a1b      	ldr	r3, [r3, #32]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030228 	.word	0x00030228

000d472c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <HAL_I2C_Available_Data+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030228 	.word	0x00030228

000d473c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <HAL_I2C_Read_Data+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030228 	.word	0x00030228

000d474c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <HAL_I2C_Peek_Data+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030228 	.word	0x00030228

000d475c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <HAL_I2C_Flush_Data+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030228 	.word	0x00030228

000d476c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <HAL_I2C_Is_Enabled+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030228 	.word	0x00030228

000d477c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <HAL_I2C_Init+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030228 	.word	0x00030228

000d478c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <sock_bind+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	685b      	ldr	r3, [r3, #4]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030238 	.word	0x00030238

000d479c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <sock_setsockopt+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	699b      	ldr	r3, [r3, #24]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030238 	.word	0x00030238

000d47ac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <sock_close+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	69db      	ldr	r3, [r3, #28]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030238 	.word	0x00030238

000d47bc <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <sock_recvfrom+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030238 	.word	0x00030238

000d47cc <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <sock_sendto+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030238 	.word	0x00030238

000d47dc <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <sock_socket+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030238 	.word	0x00030238

000d47ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <HAL_USB_USART_Init+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	681b      	ldr	r3, [r3, #0]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	0003024c 	.word	0x0003024c

000d47fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <HAL_USB_USART_Begin+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	685b      	ldr	r3, [r3, #4]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	0003024c 	.word	0x0003024c

000d480c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_USB_USART_Available_Data+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	691b      	ldr	r3, [r3, #16]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	0003024c 	.word	0x0003024c

000d481c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	695b      	ldr	r3, [r3, #20]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	0003024c 	.word	0x0003024c

000d482c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <HAL_USB_USART_Receive_Data+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	699b      	ldr	r3, [r3, #24]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	0003024c 	.word	0x0003024c

000d483c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <HAL_USB_USART_Send_Data+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	69db      	ldr	r3, [r3, #28]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	0003024c 	.word	0x0003024c

000d484c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_USB_USART_Flush_Data+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6a1b      	ldr	r3, [r3, #32]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003024c 	.word	0x0003024c

000d485c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <panic_+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030260 	.word	0x00030260

000d486c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <system_mode+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	681b      	ldr	r3, [r3, #0]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030220 	.word	0x00030220

000d487c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <set_system_mode+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	685b      	ldr	r3, [r3, #4]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030220 	.word	0x00030220

000d488c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <system_delay_ms+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	695b      	ldr	r3, [r3, #20]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030220 	.word	0x00030220

000d489c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <system_thread_get_state+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030220 	.word	0x00030220

000d48ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b03      	ldr	r3, [pc, #12]	; (d48bc <system_ctrl_set_app_request_handler+0x10>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48b6:	9301      	str	r3, [sp, #4]
   d48b8:	bd08      	pop	{r3, pc}
   d48ba:	0000      	.short	0x0000
   d48bc:	00030220 	.word	0x00030220

000d48c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b03      	ldr	r3, [pc, #12]	; (d48d0 <system_ctrl_set_result+0x10>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48ca:	9301      	str	r3, [sp, #4]
   d48cc:	bd08      	pop	{r3, pc}
   d48ce:	0000      	.short	0x0000
   d48d0:	00030220 	.word	0x00030220

000d48d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <network_connect+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	685b      	ldr	r3, [r3, #4]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030240 	.word	0x00030240

000d48e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <network_connecting+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	689b      	ldr	r3, [r3, #8]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030240 	.word	0x00030240

000d48f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <network_disconnect+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	68db      	ldr	r3, [r3, #12]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030240 	.word	0x00030240

000d4904 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <network_ready+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	691b      	ldr	r3, [r3, #16]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030240 	.word	0x00030240

000d4914 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <network_on+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	695b      	ldr	r3, [r3, #20]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030240 	.word	0x00030240

000d4924 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_off+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	699b      	ldr	r3, [r3, #24]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_listen+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	69db      	ldr	r3, [r3, #28]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_listening+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	6a1b      	ldr	r3, [r3, #32]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_set_listen_timeout+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_get_listen_timeout+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <spark_process+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	689b      	ldr	r3, [r3, #8]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030244 	.word	0x00030244

000d4984 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <spark_cloud_flag_connected+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	695b      	ldr	r3, [r3, #20]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030244 	.word	0x00030244

000d4994 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <spark_deviceID+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	69db      	ldr	r3, [r3, #28]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030244 	.word	0x00030244

000d49a4 <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <spark_sync_time+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030244 	.word	0x00030244

000d49b4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <spark_sync_time_pending+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030244 	.word	0x00030244

000d49c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030244 	.word	0x00030244

000d49d4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <malloc+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	681b      	ldr	r3, [r3, #0]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	0003021c 	.word	0x0003021c

000d49e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <free+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	685b      	ldr	r3, [r3, #4]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	0003021c 	.word	0x0003021c

000d49f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <realloc+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	689b      	ldr	r3, [r3, #8]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	0003021c 	.word	0x0003021c

000d4a04 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <sprintf+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	68db      	ldr	r3, [r3, #12]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003021c 	.word	0x0003021c

000d4a14 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <siprintf+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	691b      	ldr	r3, [r3, #16]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	0003021c 	.word	0x0003021c

000d4a24 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <siscanf+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	699b      	ldr	r3, [r3, #24]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003021c 	.word	0x0003021c

000d4a34 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <snprintf+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	69db      	ldr	r3, [r3, #28]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003021c 	.word	0x0003021c

000d4a44 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <sniprintf+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6a1b      	ldr	r3, [r3, #32]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003021c 	.word	0x0003021c

000d4a54 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <vsnprintf+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003021c 	.word	0x0003021c

000d4a64 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <_malloc_r+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003021c 	.word	0x0003021c

000d4a74 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a74:	2200      	movs	r2, #0
   d4a76:	4611      	mov	r1, r2
   d4a78:	6840      	ldr	r0, [r0, #4]
   d4a7a:	f7ff bf63 	b.w	d4944 <network_listening>

000d4a7e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a7e:	2200      	movs	r2, #0
   d4a80:	4611      	mov	r1, r2
   d4a82:	6840      	ldr	r0, [r0, #4]
   d4a84:	f7ff bf6e 	b.w	d4964 <network_get_listen_timeout>

000d4a88 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a88:	2200      	movs	r2, #0
   d4a8a:	6840      	ldr	r0, [r0, #4]
   d4a8c:	f7ff bf62 	b.w	d4954 <network_set_listen_timeout>

000d4a90 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a90:	2200      	movs	r2, #0
   d4a92:	f081 0101 	eor.w	r1, r1, #1
   d4a96:	6840      	ldr	r0, [r0, #4]
   d4a98:	f7ff bf4c 	b.w	d4934 <network_listen>

000d4a9c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a9c:	2300      	movs	r3, #0
   d4a9e:	461a      	mov	r2, r3
   d4aa0:	4619      	mov	r1, r3
   d4aa2:	6840      	ldr	r0, [r0, #4]
   d4aa4:	f7ff bf3e 	b.w	d4924 <network_off>

000d4aa8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4aa8:	2300      	movs	r3, #0
   d4aaa:	461a      	mov	r2, r3
   d4aac:	4619      	mov	r1, r3
   d4aae:	6840      	ldr	r0, [r0, #4]
   d4ab0:	f7ff bf30 	b.w	d4914 <network_on>

000d4ab4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ab4:	2200      	movs	r2, #0
   d4ab6:	4611      	mov	r1, r2
   d4ab8:	6840      	ldr	r0, [r0, #4]
   d4aba:	f7ff bf23 	b.w	d4904 <network_ready>

000d4abe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4abe:	2200      	movs	r2, #0
   d4ac0:	4611      	mov	r1, r2
   d4ac2:	6840      	ldr	r0, [r0, #4]
   d4ac4:	f7ff bf0e 	b.w	d48e4 <network_connecting>

000d4ac8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ac8:	2200      	movs	r2, #0
   d4aca:	2102      	movs	r1, #2
   d4acc:	6840      	ldr	r0, [r0, #4]
   d4ace:	f7ff bf11 	b.w	d48f4 <network_disconnect>

000d4ad2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4ad2:	2300      	movs	r3, #0
   d4ad4:	461a      	mov	r2, r3
   d4ad6:	6840      	ldr	r0, [r0, #4]
   d4ad8:	f7ff befc 	b.w	d48d4 <network_connect>

000d4adc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4adc:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ade:	2203      	movs	r2, #3
   d4ae0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ae2:	4a02      	ldr	r2, [pc, #8]	; (d4aec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ae4:	601a      	str	r2, [r3, #0]
   d4ae6:	4770      	bx	lr
   d4ae8:	2003e2a4 	.word	0x2003e2a4
   d4aec:	000d7b64 	.word	0x000d7b64

000d4af0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4af0:	4770      	bx	lr

000d4af2 <_ZN8SPIClassD0Ev>:
   d4af2:	b510      	push	{r4, lr}
   d4af4:	4604      	mov	r4, r0
   d4af6:	f7ff fad2 	bl	d409e <_ZdlPv>
   d4afa:	4620      	mov	r0, r4
   d4afc:	bd10      	pop	{r4, pc}
	...

000d4b00 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4b00:	b570      	push	{r4, r5, r6, lr}
   d4b02:	4b08      	ldr	r3, [pc, #32]	; (d4b24 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4b04:	6003      	str	r3, [r0, #0]
   d4b06:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4b08:	2500      	movs	r5, #0
   d4b0a:	460e      	mov	r6, r1
   d4b0c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4b10:	f7ff fd7c 	bl	d460c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4b14:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4b16:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4b18:	f7ff fd00 	bl	d451c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4b1c:	60a5      	str	r5, [r4, #8]
}
   d4b1e:	4620      	mov	r0, r4
   d4b20:	bd70      	pop	{r4, r5, r6, pc}
   d4b22:	bf00      	nop
   d4b24:	000d7b98 	.word	0x000d7b98

000d4b28 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4b28:	7900      	ldrb	r0, [r0, #4]
   d4b2a:	f7ff bcff 	b.w	d452c <HAL_SPI_Is_Enabled>
	...

000d4b30 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4b30:	4b04      	ldr	r3, [pc, #16]	; (d4b44 <_GLOBAL__sub_I_System+0x14>)
   d4b32:	2000      	movs	r0, #0
   d4b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4b38:	7018      	strb	r0, [r3, #0]
   d4b3a:	8058      	strh	r0, [r3, #2]
   d4b3c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b3e:	f7ff be9d 	b.w	d487c <set_system_mode>
   d4b42:	bf00      	nop
   d4b44:	2003e2ac 	.word	0x2003e2ac

000d4b48 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4b48:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4b4a:	6804      	ldr	r4, [r0, #0]
   d4b4c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4b4e:	46a4      	mov	ip, r4
    }
   d4b50:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4b54:	4760      	bx	ip

000d4b56 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4b56:	6803      	ldr	r3, [r0, #0]
   d4b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4b5a:	4718      	bx	r3

000d4b5c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4b5c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4b5e:	4770      	bx	lr

000d4b60 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4b60:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4b62:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4b64:	1a10      	subs	r0, r2, r0
   d4b66:	4770      	bx	lr

000d4b68 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4b68:	b513      	push	{r0, r1, r4, lr}
   d4b6a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4b6c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4b6e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4b72:	68d4      	ldr	r4, [r2, #12]
   d4b74:	4619      	mov	r1, r3
   d4b76:	2201      	movs	r2, #1
   d4b78:	47a0      	blx	r4
}
   d4b7a:	b002      	add	sp, #8
   d4b7c:	bd10      	pop	{r4, pc}

000d4b7e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4b7e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4b80:	6803      	ldr	r3, [r0, #0]
   d4b82:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4b84:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4b86:	4798      	blx	r3
   d4b88:	b128      	cbz	r0, d4b96 <_ZN3UDP4readEv+0x18>
   d4b8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4b8c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4b8e:	1c59      	adds	r1, r3, #1
   d4b90:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4b92:	5cd0      	ldrb	r0, [r2, r3]
   d4b94:	bd10      	pop	{r4, pc}
   d4b96:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4b9a:	bd10      	pop	{r4, pc}

000d4b9c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4b9c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4b9e:	6803      	ldr	r3, [r0, #0]
   d4ba0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4ba2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4ba4:	4798      	blx	r3
   d4ba6:	b118      	cbz	r0, d4bb0 <_ZN3UDP4peekEv+0x14>
   d4ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4baa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4bac:	5cd0      	ldrb	r0, [r2, r3]
   d4bae:	bd10      	pop	{r4, pc}
   d4bb0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4bb4:	bd10      	pop	{r4, pc}

000d4bb6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4bb6:	4770      	bx	lr

000d4bb8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4bb8:	b410      	push	{r4}
   d4bba:	4603      	mov	r3, r0
   d4bbc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4bbe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4bc0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4bc2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4bc4:	6803      	ldr	r3, [r0, #0]
   d4bc6:	1a52      	subs	r2, r2, r1
   d4bc8:	68db      	ldr	r3, [r3, #12]
   d4bca:	4421      	add	r1, r4
}
   d4bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4bd0:	4718      	bx	r3

000d4bd2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4bd2:	f1a0 0010 	sub.w	r0, r0, #16
   d4bd6:	f7ff bfef 	b.w	d4bb8 <_ZNK3UDP7printToER5Print>

000d4bda <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4bda:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4bdc:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4bde:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4be0:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4be4:	4604      	mov	r4, r0
   d4be6:	460f      	mov	r7, r1
   d4be8:	4615      	mov	r5, r2
    stop();
   d4bea:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4bec:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4bee:	4632      	mov	r2, r6
   d4bf0:	2100      	movs	r1, #0
   d4bf2:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4bf4:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4bf6:	f001 fe3e 	bl	d6876 <memset>
    saddr.sin6_len = sizeof(saddr);
   d4bfa:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4bfe:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4c00:	260a      	movs	r6, #10
   d4c02:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4c06:	f7ff fd41 	bl	d468c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4c0a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4c0c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4c10:	2102      	movs	r1, #2
   d4c12:	4630      	mov	r0, r6
   d4c14:	f7ff fde2 	bl	d47dc <sock_socket>

    if (_sock < 0) {
   d4c18:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4c1a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4c1c:	db24      	blt.n	d4c68 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4c1e:	2204      	movs	r2, #4
   d4c20:	9200      	str	r2, [sp, #0]
   d4c22:	ab02      	add	r3, sp, #8
   d4c24:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4c28:	f7ff fdb8 	bl	d479c <sock_setsockopt>
   d4c2c:	b9e0      	cbnz	r0, d4c68 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4c2e:	b195      	cbz	r5, d4c56 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4c30:	9003      	str	r0, [sp, #12]
   d4c32:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4c36:	a903      	add	r1, sp, #12
   d4c38:	b2e8      	uxtb	r0, r5
   d4c3a:	f7ff fc87 	bl	d454c <if_index_to_name>
   d4c3e:	b998      	cbnz	r0, d4c68 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4c40:	2306      	movs	r3, #6
   d4c42:	9300      	str	r3, [sp, #0]
   d4c44:	f241 020b 	movw	r2, #4107	; 0x100b
   d4c48:	ab03      	add	r3, sp, #12
   d4c4a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4c4e:	6960      	ldr	r0, [r4, #20]
   d4c50:	f7ff fda4 	bl	d479c <sock_setsockopt>
   d4c54:	b940      	cbnz	r0, d4c68 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4c56:	221c      	movs	r2, #28
   d4c58:	a905      	add	r1, sp, #20
   d4c5a:	6960      	ldr	r0, [r4, #20]
   d4c5c:	f7ff fd96 	bl	d478c <sock_bind>
   d4c60:	b910      	cbnz	r0, d4c68 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4c62:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4c64:	2001      	movs	r0, #1
   d4c66:	e004      	b.n	d4c72 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4c68:	6823      	ldr	r3, [r4, #0]
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c6e:	4798      	blx	r3
   d4c70:	2000      	movs	r0, #0
    }
    return bound;
}
   d4c72:	b00d      	add	sp, #52	; 0x34
   d4c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c76 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4c76:	b510      	push	{r4, lr}
   d4c78:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4c7a:	6940      	ldr	r0, [r0, #20]
   d4c7c:	2800      	cmp	r0, #0
   d4c7e:	db01      	blt.n	d4c84 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4c80:	f7ff fd94 	bl	d47ac <sock_close>
    }

    _sock = -1;
   d4c84:	f04f 33ff 	mov.w	r3, #4294967295
   d4c88:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4c8a:	2300      	movs	r3, #0
   d4c8c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4c8e:	8723      	strh	r3, [r4, #56]	; 0x38
   d4c90:	bd10      	pop	{r4, pc}

000d4c92 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4c92:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4c94:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4c96:	4605      	mov	r5, r0
   d4c98:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4c9a:	b113      	cbz	r3, d4ca2 <_ZN3UDP5writeEPKhj+0x10>
   d4c9c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4c9e:	1a24      	subs	r4, r4, r0
   d4ca0:	e000      	b.n	d4ca4 <_ZN3UDP5writeEPKhj+0x12>
   d4ca2:	461c      	mov	r4, r3
   d4ca4:	4294      	cmp	r4, r2
   d4ca6:	bf28      	it	cs
   d4ca8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4caa:	4622      	mov	r2, r4
   d4cac:	4418      	add	r0, r3
   d4cae:	f001 fdd7 	bl	d6860 <memcpy>
    _offset += size;
   d4cb2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4cb4:	4423      	add	r3, r4
   d4cb6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd38      	pop	{r3, r4, r5, pc}

000d4cbc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4cbc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4cbe:	6803      	ldr	r3, [r0, #0]
   d4cc0:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4cc2:	4604      	mov	r4, r0
   d4cc4:	460e      	mov	r6, r1
   d4cc6:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4cc8:	4798      	blx	r3
   d4cca:	b188      	cbz	r0, d4cf0 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4ccc:	6823      	ldr	r3, [r4, #0]
   d4cce:	4620      	mov	r0, r4
   d4cd0:	691b      	ldr	r3, [r3, #16]
   d4cd2:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4cd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4cd6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4cd8:	4285      	cmp	r5, r0
   d4cda:	bfa8      	it	ge
   d4cdc:	4605      	movge	r5, r0
   d4cde:	4419      	add	r1, r3
   d4ce0:	462a      	mov	r2, r5
   d4ce2:	4630      	mov	r0, r6
   d4ce4:	f001 fdbc 	bl	d6860 <memcpy>
        _offset += read;
   d4ce8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4cea:	442b      	add	r3, r5
   d4cec:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4cee:	e001      	b.n	d4cf4 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4cf0:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4cf4:	4628      	mov	r0, r5
   d4cf6:	bd70      	pop	{r4, r5, r6, pc}

000d4cf8 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4cf8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4cfa:	4604      	mov	r4, r0
   d4cfc:	4b05      	ldr	r3, [pc, #20]	; (d4d14 <_ZN3UDP8remoteIPEv+0x1c>)
   d4cfe:	f844 3b04 	str.w	r3, [r4], #4
   d4d02:	f101 0520 	add.w	r5, r1, #32
   d4d06:	4606      	mov	r6, r0
   d4d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d0c:	682b      	ldr	r3, [r5, #0]
   d4d0e:	7023      	strb	r3, [r4, #0]
   d4d10:	4630      	mov	r0, r6
   d4d12:	bd70      	pop	{r4, r5, r6, pc}
   d4d14:	000d7d20 	.word	0x000d7d20

000d4d18 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d1a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4d1c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4d1e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4d20:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4d22:	4a0a      	ldr	r2, [pc, #40]	; (d4d4c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4d24:	9202      	str	r2, [sp, #8]
   d4d26:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4d28:	468e      	mov	lr, r1
   d4d2a:	4606      	mov	r6, r0
   d4d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d2e:	ac03      	add	r4, sp, #12
   d4d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d32:	682b      	ldr	r3, [r5, #0]
   d4d34:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4d36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4d3a:	9300      	str	r3, [sp, #0]
   d4d3c:	4662      	mov	r2, ip
   d4d3e:	ab02      	add	r3, sp, #8
   d4d40:	4671      	mov	r1, lr
   d4d42:	4630      	mov	r0, r6
   d4d44:	47b8      	blx	r7
    }
   d4d46:	b009      	add	sp, #36	; 0x24
   d4d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d4a:	bf00      	nop
   d4d4c:	000d7d20 	.word	0x000d7d20

000d4d50 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4d50:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4d52:	6803      	ldr	r3, [r0, #0]
   d4d54:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4d58:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4d5a:	4b0d      	ldr	r3, [pc, #52]	; (d4d90 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4d5c:	b089      	sub	sp, #36	; 0x24
   d4d5e:	f100 0620 	add.w	r6, r0, #32
   d4d62:	4604      	mov	r4, r0
   d4d64:	9302      	str	r3, [sp, #8]
   d4d66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4d68:	ad03      	add	r5, sp, #12
   d4d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d6c:	6833      	ldr	r3, [r6, #0]
   d4d6e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4d70:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4d72:	9300      	str	r3, [sp, #0]
   d4d74:	4672      	mov	r2, lr
   d4d76:	ab02      	add	r3, sp, #8
   d4d78:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4d7e:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4d80:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4d82:	69db      	ldr	r3, [r3, #28]
   d4d84:	4620      	mov	r0, r4
   d4d86:	4798      	blx	r3
    return result;
}
   d4d88:	4628      	mov	r0, r5
   d4d8a:	b009      	add	sp, #36	; 0x24
   d4d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d8e:	bf00      	nop
   d4d90:	000d7d20 	.word	0x000d7d20

000d4d94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d4d96:	7843      	ldrb	r3, [r0, #1]
   d4d98:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4d9a:	b08d      	sub	sp, #52	; 0x34
   d4d9c:	4605      	mov	r5, r0
   d4d9e:	460c      	mov	r4, r1
   d4da0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d4da2:	d101      	bne.n	d4da8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4da4:	1d01      	adds	r1, r0, #4
   d4da6:	e033      	b.n	d4e10 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d4da8:	2b0a      	cmp	r3, #10
   d4daa:	d135      	bne.n	d4e18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d4dac:	2211      	movs	r2, #17
   d4dae:	2100      	movs	r1, #0
   d4db0:	a801      	add	r0, sp, #4
   d4db2:	f001 fd60 	bl	d6876 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d4db6:	68ab      	ldr	r3, [r5, #8]
   d4db8:	b943      	cbnz	r3, d4dcc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4dba:	68eb      	ldr	r3, [r5, #12]
   d4dbc:	b933      	cbnz	r3, d4dcc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4dbe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d4dc2:	692e      	ldr	r6, [r5, #16]
   d4dc4:	f7ff fc52 	bl	d466c <inet_htonl>
   d4dc8:	4286      	cmp	r6, r0
   d4dca:	d01f      	beq.n	d4e0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4dcc:	f105 0308 	add.w	r3, r5, #8
   d4dd0:	ae01      	add	r6, sp, #4
   d4dd2:	f105 0e18 	add.w	lr, r5, #24
   d4dd6:	6818      	ldr	r0, [r3, #0]
   d4dd8:	6859      	ldr	r1, [r3, #4]
   d4dda:	4632      	mov	r2, r6
   d4ddc:	c203      	stmia	r2!, {r0, r1}
   d4dde:	3308      	adds	r3, #8
   d4de0:	4573      	cmp	r3, lr
   d4de2:	4616      	mov	r6, r2
   d4de4:	d1f7      	bne.n	d4dd6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d4de6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d4de8:	a901      	add	r1, sp, #4
   d4dea:	a806      	add	r0, sp, #24
   d4dec:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d4dee:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d4df2:	f000 fce5 	bl	d57c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4df6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4df8:	3404      	adds	r4, #4
   d4dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4dfc:	6833      	ldr	r3, [r6, #0]
   d4dfe:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d4e00:	b157      	cbz	r7, d4e18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d4e02:	8868      	ldrh	r0, [r5, #2]
   d4e04:	f7ff fc3a 	bl	d467c <inet_ntohs>
   d4e08:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d4e0a:	e005      	b.n	d4e18 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4e0c:	f105 0114 	add.w	r1, r5, #20
   d4e10:	4620      	mov	r0, r4
   d4e12:	f000 fd0a 	bl	d582a <_ZN9IPAddressaSEPKh>
   d4e16:	e7f3      	b.n	d4e00 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d4e18:	b00d      	add	sp, #52	; 0x34
   d4e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e1c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e20:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d4e22:	ab0e      	add	r3, sp, #56	; 0x38
   d4e24:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4e26:	4606      	mov	r6, r0
   d4e28:	4617      	mov	r7, r2
   d4e2a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d4e2c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d4e30:	462a      	mov	r2, r5
   d4e32:	4629      	mov	r1, r5
   d4e34:	f7ff fb4a 	bl	d44cc <netdb_getaddrinfo>
   d4e38:	2800      	cmp	r0, #0
   d4e3a:	db1f      	blt.n	d4e7c <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d4e3c:	9b01      	ldr	r3, [sp, #4]
   d4e3e:	b1fb      	cbz	r3, d4e80 <_ZN3UDP11beginPacketEPKct+0x64>
   d4e40:	695b      	ldr	r3, [r3, #20]
   d4e42:	b1eb      	cbz	r3, d4e80 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d4e44:	a802      	add	r0, sp, #8
   d4e46:	f000 fcad 	bl	d57a4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4e4a:	9b01      	ldr	r3, [sp, #4]
   d4e4c:	462a      	mov	r2, r5
   d4e4e:	6958      	ldr	r0, [r3, #20]
   d4e50:	a902      	add	r1, sp, #8
   d4e52:	f7ff ff9f 	bl	d4d94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d4e56:	a802      	add	r0, sp, #8
   d4e58:	f000 fcc4 	bl	d57e4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d4e5c:	b180      	cbz	r0, d4e80 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d4e5e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e60:	ad03      	add	r5, sp, #12
   d4e62:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4e66:	4b0b      	ldr	r3, [pc, #44]	; (d4e94 <_ZN3UDP11beginPacketEPKct+0x78>)
   d4e68:	9308      	str	r3, [sp, #32]
   d4e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e6c:	ac09      	add	r4, sp, #36	; 0x24
   d4e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e70:	682b      	ldr	r3, [r5, #0]
   d4e72:	7023      	strb	r3, [r4, #0]
   d4e74:	463a      	mov	r2, r7
   d4e76:	a908      	add	r1, sp, #32
   d4e78:	4630      	mov	r0, r6
   d4e7a:	47c0      	blx	r8
   d4e7c:	4604      	mov	r4, r0
   d4e7e:	e001      	b.n	d4e84 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d4e80:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d4e84:	9801      	ldr	r0, [sp, #4]
   d4e86:	f7ff fb19 	bl	d44bc <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	b00e      	add	sp, #56	; 0x38
   d4e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e92:	bf00      	nop
   d4e94:	000d7d20 	.word	0x000d7d20

000d4e98 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4e9c:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d4ea0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4ea4:	b08c      	sub	sp, #48	; 0x30
   d4ea6:	4605      	mov	r5, r0
   d4ea8:	460c      	mov	r4, r1
   d4eaa:	4617      	mov	r7, r2
   d4eac:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4eae:	db00      	blt.n	d4eb2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d4eb0:	b911      	cbnz	r1, d4eb8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d4eb2:	f04f 30ff 	mov.w	r0, #4294967295
   d4eb6:	e035      	b.n	d4f24 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d4eb8:	f04f 0a1c 	mov.w	sl, #28
   d4ebc:	ae05      	add	r6, sp, #20
   d4ebe:	4652      	mov	r2, sl
   d4ec0:	2100      	movs	r1, #0
   d4ec2:	4630      	mov	r0, r6
   d4ec4:	f001 fcd7 	bl	d6876 <memset>
        socklen_t slen = sizeof(saddr);
   d4ec8:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d4ecc:	f1b9 0f00 	cmp.w	r9, #0
   d4ed0:	d014      	beq.n	d4efc <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d4ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4ed6:	fbb9 f1f2 	udiv	r1, r9, r2
   d4eda:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d4edc:	fb02 9111 	mls	r1, r2, r1, r9
   d4ee0:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4ee2:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d4ee4:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4ee6:	9300      	str	r3, [sp, #0]
   d4ee8:	f241 0206 	movw	r2, #4102	; 0x1006
   d4eec:	ab03      	add	r3, sp, #12
   d4eee:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4ef2:	4640      	mov	r0, r8
   d4ef4:	f7ff fc52 	bl	d479c <sock_setsockopt>
            if (ret) {
   d4ef8:	b108      	cbz	r0, d4efe <_ZN3UDP13receivePacketEPhjm+0x66>
   d4efa:	e013      	b.n	d4f24 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d4efc:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4efe:	ab02      	add	r3, sp, #8
   d4f00:	9301      	str	r3, [sp, #4]
   d4f02:	4621      	mov	r1, r4
   d4f04:	4603      	mov	r3, r0
   d4f06:	9600      	str	r6, [sp, #0]
   d4f08:	463a      	mov	r2, r7
   d4f0a:	6968      	ldr	r0, [r5, #20]
   d4f0c:	f7ff fc56 	bl	d47bc <sock_recvfrom>
        if (ret >= 0) {
   d4f10:	1e04      	subs	r4, r0, #0
   d4f12:	db06      	blt.n	d4f22 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d4f14:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d4f18:	f105 011c 	add.w	r1, r5, #28
   d4f1c:	4630      	mov	r0, r6
   d4f1e:	f7ff ff39 	bl	d4d94 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4f22:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d4f24:	b00c      	add	sp, #48	; 0x30
   d4f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4f2a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4f2a:	b538      	push	{r3, r4, r5, lr}
   d4f2c:	4605      	mov	r5, r0
   d4f2e:	4614      	mov	r4, r2
   d4f30:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d4f32:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4f34:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d4f36:	d111      	bne.n	d4f5c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d4f38:	231c      	movs	r3, #28
   d4f3a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d4f3c:	230a      	movs	r3, #10
   d4f3e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d4f40:	f7ff fba4 	bl	d468c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4f44:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d4f46:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4f4a:	1d2b      	adds	r3, r5, #4
   d4f4c:	3514      	adds	r5, #20
   d4f4e:	f853 2b04 	ldr.w	r2, [r3], #4
   d4f52:	f844 2b04 	str.w	r2, [r4], #4
   d4f56:	42ab      	cmp	r3, r5
   d4f58:	d1f9      	bne.n	d4f4e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d4f5a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d4f5c:	2b04      	cmp	r3, #4
   d4f5e:	d10a      	bne.n	d4f76 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d4f60:	2310      	movs	r3, #16
   d4f62:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d4f64:	2302      	movs	r3, #2
   d4f66:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d4f68:	f7ff fb90 	bl	d468c <inet_htons>
   d4f6c:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d4f6e:	6868      	ldr	r0, [r5, #4]
   d4f70:	f7ff fb7c 	bl	d466c <inet_htonl>
   d4f74:	6060      	str	r0, [r4, #4]
   d4f76:	bd38      	pop	{r3, r4, r5, pc}

000d4f78 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f7c:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4f7e:	ac03      	add	r4, sp, #12
   d4f80:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4f82:	4699      	mov	r9, r3
   d4f84:	4606      	mov	r6, r0
   d4f86:	460f      	mov	r7, r1
   d4f88:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4f8a:	2100      	movs	r1, #0
   d4f8c:	462a      	mov	r2, r5
   d4f8e:	4620      	mov	r0, r4
   d4f90:	f001 fc71 	bl	d6876 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d4f94:	4622      	mov	r2, r4
   d4f96:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d4f9a:	4648      	mov	r0, r9
   d4f9c:	f7ff ffc5 	bl	d4f2a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d4fa0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4fa4:	b143      	cbz	r3, d4fb8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d4fa6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4faa:	2300      	movs	r3, #0
   d4fac:	4642      	mov	r2, r8
   d4fae:	4639      	mov	r1, r7
   d4fb0:	6970      	ldr	r0, [r6, #20]
   d4fb2:	f7ff fc0b 	bl	d47cc <sock_sendto>
   d4fb6:	e001      	b.n	d4fbc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d4fb8:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d4fbc:	b00b      	add	sp, #44	; 0x2c
   d4fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4fc2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fc4:	b091      	sub	sp, #68	; 0x44
   d4fc6:	460c      	mov	r4, r1
   d4fc8:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d4fca:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4fcc:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d4fce:	a809      	add	r0, sp, #36	; 0x24
   d4fd0:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4fd2:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d4fd4:	f001 fc4f 	bl	d6876 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d4fd8:	aa09      	add	r2, sp, #36	; 0x24
   d4fda:	2100      	movs	r1, #0
   d4fdc:	4620      	mov	r0, r4
   d4fde:	f7ff ffa4 	bl	d4f2a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d4fe2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4fe6:	2b02      	cmp	r3, #2
   d4fe8:	d12e      	bne.n	d5048 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d4fea:	2300      	movs	r3, #0
   d4fec:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d4fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4ff0:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d4ff2:	b1dd      	cbz	r5, d502c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d4ff4:	a902      	add	r1, sp, #8
   d4ff6:	4628      	mov	r0, r5
   d4ff8:	f7ff fab0 	bl	d455c <if_get_by_index>
   d4ffc:	b9b0      	cbnz	r0, d502c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d4ffe:	a910      	add	r1, sp, #64	; 0x40
   d5000:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5004:	9802      	ldr	r0, [sp, #8]
   d5006:	f7ff fab1 	bl	d456c <if_get_addrs>
   d500a:	b960      	cbnz	r0, d5026 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d500c:	9b03      	ldr	r3, [sp, #12]
   d500e:	b153      	cbz	r3, d5026 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5010:	68da      	ldr	r2, [r3, #12]
   d5012:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5014:	7851      	ldrb	r1, [r2, #1]
   d5016:	2902      	cmp	r1, #2
   d5018:	d103      	bne.n	d5022 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d501a:	6852      	ldr	r2, [r2, #4]
   d501c:	b10a      	cbz	r2, d5022 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d501e:	9205      	str	r2, [sp, #20]
   d5020:	e001      	b.n	d5026 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5022:	681b      	ldr	r3, [r3, #0]
   d5024:	e7f3      	b.n	d500e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5026:	9803      	ldr	r0, [sp, #12]
   d5028:	f7ff faa8 	bl	d457c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d502c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d502e:	f04f 0308 	mov.w	r3, #8
   d5032:	9300      	str	r3, [sp, #0]
   d5034:	bf18      	it	ne
   d5036:	2203      	movne	r2, #3
   d5038:	ab04      	add	r3, sp, #16
   d503a:	bf08      	it	eq
   d503c:	2204      	moveq	r2, #4
   d503e:	2100      	movs	r1, #0
   d5040:	4630      	mov	r0, r6
   d5042:	f7ff fbab 	bl	d479c <sock_setsockopt>
   d5046:	e01e      	b.n	d5086 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5048:	2b0a      	cmp	r3, #10
   d504a:	d11a      	bne.n	d5082 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d504c:	ac04      	add	r4, sp, #16
   d504e:	2214      	movs	r2, #20
   d5050:	2100      	movs	r1, #0
   d5052:	4620      	mov	r0, r4
   d5054:	f001 fc0f 	bl	d6876 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5058:	ab0b      	add	r3, sp, #44	; 0x2c
   d505a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d505c:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d505e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5062:	f04f 0314 	mov.w	r3, #20
   d5066:	9300      	str	r3, [sp, #0]
   d5068:	bf18      	it	ne
   d506a:	220c      	movne	r2, #12
   d506c:	4623      	mov	r3, r4
   d506e:	bf08      	it	eq
   d5070:	220d      	moveq	r2, #13
   d5072:	2129      	movs	r1, #41	; 0x29
   d5074:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5076:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5078:	f7ff fb90 	bl	d479c <sock_setsockopt>
   d507c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5080:	e001      	b.n	d5086 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5082:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5086:	b011      	add	sp, #68	; 0x44
   d5088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d508c <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d508c:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d508e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5092:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5094:	4b0b      	ldr	r3, [pc, #44]	; (d50c4 <_ZN3UDPC1Ev+0x38>)
   d5096:	f103 0208 	add.w	r2, r3, #8
   d509a:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d509c:	2500      	movs	r5, #0
   d509e:	6103      	str	r3, [r0, #16]
   d50a0:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d50a4:	4604      	mov	r4, r0
   d50a6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d50a8:	6002      	str	r2, [r0, #0]
   d50aa:	6143      	str	r3, [r0, #20]
   d50ac:	301c      	adds	r0, #28
   d50ae:	f000 fb79 	bl	d57a4 <_ZN9IPAddressC1Ev>
   d50b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d50b6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d50b8:	8725      	strh	r5, [r4, #56]	; 0x38
   d50ba:	63e5      	str	r5, [r4, #60]	; 0x3c
   d50bc:	6423      	str	r3, [r4, #64]	; 0x40
   d50be:	6465      	str	r5, [r4, #68]	; 0x44
}
   d50c0:	4620      	mov	r0, r4
   d50c2:	bd38      	pop	{r3, r4, r5, pc}
   d50c4:	000d7ba0 	.word	0x000d7ba0

000d50c8 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d50c8:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d50ca:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d50ce:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d50d0:	b11b      	cbz	r3, d50da <_ZN3UDP13releaseBufferEv+0x12>
   d50d2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d50d4:	b108      	cbz	r0, d50da <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d50d6:	f7fe ffe2 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d50da:	2300      	movs	r3, #0
   d50dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d50de:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d50e2:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d50e4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d50e6:	8723      	strh	r3, [r4, #56]	; 0x38
   d50e8:	bd10      	pop	{r4, pc}

000d50ea <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d50ea:	b570      	push	{r4, r5, r6, lr}
   d50ec:	4604      	mov	r4, r0
   d50ee:	4616      	mov	r6, r2
   d50f0:	460d      	mov	r5, r1
    releaseBuffer();
   d50f2:	f7ff ffe9 	bl	d50c8 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d50f6:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d50f8:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d50fa:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d50fc:	b93e      	cbnz	r6, d510e <_ZN3UDP9setBufferEjPh+0x24>
   d50fe:	b135      	cbz	r5, d510e <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5100:	4628      	mov	r0, r5
   d5102:	f7fe ffca 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5106:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5108:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d510a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d510e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5110:	b103      	cbz	r3, d5114 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5112:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5114:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5116:	3000      	adds	r0, #0
   d5118:	bf18      	it	ne
   d511a:	2001      	movne	r0, #1
   d511c:	bd70      	pop	{r4, r5, r6, pc}

000d511e <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d511e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5120:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5122:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5124:	4605      	mov	r5, r0
   d5126:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5128:	b91a      	cbnz	r2, d5132 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d512a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d512c:	b109      	cbz	r1, d5132 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d512e:	f7ff ffdc 	bl	d50ea <_ZN3UDP9setBufferEjPh>
   d5132:	3404      	adds	r4, #4
   d5134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5136:	f105 0620 	add.w	r6, r5, #32
   d513a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d513c:	6823      	ldr	r3, [r4, #0]
   d513e:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5140:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d5142:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5144:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5146:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d5148:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d514a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d514c <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d514c:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d514e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d5150:	4604      	mov	r4, r0
   d5152:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d5154:	b91a      	cbnz	r2, d515e <_ZN3UDP11parsePacketEm+0x12>
   d5156:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5158:	b109      	cbz	r1, d515e <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d515a:	f7ff ffc6 	bl	d50ea <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d515e:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5160:	2200      	movs	r2, #0
   d5162:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5164:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d5166:	b149      	cbz	r1, d517c <_ZN3UDP11parsePacketEm+0x30>
   d5168:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d516a:	b13a      	cbz	r2, d517c <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d516c:	6823      	ldr	r3, [r4, #0]
   d516e:	4620      	mov	r0, r4
   d5170:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d5172:	4633      	mov	r3, r6
   d5174:	47a8      	blx	r5
        if (result > 0) {
   d5176:	2800      	cmp	r0, #0
            _total = result;
   d5178:	bfc8      	it	gt
   d517a:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d517c:	6823      	ldr	r3, [r4, #0]
   d517e:	4620      	mov	r0, r4
   d5180:	691b      	ldr	r3, [r3, #16]
}
   d5182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d5186:	4718      	bx	r3

000d5188 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5188:	b510      	push	{r4, lr}
   d518a:	4b07      	ldr	r3, [pc, #28]	; (d51a8 <_ZN3UDPD1Ev+0x20>)
   d518c:	f103 0208 	add.w	r2, r3, #8
   d5190:	336c      	adds	r3, #108	; 0x6c
   d5192:	4604      	mov	r4, r0
   d5194:	6002      	str	r2, [r0, #0]
   d5196:	6103      	str	r3, [r0, #16]
   d5198:	f7ff fd6d 	bl	d4c76 <_ZN3UDP4stopEv>
   d519c:	4620      	mov	r0, r4
   d519e:	f7ff ff93 	bl	d50c8 <_ZN3UDP13releaseBufferEv>
   d51a2:	4620      	mov	r0, r4
   d51a4:	bd10      	pop	{r4, pc}
   d51a6:	bf00      	nop
   d51a8:	000d7ba0 	.word	0x000d7ba0

000d51ac <_ZN3UDPD0Ev>:
   d51ac:	b510      	push	{r4, lr}
   d51ae:	4604      	mov	r4, r0
   d51b0:	f7ff ffea 	bl	d5188 <_ZN3UDPD1Ev>
   d51b4:	4620      	mov	r0, r4
   d51b6:	f7fe ff72 	bl	d409e <_ZdlPv>
   d51ba:	4620      	mov	r0, r4
   d51bc:	bd10      	pop	{r4, pc}

000d51be <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d51be:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d51c0:	6940      	ldr	r0, [r0, #20]
   d51c2:	2800      	cmp	r0, #0
   d51c4:	db04      	blt.n	d51d0 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d51c6:	2301      	movs	r3, #1
   d51c8:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d51cc:	f7ff bef9 	b.w	d4fc2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d51d0:	f04f 30ff 	mov.w	r0, #4294967295
   d51d4:	4770      	bx	lr

000d51d6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d51d6:	b510      	push	{r4, lr}
   d51d8:	4604      	mov	r4, r0
{
	free(buffer);
   d51da:	6800      	ldr	r0, [r0, #0]
   d51dc:	f7ff fc02 	bl	d49e4 <free>
}
   d51e0:	4620      	mov	r0, r4
   d51e2:	bd10      	pop	{r4, pc}

000d51e4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d51e4:	b510      	push	{r4, lr}
   d51e6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d51e8:	6800      	ldr	r0, [r0, #0]
   d51ea:	b108      	cbz	r0, d51f0 <_ZN6String10invalidateEv+0xc>
   d51ec:	f7ff fbfa 	bl	d49e4 <free>
	buffer = NULL;
   d51f0:	2300      	movs	r3, #0
   d51f2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d51f4:	60a3      	str	r3, [r4, #8]
   d51f6:	6063      	str	r3, [r4, #4]
   d51f8:	bd10      	pop	{r4, pc}

000d51fa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d51fa:	b538      	push	{r3, r4, r5, lr}
   d51fc:	4604      	mov	r4, r0
   d51fe:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5200:	6800      	ldr	r0, [r0, #0]
   d5202:	3101      	adds	r1, #1
   d5204:	f7ff fbf6 	bl	d49f4 <realloc>
	if (newbuffer) {
   d5208:	b110      	cbz	r0, d5210 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d520a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d520e:	2001      	movs	r0, #1
	}
	return 0;
}
   d5210:	bd38      	pop	{r3, r4, r5, pc}

000d5212 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5212:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5214:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5216:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5218:	b113      	cbz	r3, d5220 <_ZN6String7reserveEj+0xe>
   d521a:	6843      	ldr	r3, [r0, #4]
   d521c:	428b      	cmp	r3, r1
   d521e:	d207      	bcs.n	d5230 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5220:	4620      	mov	r0, r4
   d5222:	f7ff ffea 	bl	d51fa <_ZN6String12changeBufferEj>
   d5226:	b120      	cbz	r0, d5232 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5228:	68a3      	ldr	r3, [r4, #8]
   d522a:	b90b      	cbnz	r3, d5230 <_ZN6String7reserveEj+0x1e>
   d522c:	6822      	ldr	r2, [r4, #0]
   d522e:	7013      	strb	r3, [r2, #0]
   d5230:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5232:	bd10      	pop	{r4, pc}

000d5234 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5234:	b570      	push	{r4, r5, r6, lr}
   d5236:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5238:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d523a:	4604      	mov	r4, r0
   d523c:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d523e:	f7ff ffe8 	bl	d5212 <_ZN6String7reserveEj>
   d5242:	b918      	cbnz	r0, d524c <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5244:	4620      	mov	r0, r4
   d5246:	f7ff ffcd 	bl	d51e4 <_ZN6String10invalidateEv>
		return *this;
   d524a:	e009      	b.n	d5260 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d524c:	462a      	mov	r2, r5
   d524e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5250:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5252:	6820      	ldr	r0, [r4, #0]
   d5254:	f001 fb04 	bl	d6860 <memcpy>
	buffer[len] = 0;
   d5258:	6822      	ldr	r2, [r4, #0]
   d525a:	68a3      	ldr	r3, [r4, #8]
   d525c:	2100      	movs	r1, #0
   d525e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5260:	4620      	mov	r0, r4
   d5262:	bd70      	pop	{r4, r5, r6, pc}

000d5264 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5264:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5266:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5268:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d526a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d526c:	6043      	str	r3, [r0, #4]
	len = 0;
   d526e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5270:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5272:	460d      	mov	r5, r1
   d5274:	b139      	cbz	r1, d5286 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5276:	4608      	mov	r0, r1
   d5278:	f002 f854 	bl	d7324 <strlen>
   d527c:	4629      	mov	r1, r5
   d527e:	4602      	mov	r2, r0
   d5280:	4620      	mov	r0, r4
   d5282:	f7ff ffd7 	bl	d5234 <_ZN6String4copyEPKcj>
}
   d5286:	4620      	mov	r0, r4
   d5288:	bd38      	pop	{r3, r4, r5, pc}

000d528a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d528a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d528c:	4606      	mov	r6, r0
   d528e:	460d      	mov	r5, r1
   d5290:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5292:	2400      	movs	r4, #0
  while (size--) {
   d5294:	42bd      	cmp	r5, r7
   d5296:	d00c      	beq.n	d52b2 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5298:	6833      	ldr	r3, [r6, #0]
   d529a:	f815 1b01 	ldrb.w	r1, [r5], #1
   d529e:	689b      	ldr	r3, [r3, #8]
   d52a0:	4630      	mov	r0, r6
   d52a2:	4798      	blx	r3
     if (chunk>=0)
   d52a4:	2800      	cmp	r0, #0
   d52a6:	db01      	blt.n	d52ac <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d52a8:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d52aa:	e7f3      	b.n	d5294 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d52ac:	2c00      	cmp	r4, #0
   d52ae:	bf08      	it	eq
   d52b0:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d52b2:	4620      	mov	r0, r4
   d52b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52b6 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d52b6:	b570      	push	{r4, r5, r6, lr}
   d52b8:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d52ba:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d52bc:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d52be:	b149      	cbz	r1, d52d4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d52c0:	f002 f830 	bl	d7324 <strlen>
   d52c4:	682b      	ldr	r3, [r5, #0]
   d52c6:	4602      	mov	r2, r0
   d52c8:	4621      	mov	r1, r4
   d52ca:	4628      	mov	r0, r5
   d52cc:	68db      	ldr	r3, [r3, #12]
    }
   d52ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d52d2:	4718      	bx	r3
    }
   d52d4:	bd70      	pop	{r4, r5, r6, pc}

000d52d6 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52d6:	6803      	ldr	r3, [r0, #0]
   d52d8:	689b      	ldr	r3, [r3, #8]
   d52da:	4718      	bx	r3

000d52dc <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52dc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d52de:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52e0:	4605      	mov	r5, r0
  size_t n = print('\r');
   d52e2:	f7ff fff8 	bl	d52d6 <_ZN5Print5printEc>
  n += print('\n');
   d52e6:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d52e8:	4604      	mov	r4, r0
  n += print('\n');
   d52ea:	4628      	mov	r0, r5
   d52ec:	f7ff fff3 	bl	d52d6 <_ZN5Print5printEc>
  return n;
}
   d52f0:	4420      	add	r0, r4
   d52f2:	bd38      	pop	{r3, r4, r5, pc}

000d52f4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d52f4:	b538      	push	{r3, r4, r5, lr}
   d52f6:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d52f8:	f7ff ffdd 	bl	d52b6 <_ZN5Print5writeEPKc>
   d52fc:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d52fe:	4628      	mov	r0, r5
   d5300:	f7ff ffec 	bl	d52dc <_ZN5Print7printlnEv>
  return n;
}
   d5304:	4420      	add	r0, r4
   d5306:	bd38      	pop	{r3, r4, r5, pc}

000d5308 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5308:	b530      	push	{r4, r5, lr}
   d530a:	b08b      	sub	sp, #44	; 0x2c
   d530c:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d530e:	2100      	movs	r1, #0
   d5310:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5314:	2a01      	cmp	r2, #1
   d5316:	bf98      	it	ls
   d5318:	220a      	movls	r2, #10
   d531a:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d531e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5322:	fb05 3312 	mls	r3, r5, r2, r3
   d5326:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d532a:	2b09      	cmp	r3, #9
   d532c:	bf94      	ite	ls
   d532e:	3330      	addls	r3, #48	; 0x30
   d5330:	3337      	addhi	r3, #55	; 0x37
   d5332:	b2db      	uxtb	r3, r3
   d5334:	4621      	mov	r1, r4
   d5336:	f804 3901 	strb.w	r3, [r4], #-1
   d533a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d533c:	2d00      	cmp	r5, #0
   d533e:	d1ee      	bne.n	d531e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5340:	f7ff ffb9 	bl	d52b6 <_ZN5Print5writeEPKc>
}
   d5344:	b00b      	add	sp, #44	; 0x2c
   d5346:	bd30      	pop	{r4, r5, pc}

000d5348 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5348:	b410      	push	{r4}
  if (base == 0) return write(n);
   d534a:	b92a      	cbnz	r2, d5358 <_ZN5Print5printEmi+0x10>
   d534c:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d534e:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5352:	689b      	ldr	r3, [r3, #8]
   d5354:	b2c9      	uxtb	r1, r1
   d5356:	4718      	bx	r3
  else return printNumber(n, base);
   d5358:	b2d2      	uxtb	r2, r2
}
   d535a:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d535e:	f7ff bfd3 	b.w	d5308 <_ZN5Print11printNumberEmh>

000d5362 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5362:	f7ff bff1 	b.w	d5348 <_ZN5Print5printEmi>

000d5366 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5366:	b40c      	push	{r2, r3}
   d5368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d536c:	b087      	sub	sp, #28
   d536e:	af00      	add	r7, sp, #0
   d5370:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5374:	4605      	mov	r5, r0
   d5376:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d537a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d537c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d537e:	4623      	mov	r3, r4
   d5380:	464a      	mov	r2, r9
   d5382:	2114      	movs	r1, #20
   d5384:	1d38      	adds	r0, r7, #4
   d5386:	f7ff fb65 	bl	d4a54 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d538a:	2813      	cmp	r0, #19
   d538c:	d805      	bhi.n	d539a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d538e:	1d39      	adds	r1, r7, #4
   d5390:	4628      	mov	r0, r5
   d5392:	f7ff ff90 	bl	d52b6 <_ZN5Print5writeEPKc>
   d5396:	4604      	mov	r4, r0
   d5398:	e013      	b.n	d53c2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d539a:	f100 0308 	add.w	r3, r0, #8
   d539e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d53a2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d53a4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d53a8:	1c41      	adds	r1, r0, #1
   d53aa:	4623      	mov	r3, r4
   d53ac:	464a      	mov	r2, r9
   d53ae:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d53b0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d53b2:	f7ff fb4f 	bl	d4a54 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53b6:	4669      	mov	r1, sp
   d53b8:	4628      	mov	r0, r5
   d53ba:	f7ff ff7c 	bl	d52b6 <_ZN5Print5writeEPKc>
   d53be:	4604      	mov	r4, r0
   d53c0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d53c2:	b11e      	cbz	r6, d53cc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d53c4:	4628      	mov	r0, r5
   d53c6:	f7ff ff89 	bl	d52dc <_ZN5Print7printlnEv>
   d53ca:	4404      	add	r4, r0
    return n;
}
   d53cc:	4620      	mov	r0, r4
   d53ce:	371c      	adds	r7, #28
   d53d0:	46bd      	mov	sp, r7
   d53d2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53d6:	b002      	add	sp, #8
   d53d8:	4770      	bx	lr

000d53da <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d53da:	6800      	ldr	r0, [r0, #0]
   d53dc:	f7ff b926 	b.w	d462c <os_mutex_recursive_lock>

000d53e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d53e0:	4b01      	ldr	r3, [pc, #4]	; (d53e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d53e2:	4a02      	ldr	r2, [pc, #8]	; (d53ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d53e4:	601a      	str	r2, [r3, #0]
   d53e6:	4770      	bx	lr
   d53e8:	2003e2b4 	.word	0x2003e2b4
   d53ec:	000d7cc5 	.word	0x000d7cc5

000d53f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d53f0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d53f2:	2000      	movs	r0, #0
   d53f4:	f7ff fade 	bl	d49b4 <spark_sync_time_pending>
   d53f8:	b128      	cbz	r0, d5406 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53fa:	f7ff fac3 	bl	d4984 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d53fe:	f080 0001 	eor.w	r0, r0, #1
   d5402:	b2c0      	uxtb	r0, r0
   d5404:	bd08      	pop	{r3, pc}
   d5406:	2001      	movs	r0, #1
    }
   d5408:	bd08      	pop	{r3, pc}
	...

000d540c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d540c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5410:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5418:	d40f      	bmi.n	d543a <_ZN9TimeClass4zoneEf+0x2e>
   d541a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d541e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5426:	dc08      	bgt.n	d543a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d5428:	eddf 7a04 	vldr	s15, [pc, #16]	; d543c <_ZN9TimeClass4zoneEf+0x30>
   d542c:	4b04      	ldr	r3, [pc, #16]	; (d5440 <_ZN9TimeClass4zoneEf+0x34>)
   d542e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d5432:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d5436:	ed83 0a00 	vstr	s0, [r3]
   d543a:	4770      	bx	lr
   d543c:	45610000 	.word	0x45610000
   d5440:	2003e2c4 	.word	0x2003e2c4

000d5444 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5444:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d5446:	4b0e      	ldr	r3, [pc, #56]	; (d5480 <_ZN9TimeClass7timeStrEl+0x3c>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	4419      	add	r1, r3
   d544c:	4b0d      	ldr	r3, [pc, #52]	; (d5484 <_ZN9TimeClass7timeStrEl+0x40>)
   d544e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d5450:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d5452:	a802      	add	r0, sp, #8
   d5454:	4419      	add	r1, r3
   d5456:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d545a:	f001 f909 	bl	d6670 <localtime>
        char* ascstr = asctime(calendar_time);
   d545e:	f001 f8bd 	bl	d65dc <asctime>
   d5462:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d5464:	f001 ff5e 	bl	d7324 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d5468:	4428      	add	r0, r5
   d546a:	2300      	movs	r3, #0
   d546c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d5470:	4629      	mov	r1, r5
   d5472:	4620      	mov	r0, r4
   d5474:	f7ff fef6 	bl	d5264 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5478:	4620      	mov	r0, r4
   d547a:	b003      	add	sp, #12
   d547c:	bd30      	pop	{r4, r5, pc}
   d547e:	bf00      	nop
   d5480:	2003e2c4 	.word	0x2003e2c4
   d5484:	2003e2c0 	.word	0x2003e2c0

000d5488 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d5488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d548c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d548e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d5490:	4607      	mov	r7, r0
   d5492:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d5494:	4620      	mov	r0, r4
   d5496:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d5498:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d549a:	f001 fa27 	bl	d68ec <strcpy>
    size_t len = strlen(format_str);
   d549e:	4620      	mov	r0, r4
   d54a0:	f001 ff40 	bl	d7324 <strlen>
   d54a4:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d54a6:	b925      	cbnz	r5, d54b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d54a8:	4924      	ldr	r1, [pc, #144]	; (d553c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d54aa:	a803      	add	r0, sp, #12
   d54ac:	f001 fa1e 	bl	d68ec <strcpy>
   d54b0:	e013      	b.n	d54da <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d54b2:	213c      	movs	r1, #60	; 0x3c
   d54b4:	fb95 f2f1 	sdiv	r2, r5, r1
   d54b8:	2a00      	cmp	r2, #0
   d54ba:	bfb8      	it	lt
   d54bc:	4252      	neglt	r2, r2
   d54be:	fb92 f3f1 	sdiv	r3, r2, r1
   d54c2:	fb01 2213 	mls	r2, r1, r3, r2
   d54c6:	9200      	str	r2, [sp, #0]
   d54c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d54cc:	4a1c      	ldr	r2, [pc, #112]	; (d5540 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d54ce:	fb95 f3f3 	sdiv	r3, r5, r3
   d54d2:	2110      	movs	r1, #16
   d54d4:	a803      	add	r0, sp, #12
   d54d6:	f7ff faad 	bl	d4a34 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d54da:	4625      	mov	r5, r4
   d54dc:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d54de:	f108 3aff 	add.w	sl, r8, #4294967295
   d54e2:	45b2      	cmp	sl, r6
   d54e4:	d91b      	bls.n	d551e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d54e6:	782b      	ldrb	r3, [r5, #0]
   d54e8:	2b25      	cmp	r3, #37	; 0x25
   d54ea:	d116      	bne.n	d551a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d54ec:	786b      	ldrb	r3, [r5, #1]
   d54ee:	2b7a      	cmp	r3, #122	; 0x7a
   d54f0:	d113      	bne.n	d551a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d54f2:	a803      	add	r0, sp, #12
   d54f4:	f001 ff16 	bl	d7324 <strlen>
   d54f8:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d54fa:	4430      	add	r0, r6
   d54fc:	ebc6 020a 	rsb	r2, r6, sl
   d5500:	1ca9      	adds	r1, r5, #2
   d5502:	4420      	add	r0, r4
   d5504:	f001 f9ac 	bl	d6860 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d5508:	4642      	mov	r2, r8
   d550a:	a903      	add	r1, sp, #12
   d550c:	4628      	mov	r0, r5
   d550e:	f001 f9a7 	bl	d6860 <memcpy>
            len = strlen(format_str);
   d5512:	4620      	mov	r0, r4
   d5514:	f001 ff06 	bl	d7324 <strlen>
   d5518:	4680      	mov	r8, r0
   d551a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d551c:	e7de      	b.n	d54dc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d551e:	464b      	mov	r3, r9
   d5520:	4622      	mov	r2, r4
   d5522:	2132      	movs	r1, #50	; 0x32
   d5524:	a807      	add	r0, sp, #28
   d5526:	f001 fa49 	bl	d69bc <strftime>
    return String(buf);
   d552a:	a907      	add	r1, sp, #28
   d552c:	4638      	mov	r0, r7
   d552e:	f7ff fe99 	bl	d5264 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5532:	4638      	mov	r0, r7
   d5534:	b024      	add	sp, #144	; 0x90
   d5536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d553a:	bf00      	nop
   d553c:	000d82f5 	.word	0x000d82f5
   d5540:	000d7cee 	.word	0x000d7cee

000d5544 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d5544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5546:	4605      	mov	r5, r0
   d5548:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d554a:	461c      	mov	r4, r3
   d554c:	b913      	cbnz	r3, d5554 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d554e:	4b12      	ldr	r3, [pc, #72]	; (d5598 <_ZN9TimeClass6formatElPKc+0x54>)
   d5550:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d5552:	b12c      	cbz	r4, d5560 <_ZN9TimeClass6formatElPKc+0x1c>
   d5554:	4b11      	ldr	r3, [pc, #68]	; (d559c <_ZN9TimeClass6formatElPKc+0x58>)
   d5556:	4620      	mov	r0, r4
   d5558:	6819      	ldr	r1, [r3, #0]
   d555a:	f001 f9bd 	bl	d68d8 <strcmp>
   d555e:	b920      	cbnz	r0, d556a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d5560:	9901      	ldr	r1, [sp, #4]
   d5562:	4628      	mov	r0, r5
   d5564:	f7ff ff6e 	bl	d5444 <_ZN9TimeClass7timeStrEl>
   d5568:	e013      	b.n	d5592 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d556a:	4f0d      	ldr	r7, [pc, #52]	; (d55a0 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d556c:	9a01      	ldr	r2, [sp, #4]
   d556e:	683b      	ldr	r3, [r7, #0]
   d5570:	4e0c      	ldr	r6, [pc, #48]	; (d55a4 <_ZN9TimeClass6formatElPKc+0x60>)
   d5572:	441a      	add	r2, r3
   d5574:	6833      	ldr	r3, [r6, #0]
   d5576:	a802      	add	r0, sp, #8
   d5578:	4413      	add	r3, r2
   d557a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d557e:	f001 f877 	bl	d6670 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d5582:	683a      	ldr	r2, [r7, #0]
   d5584:	6833      	ldr	r3, [r6, #0]
   d5586:	4601      	mov	r1, r0
   d5588:	4413      	add	r3, r2
   d558a:	4628      	mov	r0, r5
   d558c:	4622      	mov	r2, r4
   d558e:	f7ff ff7b 	bl	d5488 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d5592:	4628      	mov	r0, r5
   d5594:	b003      	add	sp, #12
   d5596:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5598:	2003e2bc 	.word	0x2003e2bc
   d559c:	2003e1c0 	.word	0x2003e1c0
   d55a0:	2003e2c4 	.word	0x2003e2c4
   d55a4:	2003e2c0 	.word	0x2003e2c0

000d55a8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d55a8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d55aa:	2000      	movs	r0, #0
   d55ac:	f7ff f80e 	bl	d45cc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d55b0:	4604      	mov	r4, r0
   d55b2:	b968      	cbnz	r0, d55d0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d55b4:	f7ff f95a 	bl	d486c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d55b8:	2801      	cmp	r0, #1
   d55ba:	d10b      	bne.n	d55d4 <_ZN9TimeClass7isValidEv+0x2c>
   d55bc:	4620      	mov	r0, r4
   d55be:	f7ff f96d 	bl	d489c <system_thread_get_state>
   d55c2:	b938      	cbnz	r0, d55d4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d55c4:	f7ff ff14 	bl	d53f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d55c8:	b930      	cbnz	r0, d55d8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d55ca:	f7ff f9d3 	bl	d4974 <spark_process>
   d55ce:	e7f9      	b.n	d55c4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d55d0:	2001      	movs	r0, #1
   d55d2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d55d4:	2000      	movs	r0, #0
   d55d6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d55d8:	f7ff ff0a 	bl	d53f0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d55dc:	2000      	movs	r0, #0
   d55de:	f7fe fff5 	bl	d45cc <HAL_RTC_Time_Is_Valid>
   d55e2:	3000      	adds	r0, #0
   d55e4:	bf18      	it	ne
   d55e6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d55e8:	bd10      	pop	{r4, pc}

000d55ea <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d55ea:	b508      	push	{r3, lr}
    (void)isValid();
   d55ec:	f7ff ffdc 	bl	d55a8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d55f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d55f4:	f7fe bfe2 	b.w	d45bc <HAL_RTC_Get_UnixTime>

000d55f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d55f8:	4b02      	ldr	r3, [pc, #8]	; (d5604 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d55fa:	681a      	ldr	r2, [r3, #0]
   d55fc:	4b02      	ldr	r3, [pc, #8]	; (d5608 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d55fe:	601a      	str	r2, [r3, #0]
   d5600:	4770      	bx	lr
   d5602:	bf00      	nop
   d5604:	2003e1c0 	.word	0x2003e1c0
   d5608:	2003e2bc 	.word	0x2003e2bc

000d560c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d560c:	2100      	movs	r1, #0
   d560e:	f7ff b93d 	b.w	d488c <system_delay_ms>

000d5612 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5612:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5614:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5616:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5618:	b113      	cbz	r3, d5620 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d561a:	2203      	movs	r2, #3
   d561c:	4601      	mov	r1, r0
   d561e:	4798      	blx	r3
    }
   d5620:	4620      	mov	r0, r4
   d5622:	bd10      	pop	{r4, pc}

000d5624 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5624:	b510      	push	{r4, lr}
   d5626:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5628:	f7ff fff3 	bl	d5612 <_ZNSt14_Function_baseD1Ev>
   d562c:	4620      	mov	r0, r4
   d562e:	bd10      	pop	{r4, pc}

000d5630 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5630:	4803      	ldr	r0, [pc, #12]	; (d5640 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5632:	4a04      	ldr	r2, [pc, #16]	; (d5644 <_GLOBAL__sub_I_RGB+0x14>)
   d5634:	4904      	ldr	r1, [pc, #16]	; (d5648 <_GLOBAL__sub_I_RGB+0x18>)
   d5636:	2300      	movs	r3, #0
   d5638:	6083      	str	r3, [r0, #8]
   d563a:	f000 bcc9 	b.w	d5fd0 <__aeabi_atexit>
   d563e:	bf00      	nop
   d5640:	2003e2c8 	.word	0x2003e2c8
   d5644:	2003e278 	.word	0x2003e278
   d5648:	000d5625 	.word	0x000d5625

000d564c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d564c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d564e:	4b0f      	ldr	r3, [pc, #60]	; (d568c <serialEventRun+0x40>)
   d5650:	b133      	cbz	r3, d5660 <serialEventRun+0x14>
   d5652:	f000 f93f 	bl	d58d4 <_Z16_fetch_usbserialv>
   d5656:	6803      	ldr	r3, [r0, #0]
   d5658:	691b      	ldr	r3, [r3, #16]
   d565a:	4798      	blx	r3
   d565c:	2800      	cmp	r0, #0
   d565e:	dc0d      	bgt.n	d567c <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5660:	4b0b      	ldr	r3, [pc, #44]	; (d5690 <serialEventRun+0x44>)
   d5662:	b133      	cbz	r3, d5672 <serialEventRun+0x26>
   d5664:	f000 f9a4 	bl	d59b0 <_Z22__fetch_global_Serial1v>
   d5668:	6803      	ldr	r3, [r0, #0]
   d566a:	691b      	ldr	r3, [r3, #16]
   d566c:	4798      	blx	r3
   d566e:	2800      	cmp	r0, #0
   d5670:	dc07      	bgt.n	d5682 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d5672:	4b08      	ldr	r3, [pc, #32]	; (d5694 <serialEventRun+0x48>)
   d5674:	b143      	cbz	r3, d5688 <serialEventRun+0x3c>
   d5676:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d567a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d567c:	f3af 8000 	nop.w
   d5680:	e7ee      	b.n	d5660 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5682:	f3af 8000 	nop.w
   d5686:	e7f4      	b.n	d5672 <serialEventRun+0x26>
   d5688:	bd08      	pop	{r3, pc}
   d568a:	bf00      	nop
	...

000d5698 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5698:	b508      	push	{r3, lr}
	serialEventRun();
   d569a:	f7ff ffd7 	bl	d564c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d569e:	f7fe ff85 	bl	d45ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d56a2:	4b01      	ldr	r3, [pc, #4]	; (d56a8 <_post_loop+0x10>)
   d56a4:	6018      	str	r0, [r3, #0]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	2003e60c 	.word	0x2003e60c

000d56ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56ae:	2300      	movs	r3, #0
   d56b0:	9300      	str	r3, [sp, #0]
   d56b2:	461a      	mov	r2, r3
   d56b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56b8:	f7ff f902 	bl	d48c0 <system_ctrl_set_result>
}
   d56bc:	b003      	add	sp, #12
   d56be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d56c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d56c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d56c6:	8843      	ldrh	r3, [r0, #2]
   d56c8:	2b0a      	cmp	r3, #10
   d56ca:	d008      	beq.n	d56de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d56cc:	2b50      	cmp	r3, #80	; 0x50
   d56ce:	d109      	bne.n	d56e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d56d0:	4b09      	ldr	r3, [pc, #36]	; (d56f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d56d2:	681b      	ldr	r3, [r3, #0]
   d56d4:	b13b      	cbz	r3, d56e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d56d6:	b003      	add	sp, #12
   d56d8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d56dc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d56de:	f7ff ffe5 	bl	d56ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d56e2:	e006      	b.n	d56f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56e4:	2300      	movs	r3, #0
   d56e6:	9300      	str	r3, [sp, #0]
   d56e8:	461a      	mov	r2, r3
   d56ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56ee:	f7ff f8e7 	bl	d48c0 <system_ctrl_set_result>
        break;
    }
}
   d56f2:	b003      	add	sp, #12
   d56f4:	f85d fb04 	ldr.w	pc, [sp], #4
   d56f8:	2003e2d8 	.word	0x2003e2d8

000d56fc <module_user_init_hook>:

void module_user_init_hook()
{
   d56fc:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d56fe:	f7fe ff45 	bl	d458c <HAL_RNG_GetRandomNumber>
   d5702:	4604      	mov	r4, r0
    srand(seed);
   d5704:	f001 f8c0 	bl	d6888 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5708:	4b07      	ldr	r3, [pc, #28]	; (d5728 <module_user_init_hook+0x2c>)
   d570a:	b113      	cbz	r3, d5712 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d570c:	4620      	mov	r0, r4
   d570e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5712:	2100      	movs	r1, #0
   d5714:	4804      	ldr	r0, [pc, #16]	; (d5728 <module_user_init_hook+0x2c>)
   d5716:	f7ff f955 	bl	d49c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d571a:	2100      	movs	r1, #0
   d571c:	4803      	ldr	r0, [pc, #12]	; (d572c <module_user_init_hook+0x30>)
}
   d571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5722:	f7ff b8c3 	b.w	d48ac <system_ctrl_set_app_request_handler>
   d5726:	bf00      	nop
   d5728:	00000000 	.word	0x00000000
   d572c:	000d56c5 	.word	0x000d56c5

000d5730 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5730:	4770      	bx	lr

000d5732 <_ZN9IPAddressD0Ev>:
   d5732:	b510      	push	{r4, lr}
   d5734:	4604      	mov	r4, r0
   d5736:	f7fe fcb2 	bl	d409e <_ZdlPv>
   d573a:	4620      	mov	r0, r4
   d573c:	bd10      	pop	{r4, pc}

000d573e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d573e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5740:	7d03      	ldrb	r3, [r0, #20]
   d5742:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5744:	b08d      	sub	sp, #52	; 0x34
   d5746:	460e      	mov	r6, r1
   d5748:	f100 0704 	add.w	r7, r0, #4
   d574c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5750:	d002      	beq.n	d5758 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5752:	f100 0508 	add.w	r5, r0, #8
   d5756:	e018      	b.n	d578a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5758:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d575a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d575c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5760:	232f      	movs	r3, #47	; 0x2f
   d5762:	462a      	mov	r2, r5
   d5764:	200a      	movs	r0, #10
   d5766:	f7fe ff71 	bl	d464c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d576a:	4628      	mov	r0, r5
   d576c:	f001 fdda 	bl	d7324 <strlen>
   d5770:	6833      	ldr	r3, [r6, #0]
   d5772:	4602      	mov	r2, r0
   d5774:	68db      	ldr	r3, [r3, #12]
   d5776:	4629      	mov	r1, r5
   d5778:	4630      	mov	r0, r6
   d577a:	4798      	blx	r3
   d577c:	e00f      	b.n	d579e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d577e:	b124      	cbz	r4, d578a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5780:	212e      	movs	r1, #46	; 0x2e
   d5782:	4630      	mov	r0, r6
   d5784:	f7ff fda7 	bl	d52d6 <_ZN5Print5printEc>
   d5788:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d578a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d578e:	220a      	movs	r2, #10
   d5790:	4630      	mov	r0, r6
   d5792:	f7ff fde6 	bl	d5362 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5796:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5798:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d579a:	d1f0      	bne.n	d577e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d579c:	4620      	mov	r0, r4
    }
    return n;
}
   d579e:	b00d      	add	sp, #52	; 0x34
   d57a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d57a4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d57a4:	b510      	push	{r4, lr}
   d57a6:	4b05      	ldr	r3, [pc, #20]	; (d57bc <_ZN9IPAddressC1Ev+0x18>)
   d57a8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d57aa:	2211      	movs	r2, #17
   d57ac:	f840 3b04 	str.w	r3, [r0], #4
   d57b0:	2100      	movs	r1, #0
   d57b2:	f001 f860 	bl	d6876 <memset>
{
    clear();
}
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd10      	pop	{r4, pc}
   d57ba:	bf00      	nop
   d57bc:	000d7d20 	.word	0x000d7d20

000d57c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d57c0:	4603      	mov	r3, r0
   d57c2:	4a07      	ldr	r2, [pc, #28]	; (d57e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d57c4:	b510      	push	{r4, lr}
   d57c6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d57ca:	f101 0210 	add.w	r2, r1, #16
   d57ce:	f851 4b04 	ldr.w	r4, [r1], #4
   d57d2:	f843 4b04 	str.w	r4, [r3], #4
   d57d6:	4291      	cmp	r1, r2
   d57d8:	d1f9      	bne.n	d57ce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d57da:	780a      	ldrb	r2, [r1, #0]
   d57dc:	701a      	strb	r2, [r3, #0]
}
   d57de:	bd10      	pop	{r4, pc}
   d57e0:	000d7d20 	.word	0x000d7d20

000d57e4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d57e4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d57e6:	2b04      	cmp	r3, #4
   d57e8:	d101      	bne.n	d57ee <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d57ea:	6840      	ldr	r0, [r0, #4]
   d57ec:	e008      	b.n	d5800 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d57ee:	2b06      	cmp	r3, #6
   d57f0:	d10a      	bne.n	d5808 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d57f2:	6843      	ldr	r3, [r0, #4]
   d57f4:	b153      	cbz	r3, d580c <_ZNK9IPAddresscvbEv+0x28>
   d57f6:	6883      	ldr	r3, [r0, #8]
   d57f8:	b143      	cbz	r3, d580c <_ZNK9IPAddresscvbEv+0x28>
   d57fa:	68c3      	ldr	r3, [r0, #12]
   d57fc:	b133      	cbz	r3, d580c <_ZNK9IPAddresscvbEv+0x28>
   d57fe:	6900      	ldr	r0, [r0, #16]
   d5800:	3000      	adds	r0, #0
   d5802:	bf18      	it	ne
   d5804:	2001      	movne	r0, #1
   d5806:	4770      	bx	lr
   d5808:	2000      	movs	r0, #0
   d580a:	4770      	bx	lr
   d580c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d580e:	4770      	bx	lr

000d5810 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5810:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5812:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5816:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d581a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d581e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5822:	2304      	movs	r3, #4
   d5824:	6041      	str	r1, [r0, #4]
   d5826:	7503      	strb	r3, [r0, #20]
   d5828:	bd10      	pop	{r4, pc}

000d582a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d582a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d582c:	780d      	ldrb	r5, [r1, #0]
   d582e:	788b      	ldrb	r3, [r1, #2]
   d5830:	784a      	ldrb	r2, [r1, #1]
   d5832:	78c9      	ldrb	r1, [r1, #3]
   d5834:	9100      	str	r1, [sp, #0]
   d5836:	4629      	mov	r1, r5
   d5838:	f7ff ffea 	bl	d5810 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d583c:	b003      	add	sp, #12
   d583e:	bd30      	pop	{r4, r5, pc}

000d5840 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5840:	7441      	strb	r1, [r0, #17]
   d5842:	4770      	bx	lr

000d5844 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5844:	4770      	bx	lr

000d5846 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5846:	2100      	movs	r1, #0
   d5848:	7c00      	ldrb	r0, [r0, #16]
   d584a:	f7fe bfef 	b.w	d482c <HAL_USB_USART_Receive_Data>

000d584e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d584e:	2101      	movs	r1, #1
   d5850:	7c00      	ldrb	r0, [r0, #16]
   d5852:	f7fe bfeb 	b.w	d482c <HAL_USB_USART_Receive_Data>

000d5856 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5856:	7c00      	ldrb	r0, [r0, #16]
   d5858:	f7fe bfe0 	b.w	d481c <HAL_USB_USART_Available_Data_For_Write>

000d585c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d585c:	7c00      	ldrb	r0, [r0, #16]
   d585e:	f7fe bfd5 	b.w	d480c <HAL_USB_USART_Available_Data>

000d5862 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5862:	b538      	push	{r3, r4, r5, lr}
   d5864:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5866:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5868:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d586a:	f7fe ffd7 	bl	d481c <HAL_USB_USART_Available_Data_For_Write>
   d586e:	2800      	cmp	r0, #0
   d5870:	dc01      	bgt.n	d5876 <_ZN9USBSerial5writeEh+0x14>
   d5872:	7c60      	ldrb	r0, [r4, #17]
   d5874:	b120      	cbz	r0, d5880 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5876:	4629      	mov	r1, r5
   d5878:	7c20      	ldrb	r0, [r4, #16]
   d587a:	f7fe ffdf 	bl	d483c <HAL_USB_USART_Send_Data>
    return 1;
   d587e:	2001      	movs	r0, #1
  }
  return 0;
}
   d5880:	bd38      	pop	{r3, r4, r5, pc}

000d5882 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5882:	7c00      	ldrb	r0, [r0, #16]
   d5884:	f7fe bfe2 	b.w	d484c <HAL_USB_USART_Flush_Data>

000d5888 <_ZN9USBSerialD0Ev>:
   d5888:	b510      	push	{r4, lr}
   d588a:	4604      	mov	r4, r0
   d588c:	f7fe fc07 	bl	d409e <_ZdlPv>
   d5890:	4620      	mov	r0, r4
   d5892:	bd10      	pop	{r4, pc}

000d5894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5894:	b510      	push	{r4, lr}
   d5896:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5898:	2300      	movs	r3, #0
   d589a:	6063      	str	r3, [r4, #4]
   d589c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58a0:	60a3      	str	r3, [r4, #8]
   d58a2:	4b05      	ldr	r3, [pc, #20]	; (d58b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d58a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d58a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d58a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d58aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d58ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d58ae:	4611      	mov	r1, r2
   d58b0:	f7fe ff9c 	bl	d47ec <HAL_USB_USART_Init>
}
   d58b4:	4620      	mov	r0, r4
   d58b6:	bd10      	pop	{r4, pc}
   d58b8:	000d7d34 	.word	0x000d7d34

000d58bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d58bc:	2200      	movs	r2, #0
   d58be:	7c00      	ldrb	r0, [r0, #16]
   d58c0:	f7fe bf9c 	b.w	d47fc <HAL_USB_USART_Begin>

000d58c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d58c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d58c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d58c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d58ca:	2100      	movs	r1, #0
   d58cc:	f000 ffd3 	bl	d6876 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d58d0:	4620      	mov	r0, r4
   d58d2:	bd10      	pop	{r4, pc}

000d58d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d58d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58d6:	4d0e      	ldr	r5, [pc, #56]	; (d5910 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d58d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d58da:	a801      	add	r0, sp, #4
   d58dc:	f7ff fff2 	bl	d58c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58e0:	6829      	ldr	r1, [r5, #0]
   d58e2:	f011 0401 	ands.w	r4, r1, #1
   d58e6:	d110      	bne.n	d590a <_Z16_fetch_usbserialv+0x36>
   d58e8:	4628      	mov	r0, r5
   d58ea:	f7fe fbdc 	bl	d40a6 <__cxa_guard_acquire>
   d58ee:	b160      	cbz	r0, d590a <_Z16_fetch_usbserialv+0x36>
   d58f0:	aa01      	add	r2, sp, #4
   d58f2:	4621      	mov	r1, r4
   d58f4:	4807      	ldr	r0, [pc, #28]	; (d5914 <_Z16_fetch_usbserialv+0x40>)
   d58f6:	f7ff ffcd 	bl	d5894 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d58fa:	4628      	mov	r0, r5
   d58fc:	f7fe fbd8 	bl	d40b0 <__cxa_guard_release>
   d5900:	4a05      	ldr	r2, [pc, #20]	; (d5918 <_Z16_fetch_usbserialv+0x44>)
   d5902:	4906      	ldr	r1, [pc, #24]	; (d591c <_Z16_fetch_usbserialv+0x48>)
   d5904:	4803      	ldr	r0, [pc, #12]	; (d5914 <_Z16_fetch_usbserialv+0x40>)
   d5906:	f000 fb63 	bl	d5fd0 <__aeabi_atexit>
	return _usbserial;
}
   d590a:	4802      	ldr	r0, [pc, #8]	; (d5914 <_Z16_fetch_usbserialv+0x40>)
   d590c:	b007      	add	sp, #28
   d590e:	bd30      	pop	{r4, r5, pc}
   d5910:	2003e2dc 	.word	0x2003e2dc
   d5914:	2003e2e0 	.word	0x2003e2e0
   d5918:	2003e278 	.word	0x2003e278
   d591c:	000d5845 	.word	0x000d5845

000d5920 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5920:	f7fe bdf4 	b.w	d450c <HAL_Interrupts_Disable_All>

000d5924 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5924:	f7fe bdea 	b.w	d44fc <HAL_Interrupts_Enable_All>

000d5928 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5928:	4770      	bx	lr

000d592a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d592a:	7441      	strb	r1, [r0, #17]
   d592c:	4770      	bx	lr

000d592e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d592e:	7c00      	ldrb	r0, [r0, #16]
   d5930:	f7fe beec 	b.w	d470c <HAL_USART_Available_Data_For_Write>

000d5934 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5934:	7c00      	ldrb	r0, [r0, #16]
   d5936:	f7fe bec1 	b.w	d46bc <HAL_USART_Available_Data>

000d593a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d593a:	7c00      	ldrb	r0, [r0, #16]
   d593c:	f7fe bece 	b.w	d46dc <HAL_USART_Peek_Data>

000d5940 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5940:	7c00      	ldrb	r0, [r0, #16]
   d5942:	f7fe bec3 	b.w	d46cc <HAL_USART_Read_Data>

000d5946 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5946:	7c00      	ldrb	r0, [r0, #16]
   d5948:	f7fe bed0 	b.w	d46ec <HAL_USART_Flush_Data>

000d594c <_ZN11USARTSerialD0Ev>:
   d594c:	b510      	push	{r4, lr}
   d594e:	4604      	mov	r4, r0
   d5950:	f7fe fba5 	bl	d409e <_ZdlPv>
   d5954:	4620      	mov	r0, r4
   d5956:	bd10      	pop	{r4, pc}

000d5958 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5958:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d595a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d595c:	4604      	mov	r4, r0
   d595e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5960:	b925      	cbnz	r5, d596c <_ZN11USARTSerial5writeEh+0x14>
   d5962:	7c00      	ldrb	r0, [r0, #16]
   d5964:	f7fe fed2 	bl	d470c <HAL_USART_Available_Data_For_Write>
   d5968:	2800      	cmp	r0, #0
   d596a:	dd05      	ble.n	d5978 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d596c:	4631      	mov	r1, r6
   d596e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5974:	f7fe be9a 	b.w	d46ac <HAL_USART_Write_Data>
  }
  return 0;
}
   d5978:	4628      	mov	r0, r5
   d597a:	bd70      	pop	{r4, r5, r6, pc}

000d597c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d597c:	b510      	push	{r4, lr}
   d597e:	4604      	mov	r4, r0
   d5980:	4608      	mov	r0, r1
   d5982:	4611      	mov	r1, r2
   d5984:	2200      	movs	r2, #0
   d5986:	6062      	str	r2, [r4, #4]
   d5988:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d598c:	60a2      	str	r2, [r4, #8]
   d598e:	4a05      	ldr	r2, [pc, #20]	; (d59a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5990:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5992:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5994:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5996:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5998:	461a      	mov	r2, r3
   d599a:	f7fe fe7f 	bl	d469c <HAL_USART_Init>
}
   d599e:	4620      	mov	r0, r4
   d59a0:	bd10      	pop	{r4, pc}
   d59a2:	bf00      	nop
   d59a4:	000d7d64 	.word	0x000d7d64

000d59a8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d59a8:	7c00      	ldrb	r0, [r0, #16]
   d59aa:	f7fe bea7 	b.w	d46fc <HAL_USART_Is_Enabled>
	...

000d59b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d59b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d59b2:	4d0c      	ldr	r5, [pc, #48]	; (d59e4 <_Z22__fetch_global_Serial1v+0x34>)
   d59b4:	6829      	ldr	r1, [r5, #0]
   d59b6:	f011 0401 	ands.w	r4, r1, #1
   d59ba:	d111      	bne.n	d59e0 <_Z22__fetch_global_Serial1v+0x30>
   d59bc:	4628      	mov	r0, r5
   d59be:	f7fe fb72 	bl	d40a6 <__cxa_guard_acquire>
   d59c2:	b168      	cbz	r0, d59e0 <_Z22__fetch_global_Serial1v+0x30>
   d59c4:	4a08      	ldr	r2, [pc, #32]	; (d59e8 <_Z22__fetch_global_Serial1v+0x38>)
   d59c6:	4b09      	ldr	r3, [pc, #36]	; (d59ec <_Z22__fetch_global_Serial1v+0x3c>)
   d59c8:	4809      	ldr	r0, [pc, #36]	; (d59f0 <_Z22__fetch_global_Serial1v+0x40>)
   d59ca:	4621      	mov	r1, r4
   d59cc:	f7ff ffd6 	bl	d597c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d59d0:	4628      	mov	r0, r5
   d59d2:	f7fe fb6d 	bl	d40b0 <__cxa_guard_release>
   d59d6:	4a07      	ldr	r2, [pc, #28]	; (d59f4 <_Z22__fetch_global_Serial1v+0x44>)
   d59d8:	4907      	ldr	r1, [pc, #28]	; (d59f8 <_Z22__fetch_global_Serial1v+0x48>)
   d59da:	4805      	ldr	r0, [pc, #20]	; (d59f0 <_Z22__fetch_global_Serial1v+0x40>)
   d59dc:	f000 faf8 	bl	d5fd0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d59e0:	4803      	ldr	r0, [pc, #12]	; (d59f0 <_Z22__fetch_global_Serial1v+0x40>)
   d59e2:	bd38      	pop	{r3, r4, r5, pc}
   d59e4:	2003e38c 	.word	0x2003e38c
   d59e8:	2003e390 	.word	0x2003e390
   d59ec:	2003e308 	.word	0x2003e308
   d59f0:	2003e2f4 	.word	0x2003e2f4
   d59f4:	2003e278 	.word	0x2003e278
   d59f8:	000d5929 	.word	0x000d5929

000d59fc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d59fc:	4770      	bx	lr

000d59fe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d59fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a00:	4606      	mov	r6, r0
   d5a02:	4615      	mov	r5, r2
   d5a04:	460c      	mov	r4, r1
   d5a06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a08:	42bc      	cmp	r4, r7
   d5a0a:	d006      	beq.n	d5a1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5a0c:	6833      	ldr	r3, [r6, #0]
   d5a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5a12:	689b      	ldr	r3, [r3, #8]
   d5a14:	4630      	mov	r0, r6
   d5a16:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5a18:	e7f6      	b.n	d5a08 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5a1a:	4628      	mov	r0, r5
   d5a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a1e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5a1e:	2200      	movs	r2, #0
   d5a20:	7c00      	ldrb	r0, [r0, #16]
   d5a22:	f7fe be7b 	b.w	d471c <HAL_I2C_Write_Data>

000d5a26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5a26:	2100      	movs	r1, #0
   d5a28:	7c00      	ldrb	r0, [r0, #16]
   d5a2a:	f7fe be7f 	b.w	d472c <HAL_I2C_Available_Data>

000d5a2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5a2e:	2100      	movs	r1, #0
   d5a30:	7c00      	ldrb	r0, [r0, #16]
   d5a32:	f7fe be83 	b.w	d473c <HAL_I2C_Read_Data>

000d5a36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5a36:	2100      	movs	r1, #0
   d5a38:	7c00      	ldrb	r0, [r0, #16]
   d5a3a:	f7fe be87 	b.w	d474c <HAL_I2C_Peek_Data>

000d5a3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5a3e:	2100      	movs	r1, #0
   d5a40:	7c00      	ldrb	r0, [r0, #16]
   d5a42:	f7fe be8b 	b.w	d475c <HAL_I2C_Flush_Data>

000d5a46 <_ZN7TwoWireD0Ev>:
   d5a46:	b510      	push	{r4, lr}
   d5a48:	4604      	mov	r4, r0
   d5a4a:	f7fe fb28 	bl	d409e <_ZdlPv>
   d5a4e:	4620      	mov	r0, r4
   d5a50:	bd10      	pop	{r4, pc}
	...

000d5a54 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5a54:	b510      	push	{r4, lr}
   d5a56:	4604      	mov	r4, r0
   d5a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a5c:	4608      	mov	r0, r1
   d5a5e:	60a3      	str	r3, [r4, #8]
   d5a60:	2100      	movs	r1, #0
   d5a62:	4b04      	ldr	r3, [pc, #16]	; (d5a74 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5a64:	7420      	strb	r0, [r4, #16]
   d5a66:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5a68:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5a6a:	f7fe fe87 	bl	d477c <HAL_I2C_Init>

}
   d5a6e:	4620      	mov	r0, r4
   d5a70:	bd10      	pop	{r4, pc}
   d5a72:	bf00      	nop
   d5a74:	000d7d94 	.word	0x000d7d94

000d5a78 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5a78:	2100      	movs	r1, #0
   d5a7a:	7c00      	ldrb	r0, [r0, #16]
   d5a7c:	f7fe be76 	b.w	d476c <HAL_I2C_Is_Enabled>

000d5a80 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a80:	2200      	movs	r2, #0
   d5a82:	4611      	mov	r1, r2
   d5a84:	6840      	ldr	r0, [r0, #4]
   d5a86:	f7fe bf5d 	b.w	d4944 <network_listening>

000d5a8a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a8a:	2200      	movs	r2, #0
   d5a8c:	4611      	mov	r1, r2
   d5a8e:	6840      	ldr	r0, [r0, #4]
   d5a90:	f7fe bf68 	b.w	d4964 <network_get_listen_timeout>

000d5a94 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a94:	2200      	movs	r2, #0
   d5a96:	6840      	ldr	r0, [r0, #4]
   d5a98:	f7fe bf5c 	b.w	d4954 <network_set_listen_timeout>

000d5a9c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a9c:	2200      	movs	r2, #0
   d5a9e:	f081 0101 	eor.w	r1, r1, #1
   d5aa2:	6840      	ldr	r0, [r0, #4]
   d5aa4:	f7fe bf46 	b.w	d4934 <network_listen>

000d5aa8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5aa8:	2300      	movs	r3, #0
   d5aaa:	461a      	mov	r2, r3
   d5aac:	4619      	mov	r1, r3
   d5aae:	6840      	ldr	r0, [r0, #4]
   d5ab0:	f7fe bf38 	b.w	d4924 <network_off>

000d5ab4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5ab4:	2300      	movs	r3, #0
   d5ab6:	461a      	mov	r2, r3
   d5ab8:	4619      	mov	r1, r3
   d5aba:	6840      	ldr	r0, [r0, #4]
   d5abc:	f7fe bf2a 	b.w	d4914 <network_on>

000d5ac0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ac0:	2200      	movs	r2, #0
   d5ac2:	4611      	mov	r1, r2
   d5ac4:	6840      	ldr	r0, [r0, #4]
   d5ac6:	f7fe bf1d 	b.w	d4904 <network_ready>

000d5aca <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5aca:	2200      	movs	r2, #0
   d5acc:	4611      	mov	r1, r2
   d5ace:	6840      	ldr	r0, [r0, #4]
   d5ad0:	f7fe bf08 	b.w	d48e4 <network_connecting>

000d5ad4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ad4:	2200      	movs	r2, #0
   d5ad6:	2102      	movs	r1, #2
   d5ad8:	6840      	ldr	r0, [r0, #4]
   d5ada:	f7fe bf0b 	b.w	d48f4 <network_disconnect>

000d5ade <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ade:	2300      	movs	r3, #0
   d5ae0:	461a      	mov	r2, r3
   d5ae2:	6840      	ldr	r0, [r0, #4]
   d5ae4:	f7fe bef6 	b.w	d48d4 <network_connect>

000d5ae8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5ae8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5aea:	4605      	mov	r5, r0
   d5aec:	b178      	cbz	r0, d5b0e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5aee:	6804      	ldr	r4, [r0, #0]
   d5af0:	b144      	cbz	r4, d5b04 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d5af2:	68a3      	ldr	r3, [r4, #8]
   d5af4:	b11b      	cbz	r3, d5afe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5af6:	2203      	movs	r2, #3
   d5af8:	4621      	mov	r1, r4
   d5afa:	4620      	mov	r0, r4
   d5afc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5afe:	4620      	mov	r0, r4
   d5b00:	f7fe facd 	bl	d409e <_ZdlPv>
   d5b04:	4628      	mov	r0, r5
      }
   d5b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b0a:	f7fe bac8 	b.w	d409e <_ZdlPv>
   d5b0e:	bd38      	pop	{r3, r4, r5, pc}

000d5b10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5b10:	b110      	cbz	r0, d5b18 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5b12:	6803      	ldr	r3, [r0, #0]
   d5b14:	685b      	ldr	r3, [r3, #4]
   d5b16:	4718      	bx	r3
   d5b18:	4770      	bx	lr

000d5b1a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5b1a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b1c:	6803      	ldr	r3, [r0, #0]
   d5b1e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5b20:	b1bb      	cbz	r3, d5b52 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5b22:	6858      	ldr	r0, [r3, #4]
   d5b24:	f7fe fd5a 	bl	d45dc <os_thread_is_current>
   d5b28:	b978      	cbnz	r0, d5b4a <_ZN6ThreadD1Ev+0x30>
   d5b2a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5b2c:	7c5a      	ldrb	r2, [r3, #17]
   d5b2e:	b912      	cbnz	r2, d5b36 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5b30:	6858      	ldr	r0, [r3, #4]
   d5b32:	f7fe fd5b 	bl	d45ec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5b36:	6823      	ldr	r3, [r4, #0]
   d5b38:	6858      	ldr	r0, [r3, #4]
   d5b3a:	f7fe fd5f 	bl	d45fc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b3e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5b40:	2300      	movs	r3, #0
   d5b42:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5b44:	b128      	cbz	r0, d5b52 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5b46:	f7ff ffcf 	bl	d5ae8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b4a:	6820      	ldr	r0, [r4, #0]
   d5b4c:	b108      	cbz	r0, d5b52 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5b4e:	f7ff ffcb 	bl	d5ae8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5b52:	4620      	mov	r0, r4
   d5b54:	bd10      	pop	{r4, pc}
	...

000d5b58 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5b58:	b538      	push	{r3, r4, r5, lr}
   d5b5a:	4b0b      	ldr	r3, [pc, #44]	; (d5b88 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5b5c:	6003      	str	r3, [r0, #0]
   d5b5e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b60:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5b64:	b108      	cbz	r0, d5b6a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5b66:	f7fe fa9c 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b6a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5b6e:	b12d      	cbz	r5, d5b7c <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b70:	4628      	mov	r0, r5
   d5b72:	f7ff ffd2 	bl	d5b1a <_ZN6ThreadD1Ev>
   d5b76:	4628      	mov	r0, r5
   d5b78:	f7fe fa91 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b7c:	68a0      	ldr	r0, [r4, #8]
   d5b7e:	b108      	cbz	r0, d5b84 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5b80:	f7ff ffc6 	bl	d5b10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5b84:	4620      	mov	r0, r4
   d5b86:	bd38      	pop	{r3, r4, r5, pc}
   d5b88:	000d7dbc 	.word	0x000d7dbc

000d5b8c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5b8c:	b530      	push	{r4, r5, lr}
   d5b8e:	b08d      	sub	sp, #52	; 0x34
   d5b90:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5b92:	2211      	movs	r2, #17
   d5b94:	2100      	movs	r1, #0
   d5b96:	a801      	add	r0, sp, #4
   d5b98:	f000 fe6d 	bl	d6876 <memset>
    addr.v = 6;
   d5b9c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5b9e:	aa01      	add	r2, sp, #4
   d5ba0:	4909      	ldr	r1, [pc, #36]	; (d5bc8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5ba2:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5ba6:	200a      	movs	r0, #10
   d5ba8:	f7fe fd58 	bl	d465c <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5bac:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5bae:	a901      	add	r1, sp, #4
   d5bb0:	a806      	add	r0, sp, #24
   d5bb2:	f7ff fe05 	bl	d57c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5bb8:	3404      	adds	r4, #4
   d5bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5bbc:	682b      	ldr	r3, [r5, #0]
   d5bbe:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5bc0:	2000      	movs	r0, #0
   d5bc2:	b00d      	add	sp, #52	; 0x34
   d5bc4:	bd30      	pop	{r4, r5, pc}
   d5bc6:	bf00      	nop
   d5bc8:	000d7de8 	.word	0x000d7de8

000d5bcc <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5bcc:	b530      	push	{r4, r5, lr}
   d5bce:	4604      	mov	r4, r0
   d5bd0:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5bd2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5bd6:	f7ff fc00 	bl	d53da <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d5bda:	6823      	ldr	r3, [r4, #0]
   d5bdc:	bb83      	cbnz	r3, d5c40 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5bde:	204c      	movs	r0, #76	; 0x4c
   d5be0:	f7fe fa59 	bl	d4096 <_Znwj>
   d5be4:	4605      	mov	r5, r0
   d5be6:	b108      	cbz	r0, d5bec <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5be8:	f7ff fa50 	bl	d508c <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bec:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5bee:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5bf0:	b108      	cbz	r0, d5bf6 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5bf2:	f7ff ff8d 	bl	d5b10 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5bf6:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d5bf8:	b320      	cbz	r0, d5c44 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d5bfa:	2200      	movs	r2, #0
   d5bfc:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5c00:	f7ff fa73 	bl	d50ea <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5c04:	a908      	add	r1, sp, #32
   d5c06:	2500      	movs	r5, #0
   d5c08:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5c0c:	4811      	ldr	r0, [pc, #68]	; (d5c54 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d5c0e:	f7fe fc95 	bl	d453c <if_name_to_index>
   d5c12:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5c14:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5c18:	6803      	ldr	r3, [r0, #0]
   d5c1a:	f249 0169 	movw	r1, #36969	; 0x9069
   d5c1e:	6a1b      	ldr	r3, [r3, #32]
   d5c20:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5c22:	a802      	add	r0, sp, #8
   d5c24:	f7ff fdbe 	bl	d57a4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5c28:	a802      	add	r0, sp, #8
   d5c2a:	f7ff ffaf 	bl	d5b8c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5c2e:	2800      	cmp	r0, #0
   d5c30:	db04      	blt.n	d5c3c <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d5c32:	a902      	add	r1, sp, #8
   d5c34:	6820      	ldr	r0, [r4, #0]
   d5c36:	f7ff fac2 	bl	d51be <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d5c3a:	e004      	b.n	d5c46 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d5c3c:	4605      	mov	r5, r0
   d5c3e:	e002      	b.n	d5c46 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d5c40:	2500      	movs	r5, #0
   d5c42:	e000      	b.n	d5c46 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5c44:	4d04      	ldr	r5, [pc, #16]	; (d5c58 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5c46:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5c4a:	f7fe fcf7 	bl	d463c <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d5c4e:	4628      	mov	r0, r5
   d5c50:	b009      	add	sp, #36	; 0x24
   d5c52:	bd30      	pop	{r4, r5, pc}
   d5c54:	000d7df5 	.word	0x000d7df5
   d5c58:	fffffefc 	.word	0xfffffefc

000d5c5c <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d5c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5c60:	4605      	mov	r5, r0
   d5c62:	b08c      	sub	sp, #48	; 0x30
   d5c64:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d5c66:	460f      	mov	r7, r1
   d5c68:	b109      	cbz	r1, d5c6e <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d5c6a:	780b      	ldrb	r3, [r1, #0]
   d5c6c:	b90b      	cbnz	r3, d5c72 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d5c6e:	4c35      	ldr	r4, [pc, #212]	; (d5d44 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d5c70:	e064      	b.n	d5d3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d5c72:	4608      	mov	r0, r1
   d5c74:	f001 fb56 	bl	d7324 <strlen>
   d5c78:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5c7a:	2e00      	cmp	r6, #0
   d5c7c:	d05c      	beq.n	d5d38 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d5c7e:	4630      	mov	r0, r6
   d5c80:	f001 fb50 	bl	d7324 <strlen>
   d5c84:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5c86:	f108 0302 	add.w	r3, r8, #2
   d5c8a:	4423      	add	r3, r4
   d5c8c:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d5c90:	d84f      	bhi.n	d5d32 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d5c92:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d5c96:	f7ff fba0 	bl	d53da <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d5c9a:	4628      	mov	r0, r5
   d5c9c:	f7ff ff96 	bl	d5bcc <_ZN5spark11MeshPublish14initialize_udpEv>
   d5ca0:	2800      	cmp	r0, #0
   d5ca2:	db40      	blt.n	d5d26 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5ca4:	4668      	mov	r0, sp
   d5ca6:	f7ff fd7d 	bl	d57a4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5caa:	4668      	mov	r0, sp
   d5cac:	f7ff ff6e 	bl	d5b8c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5cb0:	2800      	cmp	r0, #0
   d5cb2:	db38      	blt.n	d5d26 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5cb4:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d5cb8:	f8da 3000 	ldr.w	r3, [sl]
   d5cbc:	f10d 0c04 	add.w	ip, sp, #4
   d5cc0:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5cc4:	4b20      	ldr	r3, [pc, #128]	; (d5d48 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d5cc6:	9306      	str	r3, [sp, #24]
   d5cc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5ccc:	f10d 0e1c 	add.w	lr, sp, #28
   d5cd0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5cd4:	f8dc 3000 	ldr.w	r3, [ip]
   d5cd8:	f88e 3000 	strb.w	r3, [lr]
   d5cdc:	f249 0269 	movw	r2, #36969	; 0x9069
   d5ce0:	a906      	add	r1, sp, #24
   d5ce2:	4650      	mov	r0, sl
   d5ce4:	47c8      	blx	r9
   d5ce6:	2800      	cmp	r0, #0
   d5ce8:	db1d      	blt.n	d5d26 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d5cea:	2300      	movs	r3, #0
   d5cec:	6828      	ldr	r0, [r5, #0]
   d5cee:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5cf2:	6803      	ldr	r3, [r0, #0]
   d5cf4:	2201      	movs	r2, #1
   d5cf6:	68db      	ldr	r3, [r3, #12]
   d5cf8:	a906      	add	r1, sp, #24
   d5cfa:	4798      	blx	r3
   d5cfc:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d5cfe:	6803      	ldr	r3, [r0, #0]
   d5d00:	f108 0201 	add.w	r2, r8, #1
   d5d04:	68db      	ldr	r3, [r3, #12]
   d5d06:	4639      	mov	r1, r7
   d5d08:	4798      	blx	r3
    if (dataLen > 0) {
   d5d0a:	b12c      	cbz	r4, d5d18 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d5d0c:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d5d0e:	6803      	ldr	r3, [r0, #0]
   d5d10:	4622      	mov	r2, r4
   d5d12:	68db      	ldr	r3, [r3, #12]
   d5d14:	4631      	mov	r1, r6
   d5d16:	4798      	blx	r3
   d5d18:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d5d1a:	6803      	ldr	r3, [r0, #0]
   d5d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d1e:	4798      	blx	r3
   d5d20:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5d24:	e000      	b.n	d5d28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d5d26:	4604      	mov	r4, r0
   d5d28:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5d2c:	f7fe fc86 	bl	d463c <os_mutex_recursive_unlock>
   d5d30:	e004      	b.n	d5d3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5d32:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d5d36:	e001      	b.n	d5d3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5d38:	4634      	mov	r4, r6
   d5d3a:	e7a4      	b.n	d5c86 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	b00c      	add	sp, #48	; 0x30
   d5d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5d44:	fffffef2 	.word	0xfffffef2
   d5d48:	000d7d20 	.word	0x000d7d20

000d5d4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5d4c:	b538      	push	{r3, r4, r5, lr}
   d5d4e:	4c0d      	ldr	r4, [pc, #52]	; (d5d84 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5d50:	4b0d      	ldr	r3, [pc, #52]	; (d5d88 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5d52:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5d54:	2500      	movs	r5, #0
   d5d56:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5d58:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5d5c:	6063      	str	r3, [r4, #4]
   d5d5e:	60a5      	str	r5, [r4, #8]
   d5d60:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d64:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5d68:	f7fe fc58 	bl	d461c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5d6c:	4b07      	ldr	r3, [pc, #28]	; (d5d8c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5d6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5d72:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5d74:	4620      	mov	r0, r4
   d5d76:	4a06      	ldr	r2, [pc, #24]	; (d5d90 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5d78:	4906      	ldr	r1, [pc, #24]	; (d5d94 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5d7e:	f000 b927 	b.w	d5fd0 <__aeabi_atexit>
   d5d82:	bf00      	nop
   d5d84:	2003e414 	.word	0x2003e414
   d5d88:	000d7e20 	.word	0x000d7e20
   d5d8c:	000d7dbc 	.word	0x000d7dbc
   d5d90:	2003e278 	.word	0x2003e278
   d5d94:	000d5b59 	.word	0x000d5b59

000d5d98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5d98:	2300      	movs	r3, #0
   d5d9a:	461a      	mov	r2, r3
   d5d9c:	6840      	ldr	r0, [r0, #4]
   d5d9e:	f7fe bd99 	b.w	d48d4 <network_connect>

000d5da2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5da2:	2200      	movs	r2, #0
   d5da4:	2102      	movs	r1, #2
   d5da6:	6840      	ldr	r0, [r0, #4]
   d5da8:	f7fe bda4 	b.w	d48f4 <network_disconnect>

000d5dac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5dac:	2200      	movs	r2, #0
   d5dae:	4611      	mov	r1, r2
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	f7fe bd97 	b.w	d48e4 <network_connecting>

000d5db6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5db6:	2200      	movs	r2, #0
   d5db8:	4611      	mov	r1, r2
   d5dba:	6840      	ldr	r0, [r0, #4]
   d5dbc:	f7fe bda2 	b.w	d4904 <network_ready>

000d5dc0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5dc0:	2300      	movs	r3, #0
   d5dc2:	461a      	mov	r2, r3
   d5dc4:	4619      	mov	r1, r3
   d5dc6:	6840      	ldr	r0, [r0, #4]
   d5dc8:	f7fe bda4 	b.w	d4914 <network_on>

000d5dcc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5dcc:	2300      	movs	r3, #0
   d5dce:	461a      	mov	r2, r3
   d5dd0:	4619      	mov	r1, r3
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7fe bda6 	b.w	d4924 <network_off>

000d5dd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	f081 0101 	eor.w	r1, r1, #1
   d5dde:	6840      	ldr	r0, [r0, #4]
   d5de0:	f7fe bda8 	b.w	d4934 <network_listen>

000d5de4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5de4:	2200      	movs	r2, #0
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7fe bdb4 	b.w	d4954 <network_set_listen_timeout>

000d5dec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5dec:	2200      	movs	r2, #0
   d5dee:	4611      	mov	r1, r2
   d5df0:	6840      	ldr	r0, [r0, #4]
   d5df2:	f7fe bdb7 	b.w	d4964 <network_get_listen_timeout>

000d5df6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5df6:	2200      	movs	r2, #0
   d5df8:	4611      	mov	r1, r2
   d5dfa:	6840      	ldr	r0, [r0, #4]
   d5dfc:	f7fe bda2 	b.w	d4944 <network_listening>

000d5e00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e04:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e06:	b095      	sub	sp, #84	; 0x54
   d5e08:	4616      	mov	r6, r2
   d5e0a:	460d      	mov	r5, r1
   d5e0c:	4607      	mov	r7, r0
    IPAddress addr;
   d5e0e:	f7ff fcc9 	bl	d57a4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e12:	4621      	mov	r1, r4
   d5e14:	2220      	movs	r2, #32
   d5e16:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e1a:	f000 fd2c 	bl	d6876 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e1e:	2340      	movs	r3, #64	; 0x40
   d5e20:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e22:	4621      	mov	r1, r4
   d5e24:	466b      	mov	r3, sp
   d5e26:	aa0c      	add	r2, sp, #48	; 0x30
   d5e28:	4630      	mov	r0, r6
   d5e2a:	f7fe fb4f 	bl	d44cc <netdb_getaddrinfo>
    if (!r) {
   d5e2e:	4604      	mov	r4, r0
   d5e30:	2800      	cmp	r0, #0
   d5e32:	d144      	bne.n	d5ebe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e34:	4602      	mov	r2, r0
   d5e36:	2101      	movs	r1, #1
   d5e38:	6868      	ldr	r0, [r5, #4]
   d5e3a:	f7fe fd63 	bl	d4904 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e3e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5e40:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e42:	4622      	mov	r2, r4
   d5e44:	6868      	ldr	r0, [r5, #4]
   d5e46:	f7fe fd5d 	bl	d4904 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e4a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5e4c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5e4e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5e50:	2e00      	cmp	r6, #0
   d5e52:	d034      	beq.n	d5ebe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5e54:	2900      	cmp	r1, #0
   d5e56:	d132      	bne.n	d5ebe <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5e58:	6873      	ldr	r3, [r6, #4]
   d5e5a:	2b02      	cmp	r3, #2
   d5e5c:	d002      	beq.n	d5e64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5e5e:	2b0a      	cmp	r3, #10
   d5e60:	d009      	beq.n	d5e76 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5e62:	e02a      	b.n	d5eba <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5e64:	f1b8 0f00 	cmp.w	r8, #0
   d5e68:	d027      	beq.n	d5eba <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5e6a:	6971      	ldr	r1, [r6, #20]
   d5e6c:	4638      	mov	r0, r7
   d5e6e:	3104      	adds	r1, #4
   d5e70:	f7ff fcdb 	bl	d582a <_ZN9IPAddressaSEPKh>
   d5e74:	e020      	b.n	d5eb8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5e76:	f1b9 0f00 	cmp.w	r9, #0
   d5e7a:	d01e      	beq.n	d5eba <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5e7c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5e7e:	2211      	movs	r2, #17
   d5e80:	a801      	add	r0, sp, #4
   d5e82:	f000 fcf8 	bl	d6876 <memset>
                    a.v = 6;
   d5e86:	2306      	movs	r3, #6
   d5e88:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e8c:	ad01      	add	r5, sp, #4
   d5e8e:	f104 0308 	add.w	r3, r4, #8
   d5e92:	3418      	adds	r4, #24
   d5e94:	6818      	ldr	r0, [r3, #0]
   d5e96:	6859      	ldr	r1, [r3, #4]
   d5e98:	462a      	mov	r2, r5
   d5e9a:	c203      	stmia	r2!, {r0, r1}
   d5e9c:	3308      	adds	r3, #8
   d5e9e:	42a3      	cmp	r3, r4
   d5ea0:	4615      	mov	r5, r2
   d5ea2:	d1f7      	bne.n	d5e94 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5ea4:	a901      	add	r1, sp, #4
   d5ea6:	a806      	add	r0, sp, #24
   d5ea8:	ad07      	add	r5, sp, #28
   d5eaa:	f7ff fc89 	bl	d57c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5eb0:	1d3c      	adds	r4, r7, #4
   d5eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5eb4:	682b      	ldr	r3, [r5, #0]
   d5eb6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5eb8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5eba:	69f6      	ldr	r6, [r6, #28]
   d5ebc:	e7c8      	b.n	d5e50 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ebe:	9800      	ldr	r0, [sp, #0]
   d5ec0:	f7fe fafc 	bl	d44bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ec4:	4638      	mov	r0, r7
   d5ec6:	b015      	add	sp, #84	; 0x54
   d5ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ecc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ecc:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ece:	4a03      	ldr	r2, [pc, #12]	; (d5edc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ed0:	601a      	str	r2, [r3, #0]
   d5ed2:	2200      	movs	r2, #0
   d5ed4:	605a      	str	r2, [r3, #4]
   d5ed6:	4770      	bx	lr
   d5ed8:	2003e5e4 	.word	0x2003e5e4
   d5edc:	000d7e20 	.word	0x000d7e20

000d5ee0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5ee0:	b510      	push	{r4, lr}
   d5ee2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5ee4:	480f      	ldr	r0, [pc, #60]	; (d5f24 <pinAvailable+0x44>)
   d5ee6:	f7fe fe1f 	bl	d4b28 <_ZN8SPIClass9isEnabledEv>
   d5eea:	b128      	cbz	r0, d5ef8 <pinAvailable+0x18>
   d5eec:	f1a4 030b 	sub.w	r3, r4, #11
   d5ef0:	2b02      	cmp	r3, #2
   d5ef2:	d801      	bhi.n	d5ef8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5ef4:	2000      	movs	r0, #0
   d5ef6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5ef8:	f000 f84a 	bl	d5f90 <_Z19__fetch_global_Wirev>
   d5efc:	f7ff fdbc 	bl	d5a78 <_ZN7TwoWire9isEnabledEv>
   d5f00:	b108      	cbz	r0, d5f06 <pinAvailable+0x26>
   d5f02:	2c01      	cmp	r4, #1
   d5f04:	d9f6      	bls.n	d5ef4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5f06:	f7ff fd53 	bl	d59b0 <_Z22__fetch_global_Serial1v>
   d5f0a:	f7ff fd4d 	bl	d59a8 <_ZN11USARTSerial9isEnabledEv>
   d5f0e:	b118      	cbz	r0, d5f18 <pinAvailable+0x38>
   d5f10:	f1a4 0309 	sub.w	r3, r4, #9
   d5f14:	2b01      	cmp	r3, #1
   d5f16:	d9ed      	bls.n	d5ef4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5f18:	2c1e      	cmp	r4, #30
   d5f1a:	bf8c      	ite	hi
   d5f1c:	2000      	movhi	r0, #0
   d5f1e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5f20:	bd10      	pop	{r4, pc}
   d5f22:	bf00      	nop
   d5f24:	2003e5ec 	.word	0x2003e5ec

000d5f28 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f28:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5f2a:	b538      	push	{r3, r4, r5, lr}
   d5f2c:	4604      	mov	r4, r0
   d5f2e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5f30:	d80a      	bhi.n	d5f48 <pinMode+0x20>
   d5f32:	29ff      	cmp	r1, #255	; 0xff
   d5f34:	d008      	beq.n	d5f48 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5f36:	f7ff ffd3 	bl	d5ee0 <pinAvailable>
   d5f3a:	b128      	cbz	r0, d5f48 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f3c:	4629      	mov	r1, r5
   d5f3e:	4620      	mov	r0, r4
}
   d5f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5f44:	f7fe bad2 	b.w	d44ec <HAL_Pin_Mode>
   d5f48:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5f4c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f4c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5f4e:	4c0c      	ldr	r4, [pc, #48]	; (d5f80 <_GLOBAL__sub_I_SPI+0x34>)
   d5f50:	4e0c      	ldr	r6, [pc, #48]	; (d5f84 <_GLOBAL__sub_I_SPI+0x38>)
   d5f52:	4d0d      	ldr	r5, [pc, #52]	; (d5f88 <_GLOBAL__sub_I_SPI+0x3c>)
   d5f54:	2100      	movs	r1, #0
   d5f56:	4620      	mov	r0, r4
   d5f58:	f7fe fdd2 	bl	d4b00 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f5c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f5e:	4c0b      	ldr	r4, [pc, #44]	; (d5f8c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5f60:	4632      	mov	r2, r6
   d5f62:	4629      	mov	r1, r5
   d5f64:	f000 f834 	bl	d5fd0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5f68:	2101      	movs	r1, #1
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	f7fe fdc8 	bl	d4b00 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5f70:	4632      	mov	r2, r6
   d5f72:	4629      	mov	r1, r5
   d5f74:	4620      	mov	r0, r4
   d5f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5f7a:	f000 b829 	b.w	d5fd0 <__aeabi_atexit>
   d5f7e:	bf00      	nop
   d5f80:	2003e5ec 	.word	0x2003e5ec
   d5f84:	2003e278 	.word	0x2003e278
   d5f88:	000d4af1 	.word	0x000d4af1
   d5f8c:	2003e5fc 	.word	0x2003e5fc

000d5f90 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5f90:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5f92:	4d0b      	ldr	r5, [pc, #44]	; (d5fc0 <_Z19__fetch_global_Wirev+0x30>)
   d5f94:	6829      	ldr	r1, [r5, #0]
   d5f96:	f011 0401 	ands.w	r4, r1, #1
   d5f9a:	d10f      	bne.n	d5fbc <_Z19__fetch_global_Wirev+0x2c>
   d5f9c:	4628      	mov	r0, r5
   d5f9e:	f7fe f882 	bl	d40a6 <__cxa_guard_acquire>
   d5fa2:	b158      	cbz	r0, d5fbc <_Z19__fetch_global_Wirev+0x2c>
   d5fa4:	4621      	mov	r1, r4
   d5fa6:	4807      	ldr	r0, [pc, #28]	; (d5fc4 <_Z19__fetch_global_Wirev+0x34>)
   d5fa8:	f7ff fd54 	bl	d5a54 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5fac:	4628      	mov	r0, r5
   d5fae:	f7fe f87f 	bl	d40b0 <__cxa_guard_release>
   d5fb2:	4a05      	ldr	r2, [pc, #20]	; (d5fc8 <_Z19__fetch_global_Wirev+0x38>)
   d5fb4:	4905      	ldr	r1, [pc, #20]	; (d5fcc <_Z19__fetch_global_Wirev+0x3c>)
   d5fb6:	4803      	ldr	r0, [pc, #12]	; (d5fc4 <_Z19__fetch_global_Wirev+0x34>)
   d5fb8:	f000 f80a 	bl	d5fd0 <__aeabi_atexit>
	return wire;
}
   d5fbc:	4801      	ldr	r0, [pc, #4]	; (d5fc4 <_Z19__fetch_global_Wirev+0x34>)
   d5fbe:	bd38      	pop	{r3, r4, r5, pc}
   d5fc0:	2003e610 	.word	0x2003e610
   d5fc4:	2003e614 	.word	0x2003e614
   d5fc8:	2003e278 	.word	0x2003e278
   d5fcc:	000d59fd 	.word	0x000d59fd

000d5fd0 <__aeabi_atexit>:
   d5fd0:	460b      	mov	r3, r1
   d5fd2:	4601      	mov	r1, r0
   d5fd4:	4618      	mov	r0, r3
   d5fd6:	f000 bb3d 	b.w	d6654 <__cxa_atexit>
	...

000d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5fdc:	4b18      	ldr	r3, [pc, #96]	; (d6040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5fde:	681a      	ldr	r2, [r3, #0]
   d5fe0:	07d1      	lsls	r1, r2, #31
   d5fe2:	bf5c      	itt	pl
   d5fe4:	2201      	movpl	r2, #1
   d5fe6:	601a      	strpl	r2, [r3, #0]
   d5fe8:	4b16      	ldr	r3, [pc, #88]	; (d6044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5fea:	681a      	ldr	r2, [r3, #0]
   d5fec:	07d2      	lsls	r2, r2, #31
   d5fee:	bf5c      	itt	pl
   d5ff0:	2201      	movpl	r2, #1
   d5ff2:	601a      	strpl	r2, [r3, #0]
   d5ff4:	4b14      	ldr	r3, [pc, #80]	; (d6048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5ff6:	681a      	ldr	r2, [r3, #0]
   d5ff8:	07d0      	lsls	r0, r2, #31
   d5ffa:	bf5c      	itt	pl
   d5ffc:	2201      	movpl	r2, #1
   d5ffe:	601a      	strpl	r2, [r3, #0]
   d6000:	4b12      	ldr	r3, [pc, #72]	; (d604c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6002:	681a      	ldr	r2, [r3, #0]
   d6004:	07d1      	lsls	r1, r2, #31
   d6006:	bf5c      	itt	pl
   d6008:	2201      	movpl	r2, #1
   d600a:	601a      	strpl	r2, [r3, #0]
   d600c:	4b10      	ldr	r3, [pc, #64]	; (d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d600e:	681a      	ldr	r2, [r3, #0]
   d6010:	07d2      	lsls	r2, r2, #31
   d6012:	bf5c      	itt	pl
   d6014:	2201      	movpl	r2, #1
   d6016:	601a      	strpl	r2, [r3, #0]
   d6018:	4b0e      	ldr	r3, [pc, #56]	; (d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d601a:	681a      	ldr	r2, [r3, #0]
   d601c:	07d0      	lsls	r0, r2, #31
   d601e:	bf5c      	itt	pl
   d6020:	2201      	movpl	r2, #1
   d6022:	601a      	strpl	r2, [r3, #0]
   d6024:	4b0c      	ldr	r3, [pc, #48]	; (d6058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6026:	681a      	ldr	r2, [r3, #0]
   d6028:	07d1      	lsls	r1, r2, #31
   d602a:	bf5c      	itt	pl
   d602c:	2201      	movpl	r2, #1
   d602e:	601a      	strpl	r2, [r3, #0]
   d6030:	4b0a      	ldr	r3, [pc, #40]	; (d605c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6032:	681a      	ldr	r2, [r3, #0]
   d6034:	07d2      	lsls	r2, r2, #31
   d6036:	bf5c      	itt	pl
   d6038:	2201      	movpl	r2, #1
   d603a:	601a      	strpl	r2, [r3, #0]
   d603c:	4770      	bx	lr
   d603e:	bf00      	nop
   d6040:	2003e644 	.word	0x2003e644
   d6044:	2003e640 	.word	0x2003e640
   d6048:	2003e63c 	.word	0x2003e63c
   d604c:	2003e638 	.word	0x2003e638
   d6050:	2003e634 	.word	0x2003e634
   d6054:	2003e630 	.word	0x2003e630
   d6058:	2003e62c 	.word	0x2003e62c
   d605c:	2003e628 	.word	0x2003e628

000d6060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6060:	4b24      	ldr	r3, [pc, #144]	; (d60f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6062:	681a      	ldr	r2, [r3, #0]
   d6064:	07d0      	lsls	r0, r2, #31
   d6066:	bf5c      	itt	pl
   d6068:	2201      	movpl	r2, #1
   d606a:	601a      	strpl	r2, [r3, #0]
   d606c:	4b22      	ldr	r3, [pc, #136]	; (d60f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d606e:	681a      	ldr	r2, [r3, #0]
   d6070:	07d1      	lsls	r1, r2, #31
   d6072:	bf5c      	itt	pl
   d6074:	2201      	movpl	r2, #1
   d6076:	601a      	strpl	r2, [r3, #0]
   d6078:	4b20      	ldr	r3, [pc, #128]	; (d60fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d607a:	681a      	ldr	r2, [r3, #0]
   d607c:	07d2      	lsls	r2, r2, #31
   d607e:	bf5c      	itt	pl
   d6080:	2201      	movpl	r2, #1
   d6082:	601a      	strpl	r2, [r3, #0]
   d6084:	4b1e      	ldr	r3, [pc, #120]	; (d6100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6086:	681a      	ldr	r2, [r3, #0]
   d6088:	07d0      	lsls	r0, r2, #31
   d608a:	bf5c      	itt	pl
   d608c:	2201      	movpl	r2, #1
   d608e:	601a      	strpl	r2, [r3, #0]
   d6090:	4b1c      	ldr	r3, [pc, #112]	; (d6104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6092:	681a      	ldr	r2, [r3, #0]
   d6094:	07d1      	lsls	r1, r2, #31
   d6096:	bf5c      	itt	pl
   d6098:	2201      	movpl	r2, #1
   d609a:	601a      	strpl	r2, [r3, #0]
   d609c:	4b1a      	ldr	r3, [pc, #104]	; (d6108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d609e:	681a      	ldr	r2, [r3, #0]
   d60a0:	07d2      	lsls	r2, r2, #31
   d60a2:	bf5c      	itt	pl
   d60a4:	2201      	movpl	r2, #1
   d60a6:	601a      	strpl	r2, [r3, #0]
   d60a8:	4b18      	ldr	r3, [pc, #96]	; (d610c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d60aa:	681a      	ldr	r2, [r3, #0]
   d60ac:	07d0      	lsls	r0, r2, #31
   d60ae:	bf5c      	itt	pl
   d60b0:	2201      	movpl	r2, #1
   d60b2:	601a      	strpl	r2, [r3, #0]
   d60b4:	4b16      	ldr	r3, [pc, #88]	; (d6110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d60b6:	681a      	ldr	r2, [r3, #0]
   d60b8:	07d1      	lsls	r1, r2, #31
   d60ba:	bf5c      	itt	pl
   d60bc:	2201      	movpl	r2, #1
   d60be:	601a      	strpl	r2, [r3, #0]
   d60c0:	4b14      	ldr	r3, [pc, #80]	; (d6114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d60c2:	681a      	ldr	r2, [r3, #0]
   d60c4:	07d2      	lsls	r2, r2, #31
   d60c6:	bf5c      	itt	pl
   d60c8:	2201      	movpl	r2, #1
   d60ca:	601a      	strpl	r2, [r3, #0]
   d60cc:	4b12      	ldr	r3, [pc, #72]	; (d6118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d60ce:	681a      	ldr	r2, [r3, #0]
   d60d0:	07d0      	lsls	r0, r2, #31
   d60d2:	bf5c      	itt	pl
   d60d4:	2201      	movpl	r2, #1
   d60d6:	601a      	strpl	r2, [r3, #0]
   d60d8:	4b10      	ldr	r3, [pc, #64]	; (d611c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d60da:	681a      	ldr	r2, [r3, #0]
   d60dc:	07d1      	lsls	r1, r2, #31
   d60de:	bf5c      	itt	pl
   d60e0:	2201      	movpl	r2, #1
   d60e2:	601a      	strpl	r2, [r3, #0]
   d60e4:	4b0e      	ldr	r3, [pc, #56]	; (d6120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d60e6:	681a      	ldr	r2, [r3, #0]
   d60e8:	07d2      	lsls	r2, r2, #31
   d60ea:	bf5c      	itt	pl
   d60ec:	2201      	movpl	r2, #1
   d60ee:	601a      	strpl	r2, [r3, #0]
   d60f0:	4770      	bx	lr
   d60f2:	bf00      	nop
   d60f4:	2003e674 	.word	0x2003e674
   d60f8:	2003e670 	.word	0x2003e670
   d60fc:	2003e66c 	.word	0x2003e66c
   d6100:	2003e668 	.word	0x2003e668
   d6104:	2003e664 	.word	0x2003e664
   d6108:	2003e660 	.word	0x2003e660
   d610c:	2003e65c 	.word	0x2003e65c
   d6110:	2003e658 	.word	0x2003e658
   d6114:	2003e654 	.word	0x2003e654
   d6118:	2003e650 	.word	0x2003e650
   d611c:	2003e64c 	.word	0x2003e64c
   d6120:	2003e648 	.word	0x2003e648

000d6124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6124:	4b24      	ldr	r3, [pc, #144]	; (d61b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6126:	681a      	ldr	r2, [r3, #0]
   d6128:	07d0      	lsls	r0, r2, #31
   d612a:	bf5c      	itt	pl
   d612c:	2201      	movpl	r2, #1
   d612e:	601a      	strpl	r2, [r3, #0]
   d6130:	4b22      	ldr	r3, [pc, #136]	; (d61bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6132:	681a      	ldr	r2, [r3, #0]
   d6134:	07d1      	lsls	r1, r2, #31
   d6136:	bf5c      	itt	pl
   d6138:	2201      	movpl	r2, #1
   d613a:	601a      	strpl	r2, [r3, #0]
   d613c:	4b20      	ldr	r3, [pc, #128]	; (d61c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d613e:	681a      	ldr	r2, [r3, #0]
   d6140:	07d2      	lsls	r2, r2, #31
   d6142:	bf5c      	itt	pl
   d6144:	2201      	movpl	r2, #1
   d6146:	601a      	strpl	r2, [r3, #0]
   d6148:	4b1e      	ldr	r3, [pc, #120]	; (d61c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d614a:	681a      	ldr	r2, [r3, #0]
   d614c:	07d0      	lsls	r0, r2, #31
   d614e:	bf5c      	itt	pl
   d6150:	2201      	movpl	r2, #1
   d6152:	601a      	strpl	r2, [r3, #0]
   d6154:	4b1c      	ldr	r3, [pc, #112]	; (d61c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6156:	681a      	ldr	r2, [r3, #0]
   d6158:	07d1      	lsls	r1, r2, #31
   d615a:	bf5c      	itt	pl
   d615c:	2201      	movpl	r2, #1
   d615e:	601a      	strpl	r2, [r3, #0]
   d6160:	4b1a      	ldr	r3, [pc, #104]	; (d61cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6162:	681a      	ldr	r2, [r3, #0]
   d6164:	07d2      	lsls	r2, r2, #31
   d6166:	bf5c      	itt	pl
   d6168:	2201      	movpl	r2, #1
   d616a:	601a      	strpl	r2, [r3, #0]
   d616c:	4b18      	ldr	r3, [pc, #96]	; (d61d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d616e:	681a      	ldr	r2, [r3, #0]
   d6170:	07d0      	lsls	r0, r2, #31
   d6172:	bf5c      	itt	pl
   d6174:	2201      	movpl	r2, #1
   d6176:	601a      	strpl	r2, [r3, #0]
   d6178:	4b16      	ldr	r3, [pc, #88]	; (d61d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d617a:	681a      	ldr	r2, [r3, #0]
   d617c:	07d1      	lsls	r1, r2, #31
   d617e:	bf5c      	itt	pl
   d6180:	2201      	movpl	r2, #1
   d6182:	601a      	strpl	r2, [r3, #0]
   d6184:	4b14      	ldr	r3, [pc, #80]	; (d61d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6186:	681a      	ldr	r2, [r3, #0]
   d6188:	07d2      	lsls	r2, r2, #31
   d618a:	bf5c      	itt	pl
   d618c:	2201      	movpl	r2, #1
   d618e:	601a      	strpl	r2, [r3, #0]
   d6190:	4b12      	ldr	r3, [pc, #72]	; (d61dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6192:	681a      	ldr	r2, [r3, #0]
   d6194:	07d0      	lsls	r0, r2, #31
   d6196:	bf5c      	itt	pl
   d6198:	2201      	movpl	r2, #1
   d619a:	601a      	strpl	r2, [r3, #0]
   d619c:	4b10      	ldr	r3, [pc, #64]	; (d61e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d619e:	681a      	ldr	r2, [r3, #0]
   d61a0:	07d1      	lsls	r1, r2, #31
   d61a2:	bf5c      	itt	pl
   d61a4:	2201      	movpl	r2, #1
   d61a6:	601a      	strpl	r2, [r3, #0]
   d61a8:	4b0e      	ldr	r3, [pc, #56]	; (d61e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d61aa:	681a      	ldr	r2, [r3, #0]
   d61ac:	07d2      	lsls	r2, r2, #31
   d61ae:	bf5c      	itt	pl
   d61b0:	2201      	movpl	r2, #1
   d61b2:	601a      	strpl	r2, [r3, #0]
   d61b4:	4770      	bx	lr
   d61b6:	bf00      	nop
   d61b8:	2003e6a4 	.word	0x2003e6a4
   d61bc:	2003e6a0 	.word	0x2003e6a0
   d61c0:	2003e69c 	.word	0x2003e69c
   d61c4:	2003e698 	.word	0x2003e698
   d61c8:	2003e694 	.word	0x2003e694
   d61cc:	2003e690 	.word	0x2003e690
   d61d0:	2003e68c 	.word	0x2003e68c
   d61d4:	2003e688 	.word	0x2003e688
   d61d8:	2003e684 	.word	0x2003e684
   d61dc:	2003e680 	.word	0x2003e680
   d61e0:	2003e67c 	.word	0x2003e67c
   d61e4:	2003e678 	.word	0x2003e678

000d61e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d61e8:	4b18      	ldr	r3, [pc, #96]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d61ea:	681a      	ldr	r2, [r3, #0]
   d61ec:	07d1      	lsls	r1, r2, #31
   d61ee:	bf5c      	itt	pl
   d61f0:	2201      	movpl	r2, #1
   d61f2:	601a      	strpl	r2, [r3, #0]
   d61f4:	4b16      	ldr	r3, [pc, #88]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d61f6:	681a      	ldr	r2, [r3, #0]
   d61f8:	07d2      	lsls	r2, r2, #31
   d61fa:	bf5c      	itt	pl
   d61fc:	2201      	movpl	r2, #1
   d61fe:	601a      	strpl	r2, [r3, #0]
   d6200:	4b14      	ldr	r3, [pc, #80]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6202:	681a      	ldr	r2, [r3, #0]
   d6204:	07d0      	lsls	r0, r2, #31
   d6206:	bf5c      	itt	pl
   d6208:	2201      	movpl	r2, #1
   d620a:	601a      	strpl	r2, [r3, #0]
   d620c:	4b12      	ldr	r3, [pc, #72]	; (d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d620e:	681a      	ldr	r2, [r3, #0]
   d6210:	07d1      	lsls	r1, r2, #31
   d6212:	bf5c      	itt	pl
   d6214:	2201      	movpl	r2, #1
   d6216:	601a      	strpl	r2, [r3, #0]
   d6218:	4b10      	ldr	r3, [pc, #64]	; (d625c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d621a:	681a      	ldr	r2, [r3, #0]
   d621c:	07d2      	lsls	r2, r2, #31
   d621e:	bf5c      	itt	pl
   d6220:	2201      	movpl	r2, #1
   d6222:	601a      	strpl	r2, [r3, #0]
   d6224:	4b0e      	ldr	r3, [pc, #56]	; (d6260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6226:	681a      	ldr	r2, [r3, #0]
   d6228:	07d0      	lsls	r0, r2, #31
   d622a:	bf5c      	itt	pl
   d622c:	2201      	movpl	r2, #1
   d622e:	601a      	strpl	r2, [r3, #0]
   d6230:	4b0c      	ldr	r3, [pc, #48]	; (d6264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6232:	681a      	ldr	r2, [r3, #0]
   d6234:	07d1      	lsls	r1, r2, #31
   d6236:	bf5c      	itt	pl
   d6238:	2201      	movpl	r2, #1
   d623a:	601a      	strpl	r2, [r3, #0]
   d623c:	4b0a      	ldr	r3, [pc, #40]	; (d6268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d623e:	681a      	ldr	r2, [r3, #0]
   d6240:	07d2      	lsls	r2, r2, #31
   d6242:	bf5c      	itt	pl
   d6244:	2201      	movpl	r2, #1
   d6246:	601a      	strpl	r2, [r3, #0]
   d6248:	4770      	bx	lr
   d624a:	bf00      	nop
   d624c:	2003e6c4 	.word	0x2003e6c4
   d6250:	2003e6c0 	.word	0x2003e6c0
   d6254:	2003e6bc 	.word	0x2003e6bc
   d6258:	2003e6b8 	.word	0x2003e6b8
   d625c:	2003e6b4 	.word	0x2003e6b4
   d6260:	2003e6b0 	.word	0x2003e6b0
   d6264:	2003e6ac 	.word	0x2003e6ac
   d6268:	2003e6a8 	.word	0x2003e6a8

000d626c <__aeabi_drsub>:
   d626c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6270:	e002      	b.n	d6278 <__adddf3>
   d6272:	bf00      	nop

000d6274 <__aeabi_dsub>:
   d6274:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6278 <__adddf3>:
   d6278:	b530      	push	{r4, r5, lr}
   d627a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d627e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6282:	ea94 0f05 	teq	r4, r5
   d6286:	bf08      	it	eq
   d6288:	ea90 0f02 	teqeq	r0, r2
   d628c:	bf1f      	itttt	ne
   d628e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6292:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6296:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d629a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d629e:	f000 80e2 	beq.w	d6466 <__adddf3+0x1ee>
   d62a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d62a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d62aa:	bfb8      	it	lt
   d62ac:	426d      	neglt	r5, r5
   d62ae:	dd0c      	ble.n	d62ca <__adddf3+0x52>
   d62b0:	442c      	add	r4, r5
   d62b2:	ea80 0202 	eor.w	r2, r0, r2
   d62b6:	ea81 0303 	eor.w	r3, r1, r3
   d62ba:	ea82 0000 	eor.w	r0, r2, r0
   d62be:	ea83 0101 	eor.w	r1, r3, r1
   d62c2:	ea80 0202 	eor.w	r2, r0, r2
   d62c6:	ea81 0303 	eor.w	r3, r1, r3
   d62ca:	2d36      	cmp	r5, #54	; 0x36
   d62cc:	bf88      	it	hi
   d62ce:	bd30      	pophi	{r4, r5, pc}
   d62d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d62d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d62d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d62dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d62e0:	d002      	beq.n	d62e8 <__adddf3+0x70>
   d62e2:	4240      	negs	r0, r0
   d62e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d62e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d62ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d62f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d62f4:	d002      	beq.n	d62fc <__adddf3+0x84>
   d62f6:	4252      	negs	r2, r2
   d62f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d62fc:	ea94 0f05 	teq	r4, r5
   d6300:	f000 80a7 	beq.w	d6452 <__adddf3+0x1da>
   d6304:	f1a4 0401 	sub.w	r4, r4, #1
   d6308:	f1d5 0e20 	rsbs	lr, r5, #32
   d630c:	db0d      	blt.n	d632a <__adddf3+0xb2>
   d630e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6312:	fa22 f205 	lsr.w	r2, r2, r5
   d6316:	1880      	adds	r0, r0, r2
   d6318:	f141 0100 	adc.w	r1, r1, #0
   d631c:	fa03 f20e 	lsl.w	r2, r3, lr
   d6320:	1880      	adds	r0, r0, r2
   d6322:	fa43 f305 	asr.w	r3, r3, r5
   d6326:	4159      	adcs	r1, r3
   d6328:	e00e      	b.n	d6348 <__adddf3+0xd0>
   d632a:	f1a5 0520 	sub.w	r5, r5, #32
   d632e:	f10e 0e20 	add.w	lr, lr, #32
   d6332:	2a01      	cmp	r2, #1
   d6334:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6338:	bf28      	it	cs
   d633a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d633e:	fa43 f305 	asr.w	r3, r3, r5
   d6342:	18c0      	adds	r0, r0, r3
   d6344:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d634c:	d507      	bpl.n	d635e <__adddf3+0xe6>
   d634e:	f04f 0e00 	mov.w	lr, #0
   d6352:	f1dc 0c00 	rsbs	ip, ip, #0
   d6356:	eb7e 0000 	sbcs.w	r0, lr, r0
   d635a:	eb6e 0101 	sbc.w	r1, lr, r1
   d635e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6362:	d31b      	bcc.n	d639c <__adddf3+0x124>
   d6364:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6368:	d30c      	bcc.n	d6384 <__adddf3+0x10c>
   d636a:	0849      	lsrs	r1, r1, #1
   d636c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6370:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6374:	f104 0401 	add.w	r4, r4, #1
   d6378:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d637c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6380:	f080 809a 	bcs.w	d64b8 <__adddf3+0x240>
   d6384:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6388:	bf08      	it	eq
   d638a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d638e:	f150 0000 	adcs.w	r0, r0, #0
   d6392:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6396:	ea41 0105 	orr.w	r1, r1, r5
   d639a:	bd30      	pop	{r4, r5, pc}
   d639c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d63a0:	4140      	adcs	r0, r0
   d63a2:	eb41 0101 	adc.w	r1, r1, r1
   d63a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d63aa:	f1a4 0401 	sub.w	r4, r4, #1
   d63ae:	d1e9      	bne.n	d6384 <__adddf3+0x10c>
   d63b0:	f091 0f00 	teq	r1, #0
   d63b4:	bf04      	itt	eq
   d63b6:	4601      	moveq	r1, r0
   d63b8:	2000      	moveq	r0, #0
   d63ba:	fab1 f381 	clz	r3, r1
   d63be:	bf08      	it	eq
   d63c0:	3320      	addeq	r3, #32
   d63c2:	f1a3 030b 	sub.w	r3, r3, #11
   d63c6:	f1b3 0220 	subs.w	r2, r3, #32
   d63ca:	da0c      	bge.n	d63e6 <__adddf3+0x16e>
   d63cc:	320c      	adds	r2, #12
   d63ce:	dd08      	ble.n	d63e2 <__adddf3+0x16a>
   d63d0:	f102 0c14 	add.w	ip, r2, #20
   d63d4:	f1c2 020c 	rsb	r2, r2, #12
   d63d8:	fa01 f00c 	lsl.w	r0, r1, ip
   d63dc:	fa21 f102 	lsr.w	r1, r1, r2
   d63e0:	e00c      	b.n	d63fc <__adddf3+0x184>
   d63e2:	f102 0214 	add.w	r2, r2, #20
   d63e6:	bfd8      	it	le
   d63e8:	f1c2 0c20 	rsble	ip, r2, #32
   d63ec:	fa01 f102 	lsl.w	r1, r1, r2
   d63f0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d63f4:	bfdc      	itt	le
   d63f6:	ea41 010c 	orrle.w	r1, r1, ip
   d63fa:	4090      	lslle	r0, r2
   d63fc:	1ae4      	subs	r4, r4, r3
   d63fe:	bfa2      	ittt	ge
   d6400:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6404:	4329      	orrge	r1, r5
   d6406:	bd30      	popge	{r4, r5, pc}
   d6408:	ea6f 0404 	mvn.w	r4, r4
   d640c:	3c1f      	subs	r4, #31
   d640e:	da1c      	bge.n	d644a <__adddf3+0x1d2>
   d6410:	340c      	adds	r4, #12
   d6412:	dc0e      	bgt.n	d6432 <__adddf3+0x1ba>
   d6414:	f104 0414 	add.w	r4, r4, #20
   d6418:	f1c4 0220 	rsb	r2, r4, #32
   d641c:	fa20 f004 	lsr.w	r0, r0, r4
   d6420:	fa01 f302 	lsl.w	r3, r1, r2
   d6424:	ea40 0003 	orr.w	r0, r0, r3
   d6428:	fa21 f304 	lsr.w	r3, r1, r4
   d642c:	ea45 0103 	orr.w	r1, r5, r3
   d6430:	bd30      	pop	{r4, r5, pc}
   d6432:	f1c4 040c 	rsb	r4, r4, #12
   d6436:	f1c4 0220 	rsb	r2, r4, #32
   d643a:	fa20 f002 	lsr.w	r0, r0, r2
   d643e:	fa01 f304 	lsl.w	r3, r1, r4
   d6442:	ea40 0003 	orr.w	r0, r0, r3
   d6446:	4629      	mov	r1, r5
   d6448:	bd30      	pop	{r4, r5, pc}
   d644a:	fa21 f004 	lsr.w	r0, r1, r4
   d644e:	4629      	mov	r1, r5
   d6450:	bd30      	pop	{r4, r5, pc}
   d6452:	f094 0f00 	teq	r4, #0
   d6456:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d645a:	bf06      	itte	eq
   d645c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6460:	3401      	addeq	r4, #1
   d6462:	3d01      	subne	r5, #1
   d6464:	e74e      	b.n	d6304 <__adddf3+0x8c>
   d6466:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d646a:	bf18      	it	ne
   d646c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6470:	d029      	beq.n	d64c6 <__adddf3+0x24e>
   d6472:	ea94 0f05 	teq	r4, r5
   d6476:	bf08      	it	eq
   d6478:	ea90 0f02 	teqeq	r0, r2
   d647c:	d005      	beq.n	d648a <__adddf3+0x212>
   d647e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6482:	bf04      	itt	eq
   d6484:	4619      	moveq	r1, r3
   d6486:	4610      	moveq	r0, r2
   d6488:	bd30      	pop	{r4, r5, pc}
   d648a:	ea91 0f03 	teq	r1, r3
   d648e:	bf1e      	ittt	ne
   d6490:	2100      	movne	r1, #0
   d6492:	2000      	movne	r0, #0
   d6494:	bd30      	popne	{r4, r5, pc}
   d6496:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d649a:	d105      	bne.n	d64a8 <__adddf3+0x230>
   d649c:	0040      	lsls	r0, r0, #1
   d649e:	4149      	adcs	r1, r1
   d64a0:	bf28      	it	cs
   d64a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d64a6:	bd30      	pop	{r4, r5, pc}
   d64a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d64ac:	bf3c      	itt	cc
   d64ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d64b2:	bd30      	popcc	{r4, r5, pc}
   d64b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d64b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d64bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d64c0:	f04f 0000 	mov.w	r0, #0
   d64c4:	bd30      	pop	{r4, r5, pc}
   d64c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d64ca:	bf1a      	itte	ne
   d64cc:	4619      	movne	r1, r3
   d64ce:	4610      	movne	r0, r2
   d64d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d64d4:	bf1c      	itt	ne
   d64d6:	460b      	movne	r3, r1
   d64d8:	4602      	movne	r2, r0
   d64da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d64de:	bf06      	itte	eq
   d64e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d64e4:	ea91 0f03 	teqeq	r1, r3
   d64e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d64ec:	bd30      	pop	{r4, r5, pc}
   d64ee:	bf00      	nop

000d64f0 <__aeabi_ui2d>:
   d64f0:	f090 0f00 	teq	r0, #0
   d64f4:	bf04      	itt	eq
   d64f6:	2100      	moveq	r1, #0
   d64f8:	4770      	bxeq	lr
   d64fa:	b530      	push	{r4, r5, lr}
   d64fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6500:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6504:	f04f 0500 	mov.w	r5, #0
   d6508:	f04f 0100 	mov.w	r1, #0
   d650c:	e750      	b.n	d63b0 <__adddf3+0x138>
   d650e:	bf00      	nop

000d6510 <__aeabi_i2d>:
   d6510:	f090 0f00 	teq	r0, #0
   d6514:	bf04      	itt	eq
   d6516:	2100      	moveq	r1, #0
   d6518:	4770      	bxeq	lr
   d651a:	b530      	push	{r4, r5, lr}
   d651c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6520:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6524:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6528:	bf48      	it	mi
   d652a:	4240      	negmi	r0, r0
   d652c:	f04f 0100 	mov.w	r1, #0
   d6530:	e73e      	b.n	d63b0 <__adddf3+0x138>
   d6532:	bf00      	nop

000d6534 <__aeabi_f2d>:
   d6534:	0042      	lsls	r2, r0, #1
   d6536:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d653a:	ea4f 0131 	mov.w	r1, r1, rrx
   d653e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6542:	bf1f      	itttt	ne
   d6544:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6548:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d654c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6550:	4770      	bxne	lr
   d6552:	f092 0f00 	teq	r2, #0
   d6556:	bf14      	ite	ne
   d6558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d655c:	4770      	bxeq	lr
   d655e:	b530      	push	{r4, r5, lr}
   d6560:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6564:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6568:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d656c:	e720      	b.n	d63b0 <__adddf3+0x138>
   d656e:	bf00      	nop

000d6570 <__aeabi_ul2d>:
   d6570:	ea50 0201 	orrs.w	r2, r0, r1
   d6574:	bf08      	it	eq
   d6576:	4770      	bxeq	lr
   d6578:	b530      	push	{r4, r5, lr}
   d657a:	f04f 0500 	mov.w	r5, #0
   d657e:	e00a      	b.n	d6596 <__aeabi_l2d+0x16>

000d6580 <__aeabi_l2d>:
   d6580:	ea50 0201 	orrs.w	r2, r0, r1
   d6584:	bf08      	it	eq
   d6586:	4770      	bxeq	lr
   d6588:	b530      	push	{r4, r5, lr}
   d658a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d658e:	d502      	bpl.n	d6596 <__aeabi_l2d+0x16>
   d6590:	4240      	negs	r0, r0
   d6592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6596:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d659a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d659e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d65a2:	f43f aedc 	beq.w	d635e <__adddf3+0xe6>
   d65a6:	f04f 0203 	mov.w	r2, #3
   d65aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d65ae:	bf18      	it	ne
   d65b0:	3203      	addne	r2, #3
   d65b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d65b6:	bf18      	it	ne
   d65b8:	3203      	addne	r2, #3
   d65ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d65be:	f1c2 0320 	rsb	r3, r2, #32
   d65c2:	fa00 fc03 	lsl.w	ip, r0, r3
   d65c6:	fa20 f002 	lsr.w	r0, r0, r2
   d65ca:	fa01 fe03 	lsl.w	lr, r1, r3
   d65ce:	ea40 000e 	orr.w	r0, r0, lr
   d65d2:	fa21 f102 	lsr.w	r1, r1, r2
   d65d6:	4414      	add	r4, r2
   d65d8:	e6c1      	b.n	d635e <__adddf3+0xe6>
   d65da:	bf00      	nop

000d65dc <asctime>:
   d65dc:	4b09      	ldr	r3, [pc, #36]	; (d6604 <asctime+0x28>)
   d65de:	b570      	push	{r4, r5, r6, lr}
   d65e0:	681c      	ldr	r4, [r3, #0]
   d65e2:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d65e4:	4606      	mov	r6, r0
   d65e6:	b93d      	cbnz	r5, d65f8 <asctime+0x1c>
   d65e8:	201a      	movs	r0, #26
   d65ea:	f7fe f9f3 	bl	d49d4 <malloc>
   d65ee:	221a      	movs	r2, #26
   d65f0:	6420      	str	r0, [r4, #64]	; 0x40
   d65f2:	4629      	mov	r1, r5
   d65f4:	f000 f93f 	bl	d6876 <memset>
   d65f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d65fa:	4630      	mov	r0, r6
   d65fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6600:	f000 b802 	b.w	d6608 <asctime_r>
   d6604:	2003e228 	.word	0x2003e228

000d6608 <asctime_r>:
   d6608:	b510      	push	{r4, lr}
   d660a:	460c      	mov	r4, r1
   d660c:	6941      	ldr	r1, [r0, #20]
   d660e:	6903      	ldr	r3, [r0, #16]
   d6610:	6982      	ldr	r2, [r0, #24]
   d6612:	b086      	sub	sp, #24
   d6614:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d6618:	9104      	str	r1, [sp, #16]
   d661a:	6801      	ldr	r1, [r0, #0]
   d661c:	9103      	str	r1, [sp, #12]
   d661e:	6841      	ldr	r1, [r0, #4]
   d6620:	9102      	str	r1, [sp, #8]
   d6622:	6881      	ldr	r1, [r0, #8]
   d6624:	9101      	str	r1, [sp, #4]
   d6626:	68c1      	ldr	r1, [r0, #12]
   d6628:	9100      	str	r1, [sp, #0]
   d662a:	4907      	ldr	r1, [pc, #28]	; (d6648 <asctime_r+0x40>)
   d662c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d6630:	440b      	add	r3, r1
   d6632:	4906      	ldr	r1, [pc, #24]	; (d664c <asctime_r+0x44>)
   d6634:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d6638:	440a      	add	r2, r1
   d663a:	4620      	mov	r0, r4
   d663c:	4904      	ldr	r1, [pc, #16]	; (d6650 <asctime_r+0x48>)
   d663e:	f7fe f9e9 	bl	d4a14 <siprintf>
   d6642:	4620      	mov	r0, r4
   d6644:	b006      	add	sp, #24
   d6646:	bd10      	pop	{r4, pc}
   d6648:	000d7e61 	.word	0x000d7e61
   d664c:	000d7e4c 	.word	0x000d7e4c
   d6650:	000d7e85 	.word	0x000d7e85

000d6654 <__cxa_atexit>:
   d6654:	b510      	push	{r4, lr}
   d6656:	4c05      	ldr	r4, [pc, #20]	; (d666c <__cxa_atexit+0x18>)
   d6658:	4613      	mov	r3, r2
   d665a:	b12c      	cbz	r4, d6668 <__cxa_atexit+0x14>
   d665c:	460a      	mov	r2, r1
   d665e:	4601      	mov	r1, r0
   d6660:	2002      	movs	r0, #2
   d6662:	f3af 8000 	nop.w
   d6666:	bd10      	pop	{r4, pc}
   d6668:	4620      	mov	r0, r4
   d666a:	bd10      	pop	{r4, pc}
   d666c:	00000000 	.word	0x00000000

000d6670 <localtime>:
   d6670:	b538      	push	{r3, r4, r5, lr}
   d6672:	4b07      	ldr	r3, [pc, #28]	; (d6690 <localtime+0x20>)
   d6674:	681c      	ldr	r4, [r3, #0]
   d6676:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6678:	4605      	mov	r5, r0
   d667a:	b91b      	cbnz	r3, d6684 <localtime+0x14>
   d667c:	2024      	movs	r0, #36	; 0x24
   d667e:	f7fe f9a9 	bl	d49d4 <malloc>
   d6682:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6684:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6686:	4628      	mov	r0, r5
   d6688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d668c:	f000 b802 	b.w	d6694 <localtime_r>
   d6690:	2003e228 	.word	0x2003e228

000d6694 <localtime_r>:
   d6694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6698:	460c      	mov	r4, r1
   d669a:	4680      	mov	r8, r0
   d669c:	f001 f970 	bl	d7980 <__gettzinfo>
   d66a0:	4621      	mov	r1, r4
   d66a2:	4607      	mov	r7, r0
   d66a4:	4640      	mov	r0, r8
   d66a6:	f001 f96f 	bl	d7988 <gmtime_r>
   d66aa:	6946      	ldr	r6, [r0, #20]
   d66ac:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d66b0:	07b3      	lsls	r3, r6, #30
   d66b2:	4604      	mov	r4, r0
   d66b4:	d105      	bne.n	d66c2 <localtime_r+0x2e>
   d66b6:	2264      	movs	r2, #100	; 0x64
   d66b8:	fb96 f3f2 	sdiv	r3, r6, r2
   d66bc:	fb02 6313 	mls	r3, r2, r3, r6
   d66c0:	b94b      	cbnz	r3, d66d6 <localtime_r+0x42>
   d66c2:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d66c6:	fb96 f3f5 	sdiv	r3, r6, r5
   d66ca:	fb05 6513 	mls	r5, r5, r3, r6
   d66ce:	fab5 f385 	clz	r3, r5
   d66d2:	095b      	lsrs	r3, r3, #5
   d66d4:	e000      	b.n	d66d8 <localtime_r+0x44>
   d66d6:	2301      	movs	r3, #1
   d66d8:	4a5f      	ldr	r2, [pc, #380]	; (d6858 <localtime_r+0x1c4>)
   d66da:	2530      	movs	r5, #48	; 0x30
   d66dc:	fb05 2503 	mla	r5, r5, r3, r2
   d66e0:	f000 ff7e 	bl	d75e0 <__tz_lock>
   d66e4:	f000 ff7e 	bl	d75e4 <_tzset_unlocked>
   d66e8:	4b5c      	ldr	r3, [pc, #368]	; (d685c <localtime_r+0x1c8>)
   d66ea:	681b      	ldr	r3, [r3, #0]
   d66ec:	b1f3      	cbz	r3, d672c <localtime_r+0x98>
   d66ee:	687b      	ldr	r3, [r7, #4]
   d66f0:	429e      	cmp	r6, r3
   d66f2:	d105      	bne.n	d6700 <localtime_r+0x6c>
   d66f4:	6839      	ldr	r1, [r7, #0]
   d66f6:	f8d8 3000 	ldr.w	r3, [r8]
   d66fa:	69fa      	ldr	r2, [r7, #28]
   d66fc:	b941      	cbnz	r1, d6710 <localtime_r+0x7c>
   d66fe:	e00a      	b.n	d6716 <localtime_r+0x82>
   d6700:	4630      	mov	r0, r6
   d6702:	f000 fec5 	bl	d7490 <__tzcalc_limits>
   d6706:	2800      	cmp	r0, #0
   d6708:	d1f4      	bne.n	d66f4 <localtime_r+0x60>
   d670a:	f04f 33ff 	mov.w	r3, #4294967295
   d670e:	e00d      	b.n	d672c <localtime_r+0x98>
   d6710:	4293      	cmp	r3, r2
   d6712:	db08      	blt.n	d6726 <localtime_r+0x92>
   d6714:	e001      	b.n	d671a <localtime_r+0x86>
   d6716:	4293      	cmp	r3, r2
   d6718:	da07      	bge.n	d672a <localtime_r+0x96>
   d671a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d671c:	4293      	cmp	r3, r2
   d671e:	bfac      	ite	ge
   d6720:	2300      	movge	r3, #0
   d6722:	2301      	movlt	r3, #1
   d6724:	e002      	b.n	d672c <localtime_r+0x98>
   d6726:	2300      	movs	r3, #0
   d6728:	e000      	b.n	d672c <localtime_r+0x98>
   d672a:	2301      	movs	r3, #1
   d672c:	6223      	str	r3, [r4, #32]
   d672e:	6a23      	ldr	r3, [r4, #32]
   d6730:	2b01      	cmp	r3, #1
   d6732:	bf0c      	ite	eq
   d6734:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6736:	6a39      	ldrne	r1, [r7, #32]
   d6738:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d673c:	203c      	movs	r0, #60	; 0x3c
   d673e:	fb91 f6f3 	sdiv	r6, r1, r3
   d6742:	fb03 1316 	mls	r3, r3, r6, r1
   d6746:	6861      	ldr	r1, [r4, #4]
   d6748:	fb93 f2f0 	sdiv	r2, r3, r0
   d674c:	fb00 3012 	mls	r0, r0, r2, r3
   d6750:	6823      	ldr	r3, [r4, #0]
   d6752:	1a89      	subs	r1, r1, r2
   d6754:	68a2      	ldr	r2, [r4, #8]
   d6756:	6061      	str	r1, [r4, #4]
   d6758:	1a1b      	subs	r3, r3, r0
   d675a:	1b92      	subs	r2, r2, r6
   d675c:	2b3b      	cmp	r3, #59	; 0x3b
   d675e:	6023      	str	r3, [r4, #0]
   d6760:	60a2      	str	r2, [r4, #8]
   d6762:	dd03      	ble.n	d676c <localtime_r+0xd8>
   d6764:	3101      	adds	r1, #1
   d6766:	6061      	str	r1, [r4, #4]
   d6768:	3b3c      	subs	r3, #60	; 0x3c
   d676a:	e004      	b.n	d6776 <localtime_r+0xe2>
   d676c:	2b00      	cmp	r3, #0
   d676e:	da03      	bge.n	d6778 <localtime_r+0xe4>
   d6770:	3901      	subs	r1, #1
   d6772:	6061      	str	r1, [r4, #4]
   d6774:	333c      	adds	r3, #60	; 0x3c
   d6776:	6023      	str	r3, [r4, #0]
   d6778:	6863      	ldr	r3, [r4, #4]
   d677a:	2b3b      	cmp	r3, #59	; 0x3b
   d677c:	dd03      	ble.n	d6786 <localtime_r+0xf2>
   d677e:	3201      	adds	r2, #1
   d6780:	60a2      	str	r2, [r4, #8]
   d6782:	3b3c      	subs	r3, #60	; 0x3c
   d6784:	e004      	b.n	d6790 <localtime_r+0xfc>
   d6786:	2b00      	cmp	r3, #0
   d6788:	da03      	bge.n	d6792 <localtime_r+0xfe>
   d678a:	3a01      	subs	r2, #1
   d678c:	60a2      	str	r2, [r4, #8]
   d678e:	333c      	adds	r3, #60	; 0x3c
   d6790:	6063      	str	r3, [r4, #4]
   d6792:	68a3      	ldr	r3, [r4, #8]
   d6794:	2b17      	cmp	r3, #23
   d6796:	dd22      	ble.n	d67de <localtime_r+0x14a>
   d6798:	69e2      	ldr	r2, [r4, #28]
   d679a:	3201      	adds	r2, #1
   d679c:	61e2      	str	r2, [r4, #28]
   d679e:	69a2      	ldr	r2, [r4, #24]
   d67a0:	3201      	adds	r2, #1
   d67a2:	2a06      	cmp	r2, #6
   d67a4:	bfc8      	it	gt
   d67a6:	2200      	movgt	r2, #0
   d67a8:	61a2      	str	r2, [r4, #24]
   d67aa:	68e2      	ldr	r2, [r4, #12]
   d67ac:	3b18      	subs	r3, #24
   d67ae:	3201      	adds	r2, #1
   d67b0:	60a3      	str	r3, [r4, #8]
   d67b2:	6923      	ldr	r3, [r4, #16]
   d67b4:	60e2      	str	r2, [r4, #12]
   d67b6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d67ba:	428a      	cmp	r2, r1
   d67bc:	dd46      	ble.n	d684c <localtime_r+0x1b8>
   d67be:	3301      	adds	r3, #1
   d67c0:	2b0c      	cmp	r3, #12
   d67c2:	bf0c      	ite	eq
   d67c4:	6963      	ldreq	r3, [r4, #20]
   d67c6:	6123      	strne	r3, [r4, #16]
   d67c8:	eba2 0201 	sub.w	r2, r2, r1
   d67cc:	60e2      	str	r2, [r4, #12]
   d67ce:	bf01      	itttt	eq
   d67d0:	3301      	addeq	r3, #1
   d67d2:	2200      	moveq	r2, #0
   d67d4:	6122      	streq	r2, [r4, #16]
   d67d6:	6163      	streq	r3, [r4, #20]
   d67d8:	bf08      	it	eq
   d67da:	61e2      	streq	r2, [r4, #28]
   d67dc:	e036      	b.n	d684c <localtime_r+0x1b8>
   d67de:	2b00      	cmp	r3, #0
   d67e0:	da34      	bge.n	d684c <localtime_r+0x1b8>
   d67e2:	69e2      	ldr	r2, [r4, #28]
   d67e4:	3a01      	subs	r2, #1
   d67e6:	61e2      	str	r2, [r4, #28]
   d67e8:	69a2      	ldr	r2, [r4, #24]
   d67ea:	3a01      	subs	r2, #1
   d67ec:	bf48      	it	mi
   d67ee:	2206      	movmi	r2, #6
   d67f0:	61a2      	str	r2, [r4, #24]
   d67f2:	68e2      	ldr	r2, [r4, #12]
   d67f4:	3318      	adds	r3, #24
   d67f6:	3a01      	subs	r2, #1
   d67f8:	60e2      	str	r2, [r4, #12]
   d67fa:	60a3      	str	r3, [r4, #8]
   d67fc:	bb32      	cbnz	r2, d684c <localtime_r+0x1b8>
   d67fe:	6923      	ldr	r3, [r4, #16]
   d6800:	3b01      	subs	r3, #1
   d6802:	d401      	bmi.n	d6808 <localtime_r+0x174>
   d6804:	6123      	str	r3, [r4, #16]
   d6806:	e01d      	b.n	d6844 <localtime_r+0x1b0>
   d6808:	230b      	movs	r3, #11
   d680a:	6123      	str	r3, [r4, #16]
   d680c:	6963      	ldr	r3, [r4, #20]
   d680e:	1e5a      	subs	r2, r3, #1
   d6810:	f012 0f03 	tst.w	r2, #3
   d6814:	6162      	str	r2, [r4, #20]
   d6816:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d681a:	d105      	bne.n	d6828 <localtime_r+0x194>
   d681c:	2164      	movs	r1, #100	; 0x64
   d681e:	fb93 f2f1 	sdiv	r2, r3, r1
   d6822:	fb01 3212 	mls	r2, r1, r2, r3
   d6826:	b94a      	cbnz	r2, d683c <localtime_r+0x1a8>
   d6828:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d682c:	fb93 f2f1 	sdiv	r2, r3, r1
   d6830:	fb01 3312 	mls	r3, r1, r2, r3
   d6834:	fab3 f383 	clz	r3, r3
   d6838:	095b      	lsrs	r3, r3, #5
   d683a:	e000      	b.n	d683e <localtime_r+0x1aa>
   d683c:	2301      	movs	r3, #1
   d683e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6842:	61e3      	str	r3, [r4, #28]
   d6844:	6923      	ldr	r3, [r4, #16]
   d6846:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d684a:	60e3      	str	r3, [r4, #12]
   d684c:	f000 fec9 	bl	d75e2 <__tz_unlock>
   d6850:	4620      	mov	r0, r4
   d6852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6856:	bf00      	nop
   d6858:	000d800c 	.word	0x000d800c
   d685c:	2003e7e4 	.word	0x2003e7e4

000d6860 <memcpy>:
   d6860:	b510      	push	{r4, lr}
   d6862:	1e43      	subs	r3, r0, #1
   d6864:	440a      	add	r2, r1
   d6866:	4291      	cmp	r1, r2
   d6868:	d004      	beq.n	d6874 <memcpy+0x14>
   d686a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d686e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6872:	e7f8      	b.n	d6866 <memcpy+0x6>
   d6874:	bd10      	pop	{r4, pc}

000d6876 <memset>:
   d6876:	4402      	add	r2, r0
   d6878:	4603      	mov	r3, r0
   d687a:	4293      	cmp	r3, r2
   d687c:	d002      	beq.n	d6884 <memset+0xe>
   d687e:	f803 1b01 	strb.w	r1, [r3], #1
   d6882:	e7fa      	b.n	d687a <memset+0x4>
   d6884:	4770      	bx	lr
	...

000d6888 <srand>:
   d6888:	b538      	push	{r3, r4, r5, lr}
   d688a:	4b12      	ldr	r3, [pc, #72]	; (d68d4 <srand+0x4c>)
   d688c:	681c      	ldr	r4, [r3, #0]
   d688e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6890:	4605      	mov	r5, r0
   d6892:	b9d3      	cbnz	r3, d68ca <srand+0x42>
   d6894:	2018      	movs	r0, #24
   d6896:	f7fe f89d 	bl	d49d4 <malloc>
   d689a:	f243 330e 	movw	r3, #13070	; 0x330e
   d689e:	63a0      	str	r0, [r4, #56]	; 0x38
   d68a0:	8003      	strh	r3, [r0, #0]
   d68a2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d68a6:	8043      	strh	r3, [r0, #2]
   d68a8:	f241 2334 	movw	r3, #4660	; 0x1234
   d68ac:	8083      	strh	r3, [r0, #4]
   d68ae:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d68b2:	80c3      	strh	r3, [r0, #6]
   d68b4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d68b8:	8103      	strh	r3, [r0, #8]
   d68ba:	2305      	movs	r3, #5
   d68bc:	8143      	strh	r3, [r0, #10]
   d68be:	230b      	movs	r3, #11
   d68c0:	8183      	strh	r3, [r0, #12]
   d68c2:	2201      	movs	r2, #1
   d68c4:	2300      	movs	r3, #0
   d68c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d68ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d68cc:	2200      	movs	r2, #0
   d68ce:	611d      	str	r5, [r3, #16]
   d68d0:	615a      	str	r2, [r3, #20]
   d68d2:	bd38      	pop	{r3, r4, r5, pc}
   d68d4:	2003e228 	.word	0x2003e228

000d68d8 <strcmp>:
   d68d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d68dc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d68e0:	2a01      	cmp	r2, #1
   d68e2:	bf28      	it	cs
   d68e4:	429a      	cmpcs	r2, r3
   d68e6:	d0f7      	beq.n	d68d8 <strcmp>
   d68e8:	1ad0      	subs	r0, r2, r3
   d68ea:	4770      	bx	lr

000d68ec <strcpy>:
   d68ec:	4603      	mov	r3, r0
   d68ee:	f811 2b01 	ldrb.w	r2, [r1], #1
   d68f2:	f803 2b01 	strb.w	r2, [r3], #1
   d68f6:	2a00      	cmp	r2, #0
   d68f8:	d1f9      	bne.n	d68ee <strcpy+0x2>
   d68fa:	4770      	bx	lr

000d68fc <iso_year_adjust>:
   d68fc:	6941      	ldr	r1, [r0, #20]
   d68fe:	078b      	lsls	r3, r1, #30
   d6900:	b510      	push	{r4, lr}
   d6902:	d10c      	bne.n	d691e <iso_year_adjust+0x22>
   d6904:	2900      	cmp	r1, #0
   d6906:	f240 736c 	movw	r3, #1900	; 0x76c
   d690a:	bfa8      	it	ge
   d690c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d6910:	440b      	add	r3, r1
   d6912:	2464      	movs	r4, #100	; 0x64
   d6914:	fb93 f2f4 	sdiv	r2, r3, r4
   d6918:	fb04 3312 	mls	r3, r4, r2, r3
   d691c:	b983      	cbnz	r3, d6940 <iso_year_adjust+0x44>
   d691e:	2900      	cmp	r1, #0
   d6920:	f240 736c 	movw	r3, #1900	; 0x76c
   d6924:	bfa8      	it	ge
   d6926:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d692a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d692e:	440b      	add	r3, r1
   d6930:	fb93 f1f2 	sdiv	r1, r3, r2
   d6934:	fb02 3311 	mls	r3, r2, r1, r3
   d6938:	fab3 f283 	clz	r2, r3
   d693c:	0952      	lsrs	r2, r2, #5
   d693e:	e000      	b.n	d6942 <iso_year_adjust+0x46>
   d6940:	2201      	movs	r2, #1
   d6942:	6983      	ldr	r3, [r0, #24]
   d6944:	69c1      	ldr	r1, [r0, #28]
   d6946:	005b      	lsls	r3, r3, #1
   d6948:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d694c:	4413      	add	r3, r2
   d694e:	2b21      	cmp	r3, #33	; 0x21
   d6950:	dc0e      	bgt.n	d6970 <iso_year_adjust+0x74>
   d6952:	2b20      	cmp	r3, #32
   d6954:	da2f      	bge.n	d69b6 <iso_year_adjust+0xba>
   d6956:	2b0d      	cmp	r3, #13
   d6958:	dc02      	bgt.n	d6960 <iso_year_adjust+0x64>
   d695a:	2b0a      	cmp	r3, #10
   d695c:	db05      	blt.n	d696a <iso_year_adjust+0x6e>
   d695e:	e02a      	b.n	d69b6 <iso_year_adjust+0xba>
   d6960:	2b10      	cmp	r3, #16
   d6962:	db26      	blt.n	d69b2 <iso_year_adjust+0xb6>
   d6964:	2b11      	cmp	r3, #17
   d6966:	dd26      	ble.n	d69b6 <iso_year_adjust+0xba>
   d6968:	3b1c      	subs	r3, #28
   d696a:	2b01      	cmp	r3, #1
   d696c:	d923      	bls.n	d69b6 <iso_year_adjust+0xba>
   d696e:	e020      	b.n	d69b2 <iso_year_adjust+0xb6>
   d6970:	f241 62c6 	movw	r2, #5830	; 0x16c6
   d6974:	4293      	cmp	r3, r2
   d6976:	dc0e      	bgt.n	d6996 <iso_year_adjust+0x9a>
   d6978:	f241 62c2 	movw	r2, #5826	; 0x16c2
   d697c:	4293      	cmp	r3, r2
   d697e:	da16      	bge.n	d69ae <iso_year_adjust+0xb2>
   d6980:	f241 62a2 	movw	r2, #5794	; 0x16a2
   d6984:	4293      	cmp	r3, r2
   d6986:	d012      	beq.n	d69ae <iso_year_adjust+0xb2>
   d6988:	db13      	blt.n	d69b2 <iso_year_adjust+0xb6>
   d698a:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   d698e:	3b12      	subs	r3, #18
   d6990:	2b02      	cmp	r3, #2
   d6992:	d90c      	bls.n	d69ae <iso_year_adjust+0xb2>
   d6994:	e00d      	b.n	d69b2 <iso_year_adjust+0xb6>
   d6996:	f241 62d5 	movw	r2, #5845	; 0x16d5
   d699a:	4293      	cmp	r3, r2
   d699c:	d007      	beq.n	d69ae <iso_year_adjust+0xb2>
   d699e:	f241 62d7 	movw	r2, #5847	; 0x16d7
   d69a2:	4293      	cmp	r3, r2
   d69a4:	d003      	beq.n	d69ae <iso_year_adjust+0xb2>
   d69a6:	f241 62d3 	movw	r2, #5843	; 0x16d3
   d69aa:	4293      	cmp	r3, r2
   d69ac:	d101      	bne.n	d69b2 <iso_year_adjust+0xb6>
   d69ae:	2001      	movs	r0, #1
   d69b0:	bd10      	pop	{r4, pc}
   d69b2:	2000      	movs	r0, #0
   d69b4:	bd10      	pop	{r4, pc}
   d69b6:	f04f 30ff 	mov.w	r0, #4294967295
   d69ba:	bd10      	pop	{r4, pc}

000d69bc <strftime>:
   d69bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69c0:	b093      	sub	sp, #76	; 0x4c
   d69c2:	460e      	mov	r6, r1
   d69c4:	461d      	mov	r5, r3
   d69c6:	4607      	mov	r7, r0
   d69c8:	4691      	mov	r9, r2
   d69ca:	f000 fd51 	bl	d7470 <__get_current_time_locale>
   d69ce:	2300      	movs	r3, #0
   d69d0:	9306      	str	r3, [sp, #24]
   d69d2:	461c      	mov	r4, r3
   d69d4:	1e73      	subs	r3, r6, #1
   d69d6:	9003      	str	r0, [sp, #12]
   d69d8:	9302      	str	r3, [sp, #8]
   d69da:	f899 3000 	ldrb.w	r3, [r9]
   d69de:	2b00      	cmp	r3, #0
   d69e0:	f000 8492 	beq.w	d7308 <strftime+0x94c>
   d69e4:	2b25      	cmp	r3, #37	; 0x25
   d69e6:	d008      	beq.n	d69fa <strftime+0x3e>
   d69e8:	9a02      	ldr	r2, [sp, #8]
   d69ea:	4294      	cmp	r4, r2
   d69ec:	f080 8490 	bcs.w	d7310 <strftime+0x954>
   d69f0:	553b      	strb	r3, [r7, r4]
   d69f2:	f109 0901 	add.w	r9, r9, #1
   d69f6:	3401      	adds	r4, #1
   d69f8:	e7ef      	b.n	d69da <strftime+0x1e>
   d69fa:	f899 a001 	ldrb.w	sl, [r9, #1]
   d69fe:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   d6a02:	d007      	beq.n	d6a14 <strftime+0x58>
   d6a04:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d6a08:	d004      	beq.n	d6a14 <strftime+0x58>
   d6a0a:	f109 0901 	add.w	r9, r9, #1
   d6a0e:	f04f 0a00 	mov.w	sl, #0
   d6a12:	e001      	b.n	d6a18 <strftime+0x5c>
   d6a14:	f109 0902 	add.w	r9, r9, #2
   d6a18:	f899 3000 	ldrb.w	r3, [r9]
   d6a1c:	3b31      	subs	r3, #49	; 0x31
   d6a1e:	2b08      	cmp	r3, #8
   d6a20:	d808      	bhi.n	d6a34 <strftime+0x78>
   d6a22:	4648      	mov	r0, r9
   d6a24:	220a      	movs	r2, #10
   d6a26:	a90a      	add	r1, sp, #40	; 0x28
   d6a28:	f000 fd18 	bl	d745c <strtoul>
   d6a2c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d6a30:	4680      	mov	r8, r0
   d6a32:	e001      	b.n	d6a38 <strftime+0x7c>
   d6a34:	f04f 0800 	mov.w	r8, #0
   d6a38:	f899 3000 	ldrb.w	r3, [r9]
   d6a3c:	2b45      	cmp	r3, #69	; 0x45
   d6a3e:	d001      	beq.n	d6a44 <strftime+0x88>
   d6a40:	2b4f      	cmp	r3, #79	; 0x4f
   d6a42:	d101      	bne.n	d6a48 <strftime+0x8c>
   d6a44:	f109 0901 	add.w	r9, r9, #1
   d6a48:	f899 0000 	ldrb.w	r0, [r9]
   d6a4c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   d6a50:	2b55      	cmp	r3, #85	; 0x55
   d6a52:	f200 845d 	bhi.w	d7310 <strftime+0x954>
   d6a56:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6a5a:	044a      	.short	0x044a
   d6a5c:	045b045b 	.word	0x045b045b
   d6a60:	045b045b 	.word	0x045b045b
   d6a64:	045b045b 	.word	0x045b045b
   d6a68:	045b045b 	.word	0x045b045b
   d6a6c:	045b045b 	.word	0x045b045b
   d6a70:	045b045b 	.word	0x045b045b
   d6a74:	045b045b 	.word	0x045b045b
   d6a78:	045b045b 	.word	0x045b045b
   d6a7c:	045b045b 	.word	0x045b045b
   d6a80:	045b045b 	.word	0x045b045b
   d6a84:	045b045b 	.word	0x045b045b
   d6a88:	045b045b 	.word	0x045b045b
   d6a8c:	045b045b 	.word	0x045b045b
   d6a90:	006f045b 	.word	0x006f045b
   d6a94:	00d400a1 	.word	0x00d400a1
   d6a98:	045b011a 	.word	0x045b011a
   d6a9c:	01a0013f 	.word	0x01a0013f
   d6aa0:	022d0226 	.word	0x022d0226
   d6aa4:	045b045b 	.word	0x045b045b
   d6aa8:	0260045b 	.word	0x0260045b
   d6aac:	045b045b 	.word	0x045b045b
   d6ab0:	045b0268 	.word	0x045b0268
   d6ab4:	031d0297 	.word	0x031d0297
   d6ab8:	033b0325 	.word	0x033b0325
   d6abc:	03860343 	.word	0x03860343
   d6ac0:	03a000c6 	.word	0x03a000c6
   d6ac4:	045b041f 	.word	0x045b041f
   d6ac8:	045b045b 	.word	0x045b045b
   d6acc:	045b045b 	.word	0x045b045b
   d6ad0:	0056045b 	.word	0x0056045b
   d6ad4:	00ba0089 	.word	0x00ba0089
   d6ad8:	010c010c 	.word	0x010c010c
   d6adc:	0171045b 	.word	0x0171045b
   d6ae0:	045b0089 	.word	0x045b0089
   d6ae4:	0226023d 	.word	0x0226023d
   d6ae8:	025d022d 	.word	0x025d022d
   d6aec:	045b0262 	.word	0x045b0262
   d6af0:	045b0268 	.word	0x045b0268
   d6af4:	029c00be 	.word	0x029c00be
   d6af8:	032e031f 	.word	0x032e031f
   d6afc:	037f045b 	.word	0x037f045b
   d6b00:	039200c2 	.word	0x039200c2
   d6b04:	03e7      	.short	0x03e7
   d6b06:	69ab      	ldr	r3, [r5, #24]
   d6b08:	9a03      	ldr	r2, [sp, #12]
   d6b0a:	3318      	adds	r3, #24
   d6b0c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d6b10:	4640      	mov	r0, r8
   d6b12:	f000 fc07 	bl	d7324 <strlen>
   d6b16:	f108 38ff 	add.w	r8, r8, #4294967295
   d6b1a:	193b      	adds	r3, r7, r4
   d6b1c:	4420      	add	r0, r4
   d6b1e:	4284      	cmp	r4, r0
   d6b20:	f000 83eb 	beq.w	d72fa <strftime+0x93e>
   d6b24:	9a02      	ldr	r2, [sp, #8]
   d6b26:	4294      	cmp	r4, r2
   d6b28:	f080 83f2 	bcs.w	d7310 <strftime+0x954>
   d6b2c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6b30:	f803 2b01 	strb.w	r2, [r3], #1
   d6b34:	3401      	adds	r4, #1
   d6b36:	e7f2      	b.n	d6b1e <strftime+0x162>
   d6b38:	69ab      	ldr	r3, [r5, #24]
   d6b3a:	9a03      	ldr	r2, [sp, #12]
   d6b3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d6b40:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   d6b44:	4640      	mov	r0, r8
   d6b46:	f000 fbed 	bl	d7324 <strlen>
   d6b4a:	f108 38ff 	add.w	r8, r8, #4294967295
   d6b4e:	193b      	adds	r3, r7, r4
   d6b50:	4420      	add	r0, r4
   d6b52:	4284      	cmp	r4, r0
   d6b54:	f000 83d1 	beq.w	d72fa <strftime+0x93e>
   d6b58:	9a02      	ldr	r2, [sp, #8]
   d6b5a:	4294      	cmp	r4, r2
   d6b5c:	f080 83d8 	bcs.w	d7310 <strftime+0x954>
   d6b60:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6b64:	f803 2b01 	strb.w	r2, [r3], #1
   d6b68:	3401      	adds	r4, #1
   d6b6a:	e7f2      	b.n	d6b52 <strftime+0x196>
   d6b6c:	692b      	ldr	r3, [r5, #16]
   d6b6e:	9a03      	ldr	r2, [sp, #12]
   d6b70:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d6b74:	4640      	mov	r0, r8
   d6b76:	f000 fbd5 	bl	d7324 <strlen>
   d6b7a:	f108 38ff 	add.w	r8, r8, #4294967295
   d6b7e:	193b      	adds	r3, r7, r4
   d6b80:	4420      	add	r0, r4
   d6b82:	4284      	cmp	r4, r0
   d6b84:	f000 83b9 	beq.w	d72fa <strftime+0x93e>
   d6b88:	9a02      	ldr	r2, [sp, #8]
   d6b8a:	4294      	cmp	r4, r2
   d6b8c:	f080 83c0 	bcs.w	d7310 <strftime+0x954>
   d6b90:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6b94:	f803 2b01 	strb.w	r2, [r3], #1
   d6b98:	3401      	adds	r4, #1
   d6b9a:	e7f2      	b.n	d6b82 <strftime+0x1c6>
   d6b9c:	692b      	ldr	r3, [r5, #16]
   d6b9e:	9a03      	ldr	r2, [sp, #12]
   d6ba0:	330c      	adds	r3, #12
   d6ba2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d6ba6:	4640      	mov	r0, r8
   d6ba8:	f000 fbbc 	bl	d7324 <strlen>
   d6bac:	f108 38ff 	add.w	r8, r8, #4294967295
   d6bb0:	193b      	adds	r3, r7, r4
   d6bb2:	4420      	add	r0, r4
   d6bb4:	4284      	cmp	r4, r0
   d6bb6:	f000 83a0 	beq.w	d72fa <strftime+0x93e>
   d6bba:	9a02      	ldr	r2, [sp, #8]
   d6bbc:	4294      	cmp	r4, r2
   d6bbe:	f080 83a7 	bcs.w	d7310 <strftime+0x954>
   d6bc2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6bc6:	f803 2b01 	strb.w	r2, [r3], #1
   d6bca:	3401      	adds	r4, #1
   d6bcc:	e7f2      	b.n	d6bb4 <strftime+0x1f8>
   d6bce:	9b03      	ldr	r3, [sp, #12]
   d6bd0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   d6bd4:	e00a      	b.n	d6bec <strftime+0x230>
   d6bd6:	9b03      	ldr	r3, [sp, #12]
   d6bd8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   d6bdc:	e006      	b.n	d6bec <strftime+0x230>
   d6bde:	9b03      	ldr	r3, [sp, #12]
   d6be0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   d6be4:	e002      	b.n	d6bec <strftime+0x230>
   d6be6:	9b03      	ldr	r3, [sp, #12]
   d6be8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   d6bec:	4640      	mov	r0, r8
   d6bee:	f000 fb99 	bl	d7324 <strlen>
   d6bf2:	f898 3000 	ldrb.w	r3, [r8]
   d6bf6:	2b00      	cmp	r3, #0
   d6bf8:	f000 837f 	beq.w	d72fa <strftime+0x93e>
   d6bfc:	462b      	mov	r3, r5
   d6bfe:	4642      	mov	r2, r8
   d6c00:	e093      	b.n	d6d2a <strftime+0x36e>
   d6c02:	49b6      	ldr	r1, [pc, #728]	; (d6edc <strftime+0x520>)
   d6c04:	f8d5 b014 	ldr.w	fp, [r5, #20]
   d6c08:	458b      	cmp	fp, r1
   d6c0a:	bfac      	ite	ge
   d6c0c:	2100      	movge	r1, #0
   d6c0e:	2101      	movlt	r1, #1
   d6c10:	f1bb 0f00 	cmp.w	fp, #0
   d6c14:	db04      	blt.n	d6c20 <strftime+0x264>
   d6c16:	2064      	movs	r0, #100	; 0x64
   d6c18:	fb9b f0f0 	sdiv	r0, fp, r0
   d6c1c:	3013      	adds	r0, #19
   d6c1e:	e008      	b.n	d6c32 <strftime+0x276>
   d6c20:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   d6c24:	9107      	str	r1, [sp, #28]
   d6c26:	f000 fe63 	bl	d78f0 <abs>
   d6c2a:	9907      	ldr	r1, [sp, #28]
   d6c2c:	2364      	movs	r3, #100	; 0x64
   d6c2e:	fb90 f0f3 	sdiv	r0, r0, r3
   d6c32:	f1ba 0f00 	cmp.w	sl, #0
   d6c36:	d008      	beq.n	d6c4a <strftime+0x28e>
   d6c38:	2863      	cmp	r0, #99	; 0x63
   d6c3a:	dd09      	ble.n	d6c50 <strftime+0x294>
   d6c3c:	4ba8      	ldr	r3, [pc, #672]	; (d6ee0 <strftime+0x524>)
   d6c3e:	4aa9      	ldr	r2, [pc, #676]	; (d6ee4 <strftime+0x528>)
   d6c40:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d6c44:	bf18      	it	ne
   d6c46:	4613      	movne	r3, r2
   d6c48:	e003      	b.n	d6c52 <strftime+0x296>
   d6c4a:	4ba6      	ldr	r3, [pc, #664]	; (d6ee4 <strftime+0x528>)
   d6c4c:	4aa6      	ldr	r2, [pc, #664]	; (d6ee8 <strftime+0x52c>)
   d6c4e:	e001      	b.n	d6c54 <strftime+0x298>
   d6c50:	4ba4      	ldr	r3, [pc, #656]	; (d6ee4 <strftime+0x528>)
   d6c52:	4aa6      	ldr	r2, [pc, #664]	; (d6eec <strftime+0x530>)
   d6c54:	9001      	str	r0, [sp, #4]
   d6c56:	f1b8 0f01 	cmp.w	r8, #1
   d6c5a:	bf98      	it	ls
   d6c5c:	f04f 0802 	movls.w	r8, #2
   d6c60:	ebc1 0108 	rsb	r1, r1, r8
   d6c64:	9100      	str	r1, [sp, #0]
   d6c66:	489d      	ldr	r0, [pc, #628]	; (d6edc <strftime+0x520>)
   d6c68:	49a1      	ldr	r1, [pc, #644]	; (d6ef0 <strftime+0x534>)
   d6c6a:	4583      	cmp	fp, r0
   d6c6c:	bfb8      	it	lt
   d6c6e:	460b      	movlt	r3, r1
   d6c70:	e21e      	b.n	d70b0 <strftime+0x6f4>
   d6c72:	4aa0      	ldr	r2, [pc, #640]	; (d6ef4 <strftime+0x538>)
   d6c74:	49a0      	ldr	r1, [pc, #640]	; (d6ef8 <strftime+0x53c>)
   d6c76:	68eb      	ldr	r3, [r5, #12]
   d6c78:	2864      	cmp	r0, #100	; 0x64
   d6c7a:	bf08      	it	eq
   d6c7c:	460a      	moveq	r2, r1
   d6c7e:	1b31      	subs	r1, r6, r4
   d6c80:	1938      	adds	r0, r7, r4
   d6c82:	f7fd fedf 	bl	d4a44 <sniprintf>
   d6c86:	2800      	cmp	r0, #0
   d6c88:	f280 8302 	bge.w	d7290 <strftime+0x8d4>
   d6c8c:	e340      	b.n	d7310 <strftime+0x954>
   d6c8e:	6968      	ldr	r0, [r5, #20]
   d6c90:	692b      	ldr	r3, [r5, #16]
   d6c92:	2800      	cmp	r0, #0
   d6c94:	f103 0b01 	add.w	fp, r3, #1
   d6c98:	eb07 0804 	add.w	r8, r7, r4
   d6c9c:	ebc4 0a06 	rsb	sl, r4, r6
   d6ca0:	68eb      	ldr	r3, [r5, #12]
   d6ca2:	db05      	blt.n	d6cb0 <strftime+0x2f4>
   d6ca4:	2264      	movs	r2, #100	; 0x64
   d6ca6:	fb90 f1f2 	sdiv	r1, r0, r2
   d6caa:	fb02 0011 	mls	r0, r2, r1, r0
   d6cae:	e00a      	b.n	d6cc6 <strftime+0x30a>
   d6cb0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6cb4:	9307      	str	r3, [sp, #28]
   d6cb6:	f000 fe1b 	bl	d78f0 <abs>
   d6cba:	2264      	movs	r2, #100	; 0x64
   d6cbc:	9b07      	ldr	r3, [sp, #28]
   d6cbe:	fb90 f1f2 	sdiv	r1, r0, r2
   d6cc2:	fb01 0012 	mls	r0, r1, r2, r0
   d6cc6:	4a8d      	ldr	r2, [pc, #564]	; (d6efc <strftime+0x540>)
   d6cc8:	9001      	str	r0, [sp, #4]
   d6cca:	9300      	str	r3, [sp, #0]
   d6ccc:	4651      	mov	r1, sl
   d6cce:	465b      	mov	r3, fp
   d6cd0:	4640      	mov	r0, r8
   d6cd2:	f7fd feb7 	bl	d4a44 <sniprintf>
   d6cd6:	e7d6      	b.n	d6c86 <strftime+0x2ca>
   d6cd8:	2325      	movs	r3, #37	; 0x25
   d6cda:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d6cde:	f1ba 0f00 	cmp.w	sl, #0
   d6ce2:	d007      	beq.n	d6cf4 <strftime+0x338>
   d6ce4:	f1b8 0f05 	cmp.w	r8, #5
   d6ce8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   d6cec:	bf98      	it	ls
   d6cee:	f04f 0806 	movls.w	r8, #6
   d6cf2:	e004      	b.n	d6cfe <strftime+0x342>
   d6cf4:	232b      	movs	r3, #43	; 0x2b
   d6cf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   d6cfa:	f04f 080a 	mov.w	r8, #10
   d6cfe:	f1b8 0306 	subs.w	r3, r8, #6
   d6d02:	d102      	bne.n	d6d0a <strftime+0x34e>
   d6d04:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d6d08:	e00a      	b.n	d6d20 <strftime+0x364>
   d6d0a:	4a7d      	ldr	r2, [pc, #500]	; (d6f00 <strftime+0x544>)
   d6d0c:	211e      	movs	r1, #30
   d6d0e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d6d12:	f7fd fe97 	bl	d4a44 <sniprintf>
   d6d16:	2800      	cmp	r0, #0
   d6d18:	ddf4      	ble.n	d6d04 <strftime+0x348>
   d6d1a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d6d1e:	4418      	add	r0, r3
   d6d20:	4978      	ldr	r1, [pc, #480]	; (d6f04 <strftime+0x548>)
   d6d22:	f7ff fde3 	bl	d68ec <strcpy>
   d6d26:	462b      	mov	r3, r5
   d6d28:	aa0a      	add	r2, sp, #40	; 0x28
   d6d2a:	1b31      	subs	r1, r6, r4
   d6d2c:	1938      	adds	r0, r7, r4
   d6d2e:	f7ff fe45 	bl	d69bc <strftime>
   d6d32:	2800      	cmp	r0, #0
   d6d34:	f340 82ec 	ble.w	d7310 <strftime+0x954>
   d6d38:	4404      	add	r4, r0
   d6d3a:	e2de      	b.n	d72fa <strftime+0x93e>
   d6d3c:	4628      	mov	r0, r5
   d6d3e:	f7ff fddd 	bl	d68fc <iso_year_adjust>
   d6d42:	4680      	mov	r8, r0
   d6d44:	6968      	ldr	r0, [r5, #20]
   d6d46:	2800      	cmp	r0, #0
   d6d48:	db05      	blt.n	d6d56 <strftime+0x39a>
   d6d4a:	2264      	movs	r2, #100	; 0x64
   d6d4c:	fb90 f1f2 	sdiv	r1, r0, r2
   d6d50:	fb02 0011 	mls	r0, r2, r1, r0
   d6d54:	e008      	b.n	d6d68 <strftime+0x3ac>
   d6d56:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6d5a:	f000 fdc9 	bl	d78f0 <abs>
   d6d5e:	2264      	movs	r2, #100	; 0x64
   d6d60:	fb90 f3f2 	sdiv	r3, r0, r2
   d6d64:	fb03 0012 	mls	r0, r3, r2, r0
   d6d68:	f1b8 0f00 	cmp.w	r8, #0
   d6d6c:	da06      	bge.n	d6d7c <strftime+0x3c0>
   d6d6e:	696a      	ldr	r2, [r5, #20]
   d6d70:	4b65      	ldr	r3, [pc, #404]	; (d6f08 <strftime+0x54c>)
   d6d72:	429a      	cmp	r2, r3
   d6d74:	bfb8      	it	lt
   d6d76:	f04f 0801 	movlt.w	r8, #1
   d6d7a:	e006      	b.n	d6d8a <strftime+0x3ce>
   d6d7c:	d005      	beq.n	d6d8a <strftime+0x3ce>
   d6d7e:	696a      	ldr	r2, [r5, #20]
   d6d80:	4b56      	ldr	r3, [pc, #344]	; (d6edc <strftime+0x520>)
   d6d82:	429a      	cmp	r2, r3
   d6d84:	bfb8      	it	lt
   d6d86:	f04f 38ff 	movlt.w	r8, #4294967295
   d6d8a:	2364      	movs	r3, #100	; 0x64
   d6d8c:	4440      	add	r0, r8
   d6d8e:	fb90 f2f3 	sdiv	r2, r0, r3
   d6d92:	fb03 0012 	mls	r0, r3, r2, r0
   d6d96:	4418      	add	r0, r3
   d6d98:	e1f9      	b.n	d718e <strftime+0x7d2>
   d6d9a:	4b50      	ldr	r3, [pc, #320]	; (d6edc <strftime+0x520>)
   d6d9c:	6969      	ldr	r1, [r5, #20]
   d6d9e:	9108      	str	r1, [sp, #32]
   d6da0:	4299      	cmp	r1, r3
   d6da2:	bfac      	ite	ge
   d6da4:	2300      	movge	r3, #0
   d6da6:	2301      	movlt	r3, #1
   d6da8:	4628      	mov	r0, r5
   d6daa:	9307      	str	r3, [sp, #28]
   d6dac:	f7ff fda6 	bl	d68fc <iso_year_adjust>
   d6db0:	9908      	ldr	r1, [sp, #32]
   d6db2:	2900      	cmp	r1, #0
   d6db4:	4683      	mov	fp, r0
   d6db6:	db04      	blt.n	d6dc2 <strftime+0x406>
   d6db8:	2364      	movs	r3, #100	; 0x64
   d6dba:	fb91 f3f3 	sdiv	r3, r1, r3
   d6dbe:	3313      	adds	r3, #19
   d6dc0:	e008      	b.n	d6dd4 <strftime+0x418>
   d6dc2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   d6dc6:	9108      	str	r1, [sp, #32]
   d6dc8:	f000 fd92 	bl	d78f0 <abs>
   d6dcc:	9908      	ldr	r1, [sp, #32]
   d6dce:	2364      	movs	r3, #100	; 0x64
   d6dd0:	fb90 f3f3 	sdiv	r3, r0, r3
   d6dd4:	6968      	ldr	r0, [r5, #20]
   d6dd6:	2800      	cmp	r0, #0
   d6dd8:	db06      	blt.n	d6de8 <strftime+0x42c>
   d6dda:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d6dde:	fb90 fcfe 	sdiv	ip, r0, lr
   d6de2:	fb0e 001c 	mls	r0, lr, ip, r0
   d6de6:	e00d      	b.n	d6e04 <strftime+0x448>
   d6de8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d6dec:	9109      	str	r1, [sp, #36]	; 0x24
   d6dee:	9308      	str	r3, [sp, #32]
   d6df0:	f000 fd7e 	bl	d78f0 <abs>
   d6df4:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d6df8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6dfa:	9b08      	ldr	r3, [sp, #32]
   d6dfc:	fb90 fcfe 	sdiv	ip, r0, lr
   d6e00:	fb0c 001e 	mls	r0, ip, lr, r0
   d6e04:	f1bb 0f00 	cmp.w	fp, #0
   d6e08:	da08      	bge.n	d6e1c <strftime+0x460>
   d6e0a:	6969      	ldr	r1, [r5, #20]
   d6e0c:	4a3e      	ldr	r2, [pc, #248]	; (d6f08 <strftime+0x54c>)
   d6e0e:	4291      	cmp	r1, r2
   d6e10:	da0a      	bge.n	d6e28 <strftime+0x46c>
   d6e12:	f04f 0b01 	mov.w	fp, #1
   d6e16:	f8cd b01c 	str.w	fp, [sp, #28]
   d6e1a:	e005      	b.n	d6e28 <strftime+0x46c>
   d6e1c:	d004      	beq.n	d6e28 <strftime+0x46c>
   d6e1e:	4a2f      	ldr	r2, [pc, #188]	; (d6edc <strftime+0x520>)
   d6e20:	4291      	cmp	r1, r2
   d6e22:	bfb8      	it	lt
   d6e24:	f04f 3bff 	movlt.w	fp, #4294967295
   d6e28:	eb0b 0200 	add.w	r2, fp, r0
   d6e2c:	1c50      	adds	r0, r2, #1
   d6e2e:	d102      	bne.n	d6e36 <strftime+0x47a>
   d6e30:	3b01      	subs	r3, #1
   d6e32:	2263      	movs	r2, #99	; 0x63
   d6e34:	e003      	b.n	d6e3e <strftime+0x482>
   d6e36:	2a64      	cmp	r2, #100	; 0x64
   d6e38:	bf04      	itt	eq
   d6e3a:	3301      	addeq	r3, #1
   d6e3c:	2200      	moveq	r2, #0
   d6e3e:	2064      	movs	r0, #100	; 0x64
   d6e40:	fb00 2303 	mla	r3, r0, r3, r2
   d6e44:	9a07      	ldr	r2, [sp, #28]
   d6e46:	b142      	cbz	r2, d6e5a <strftime+0x49e>
   d6e48:	222d      	movs	r2, #45	; 0x2d
   d6e4a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d6e4e:	f1b8 0f00 	cmp.w	r8, #0
   d6e52:	d013      	beq.n	d6e7c <strftime+0x4c0>
   d6e54:	f108 38ff 	add.w	r8, r8, #4294967295
   d6e58:	e010      	b.n	d6e7c <strftime+0x4c0>
   d6e5a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d6e5e:	d110      	bne.n	d6e82 <strftime+0x4c6>
   d6e60:	f242 720f 	movw	r2, #9999	; 0x270f
   d6e64:	4293      	cmp	r3, r2
   d6e66:	d90c      	bls.n	d6e82 <strftime+0x4c6>
   d6e68:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d6e6c:	f1b8 0f00 	cmp.w	r8, #0
   d6e70:	d1f0      	bne.n	d6e54 <strftime+0x498>
   d6e72:	aa12      	add	r2, sp, #72	; 0x48
   d6e74:	2125      	movs	r1, #37	; 0x25
   d6e76:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   d6e7a:	e00a      	b.n	d6e92 <strftime+0x4d6>
   d6e7c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   d6e80:	e000      	b.n	d6e84 <strftime+0x4c8>
   d6e82:	aa0a      	add	r2, sp, #40	; 0x28
   d6e84:	2125      	movs	r1, #37	; 0x25
   d6e86:	7011      	strb	r1, [r2, #0]
   d6e88:	f1ba 0f00 	cmp.w	sl, #0
   d6e8c:	d101      	bne.n	d6e92 <strftime+0x4d6>
   d6e8e:	1c50      	adds	r0, r2, #1
   d6e90:	e002      	b.n	d6e98 <strftime+0x4dc>
   d6e92:	2130      	movs	r1, #48	; 0x30
   d6e94:	1c90      	adds	r0, r2, #2
   d6e96:	7051      	strb	r1, [r2, #1]
   d6e98:	491c      	ldr	r1, [pc, #112]	; (d6f0c <strftime+0x550>)
   d6e9a:	9307      	str	r3, [sp, #28]
   d6e9c:	f7ff fd26 	bl	d68ec <strcpy>
   d6ea0:	9b07      	ldr	r3, [sp, #28]
   d6ea2:	9300      	str	r3, [sp, #0]
   d6ea4:	e1ad      	b.n	d7202 <strftime+0x846>
   d6ea6:	4a14      	ldr	r2, [pc, #80]	; (d6ef8 <strftime+0x53c>)
   d6ea8:	4912      	ldr	r1, [pc, #72]	; (d6ef4 <strftime+0x538>)
   d6eaa:	68ab      	ldr	r3, [r5, #8]
   d6eac:	286b      	cmp	r0, #107	; 0x6b
   d6eae:	bf08      	it	eq
   d6eb0:	460a      	moveq	r2, r1
   d6eb2:	e6e4      	b.n	d6c7e <strftime+0x2c2>
   d6eb4:	68a9      	ldr	r1, [r5, #8]
   d6eb6:	230c      	movs	r3, #12
   d6eb8:	b131      	cbz	r1, d6ec8 <strftime+0x50c>
   d6eba:	4299      	cmp	r1, r3
   d6ebc:	bf0e      	itee	eq
   d6ebe:	460b      	moveq	r3, r1
   d6ec0:	fb91 f2f3 	sdivne	r2, r1, r3
   d6ec4:	fb03 1312 	mlsne	r3, r3, r2, r1
   d6ec8:	4a0a      	ldr	r2, [pc, #40]	; (d6ef4 <strftime+0x538>)
   d6eca:	490b      	ldr	r1, [pc, #44]	; (d6ef8 <strftime+0x53c>)
   d6ecc:	2849      	cmp	r0, #73	; 0x49
   d6ece:	bf08      	it	eq
   d6ed0:	460a      	moveq	r2, r1
   d6ed2:	e6d4      	b.n	d6c7e <strftime+0x2c2>
   d6ed4:	69eb      	ldr	r3, [r5, #28]
   d6ed6:	4a0e      	ldr	r2, [pc, #56]	; (d6f10 <strftime+0x554>)
   d6ed8:	3301      	adds	r3, #1
   d6eda:	e6d0      	b.n	d6c7e <strftime+0x2c2>
   d6edc:	fffff894 	.word	0xfffff894
   d6ee0:	000d807b 	.word	0x000d807b
   d6ee4:	000d7c26 	.word	0x000d7c26
   d6ee8:	000d806c 	.word	0x000d806c
   d6eec:	000d8073 	.word	0x000d8073
   d6ef0:	000d807d 	.word	0x000d807d
   d6ef4:	000d807f 	.word	0x000d807f
   d6ef8:	000d808d 	.word	0x000d808d
   d6efc:	000d8083 	.word	0x000d8083
   d6f00:	000d8092 	.word	0x000d8092
   d6f04:	000d8096 	.word	0x000d8096
   d6f08:	fffff895 	.word	0xfffff895
   d6f0c:	000d809e 	.word	0x000d809e
   d6f10:	000d80a2 	.word	0x000d80a2
   d6f14:	692b      	ldr	r3, [r5, #16]
   d6f16:	3301      	adds	r3, #1
   d6f18:	e13d      	b.n	d7196 <strftime+0x7da>
   d6f1a:	686b      	ldr	r3, [r5, #4]
   d6f1c:	e13b      	b.n	d7196 <strftime+0x7da>
   d6f1e:	9b02      	ldr	r3, [sp, #8]
   d6f20:	429c      	cmp	r4, r3
   d6f22:	f080 81f5 	bcs.w	d7310 <strftime+0x954>
   d6f26:	230a      	movs	r3, #10
   d6f28:	e1e5      	b.n	d72f6 <strftime+0x93a>
   d6f2a:	68ab      	ldr	r3, [r5, #8]
   d6f2c:	9a03      	ldr	r2, [sp, #12]
   d6f2e:	2b0b      	cmp	r3, #11
   d6f30:	bfcc      	ite	gt
   d6f32:	23a4      	movgt	r3, #164	; 0xa4
   d6f34:	23a0      	movle	r3, #160	; 0xa0
   d6f36:	4413      	add	r3, r2
   d6f38:	f8d3 8004 	ldr.w	r8, [r3, #4]
   d6f3c:	4640      	mov	r0, r8
   d6f3e:	f000 f9f1 	bl	d7324 <strlen>
   d6f42:	4bb2      	ldr	r3, [pc, #712]	; (d720c <strftime+0x850>)
   d6f44:	f8d3 e000 	ldr.w	lr, [r3]
   d6f48:	1939      	adds	r1, r7, r4
   d6f4a:	4642      	mov	r2, r8
   d6f4c:	4420      	add	r0, r4
   d6f4e:	4284      	cmp	r4, r0
   d6f50:	f000 81d3 	beq.w	d72fa <strftime+0x93e>
   d6f54:	9b02      	ldr	r3, [sp, #8]
   d6f56:	429c      	cmp	r4, r3
   d6f58:	f080 81da 	bcs.w	d7310 <strftime+0x954>
   d6f5c:	f899 3000 	ldrb.w	r3, [r9]
   d6f60:	2b50      	cmp	r3, #80	; 0x50
   d6f62:	f104 0401 	add.w	r4, r4, #1
   d6f66:	7813      	ldrb	r3, [r2, #0]
   d6f68:	d10a      	bne.n	d6f80 <strftime+0x5c4>
   d6f6a:	eb0e 0c03 	add.w	ip, lr, r3
   d6f6e:	f89c c001 	ldrb.w	ip, [ip, #1]
   d6f72:	f00c 0c03 	and.w	ip, ip, #3
   d6f76:	f1bc 0f01 	cmp.w	ip, #1
   d6f7a:	bf08      	it	eq
   d6f7c:	3320      	addeq	r3, #32
   d6f7e:	b2db      	uxtb	r3, r3
   d6f80:	f801 3b01 	strb.w	r3, [r1], #1
   d6f84:	3201      	adds	r2, #1
   d6f86:	e7e2      	b.n	d6f4e <strftime+0x592>
   d6f88:	686b      	ldr	r3, [r5, #4]
   d6f8a:	9300      	str	r3, [sp, #0]
   d6f8c:	4aa0      	ldr	r2, [pc, #640]	; (d7210 <strftime+0x854>)
   d6f8e:	68ab      	ldr	r3, [r5, #8]
   d6f90:	e139      	b.n	d7206 <strftime+0x84a>
   d6f92:	6a2b      	ldr	r3, [r5, #32]
   d6f94:	2b00      	cmp	r3, #0
   d6f96:	db17      	blt.n	d6fc8 <strftime+0x60c>
   d6f98:	f000 fb22 	bl	d75e0 <__tz_lock>
   d6f9c:	9b06      	ldr	r3, [sp, #24]
   d6f9e:	b91b      	cbnz	r3, d6fa8 <strftime+0x5ec>
   d6fa0:	f000 fb20 	bl	d75e4 <_tzset_unlocked>
   d6fa4:	2301      	movs	r3, #1
   d6fa6:	9306      	str	r3, [sp, #24]
   d6fa8:	f000 fcea 	bl	d7980 <__gettzinfo>
   d6fac:	6a2b      	ldr	r3, [r5, #32]
   d6fae:	2b00      	cmp	r3, #0
   d6fb0:	bfd4      	ite	le
   d6fb2:	2300      	movle	r3, #0
   d6fb4:	2301      	movgt	r3, #1
   d6fb6:	221c      	movs	r2, #28
   d6fb8:	fb02 0003 	mla	r0, r2, r3, r0
   d6fbc:	6a03      	ldr	r3, [r0, #32]
   d6fbe:	f1c3 0800 	rsb	r8, r3, #0
   d6fc2:	f000 fb0e 	bl	d75e2 <__tz_unlock>
   d6fc6:	e001      	b.n	d6fcc <strftime+0x610>
   d6fc8:	f04f 0800 	mov.w	r8, #0
   d6fcc:	f8d5 e014 	ldr.w	lr, [r5, #20]
   d6fd0:	4670      	mov	r0, lr
   d6fd2:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   d6fd6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d6fda:	f141 33ff 	adc.w	r3, r1, #4294967295
   d6fde:	2a00      	cmp	r2, #0
   d6fe0:	f173 0b00 	sbcs.w	fp, r3, #0
   d6fe4:	ebc4 0c06 	rsb	ip, r4, r6
   d6fe8:	eb07 0a04 	add.w	sl, r7, r4
   d6fec:	da03      	bge.n	d6ff6 <strftime+0x63a>
   d6fee:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   d6ff2:	f141 33ff 	adc.w	r3, r1, #4294967295
   d6ff6:	0891      	lsrs	r1, r2, #2
   d6ff8:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   d6ffc:	109b      	asrs	r3, r3, #2
   d6ffe:	9104      	str	r1, [sp, #16]
   d7000:	9305      	str	r3, [sp, #20]
   d7002:	f10e 31ff 	add.w	r1, lr, #4294967295
   d7006:	2364      	movs	r3, #100	; 0x64
   d7008:	fb91 f1f3 	sdiv	r1, r1, r3
   d700c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d7010:	1a52      	subs	r2, r2, r1
   d7012:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   d7016:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   d701a:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d701e:	fb90 f1f1 	sdiv	r1, r0, r1
   d7022:	1852      	adds	r2, r2, r1
   d7024:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d7028:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   d702c:	f240 116d 	movw	r1, #365	; 0x16d
   d7030:	fb01 fe0e 	mul.w	lr, r1, lr
   d7034:	69e9      	ldr	r1, [r5, #28]
   d7036:	eb12 020e 	adds.w	r2, r2, lr
   d703a:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   d703e:	1852      	adds	r2, r2, r1
   d7040:	f04f 0e18 	mov.w	lr, #24
   d7044:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d7048:	fba2 010e 	umull	r0, r1, r2, lr
   d704c:	fb0e 1103 	mla	r1, lr, r3, r1
   d7050:	68ab      	ldr	r3, [r5, #8]
   d7052:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   d7056:	18c0      	adds	r0, r0, r3
   d7058:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d705c:	fba0 230e 	umull	r2, r3, r0, lr
   d7060:	fb0e 3301 	mla	r3, lr, r1, r3
   d7064:	6869      	ldr	r1, [r5, #4]
   d7066:	1852      	adds	r2, r2, r1
   d7068:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d706c:	fba2 010e 	umull	r0, r1, r2, lr
   d7070:	fb0e 1103 	mla	r1, lr, r3, r1
   d7074:	682b      	ldr	r3, [r5, #0]
   d7076:	4a67      	ldr	r2, [pc, #412]	; (d7214 <strftime+0x858>)
   d7078:	18c0      	adds	r0, r0, r3
   d707a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d707e:	ebb0 0008 	subs.w	r0, r0, r8
   d7082:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   d7086:	e9cd 0100 	strd	r0, r1, [sp]
   d708a:	4661      	mov	r1, ip
   d708c:	4650      	mov	r0, sl
   d708e:	f7fd fcd9 	bl	d4a44 <sniprintf>
   d7092:	e5f8      	b.n	d6c86 <strftime+0x2ca>
   d7094:	682b      	ldr	r3, [r5, #0]
   d7096:	e07e      	b.n	d7196 <strftime+0x7da>
   d7098:	9b02      	ldr	r3, [sp, #8]
   d709a:	429c      	cmp	r4, r3
   d709c:	f080 8138 	bcs.w	d7310 <strftime+0x954>
   d70a0:	2309      	movs	r3, #9
   d70a2:	e128      	b.n	d72f6 <strftime+0x93a>
   d70a4:	682b      	ldr	r3, [r5, #0]
   d70a6:	9301      	str	r3, [sp, #4]
   d70a8:	686b      	ldr	r3, [r5, #4]
   d70aa:	9300      	str	r3, [sp, #0]
   d70ac:	4a5a      	ldr	r2, [pc, #360]	; (d7218 <strftime+0x85c>)
   d70ae:	68ab      	ldr	r3, [r5, #8]
   d70b0:	1b31      	subs	r1, r6, r4
   d70b2:	1938      	adds	r0, r7, r4
   d70b4:	e60d      	b.n	d6cd2 <strftime+0x316>
   d70b6:	9b02      	ldr	r3, [sp, #8]
   d70b8:	429c      	cmp	r4, r3
   d70ba:	f080 8129 	bcs.w	d7310 <strftime+0x954>
   d70be:	69ab      	ldr	r3, [r5, #24]
   d70c0:	1c62      	adds	r2, r4, #1
   d70c2:	b90b      	cbnz	r3, d70c8 <strftime+0x70c>
   d70c4:	2337      	movs	r3, #55	; 0x37
   d70c6:	e000      	b.n	d70ca <strftime+0x70e>
   d70c8:	3330      	adds	r3, #48	; 0x30
   d70ca:	553b      	strb	r3, [r7, r4]
   d70cc:	4614      	mov	r4, r2
   d70ce:	e114      	b.n	d72fa <strftime+0x93e>
   d70d0:	69eb      	ldr	r3, [r5, #28]
   d70d2:	69aa      	ldr	r2, [r5, #24]
   d70d4:	3307      	adds	r3, #7
   d70d6:	1a9b      	subs	r3, r3, r2
   d70d8:	2207      	movs	r2, #7
   d70da:	fb93 f3f2 	sdiv	r3, r3, r2
   d70de:	e05a      	b.n	d7196 <strftime+0x7da>
   d70e0:	4628      	mov	r0, r5
   d70e2:	f7ff fc0b 	bl	d68fc <iso_year_adjust>
   d70e6:	69aa      	ldr	r2, [r5, #24]
   d70e8:	b10a      	cbz	r2, d70ee <strftime+0x732>
   d70ea:	1e53      	subs	r3, r2, #1
   d70ec:	e000      	b.n	d70f0 <strftime+0x734>
   d70ee:	2306      	movs	r3, #6
   d70f0:	2800      	cmp	r0, #0
   d70f2:	dc2f      	bgt.n	d7154 <strftime+0x798>
   d70f4:	69ea      	ldr	r2, [r5, #28]
   d70f6:	d101      	bne.n	d70fc <strftime+0x740>
   d70f8:	320a      	adds	r2, #10
   d70fa:	e03b      	b.n	d7174 <strftime+0x7b8>
   d70fc:	1a9a      	subs	r2, r3, r2
   d70fe:	696b      	ldr	r3, [r5, #20]
   d7100:	f240 716b 	movw	r1, #1899	; 0x76b
   d7104:	2b00      	cmp	r3, #0
   d7106:	bfb4      	ite	lt
   d7108:	4608      	movlt	r0, r1
   d710a:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   d710e:	4418      	add	r0, r3
   d7110:	0781      	lsls	r1, r0, #30
   d7112:	d107      	bne.n	d7124 <strftime+0x768>
   d7114:	4601      	mov	r1, r0
   d7116:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d711a:	fb90 f0fe 	sdiv	r0, r0, lr
   d711e:	fb0e 1110 	mls	r1, lr, r0, r1
   d7122:	b981      	cbnz	r1, d7146 <strftime+0x78a>
   d7124:	2b00      	cmp	r3, #0
   d7126:	f240 716b 	movw	r1, #1899	; 0x76b
   d712a:	bfa8      	it	ge
   d712c:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   d7130:	4419      	add	r1, r3
   d7132:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d7136:	fb91 f0f3 	sdiv	r0, r1, r3
   d713a:	fb03 1110 	mls	r1, r3, r0, r1
   d713e:	fab1 f181 	clz	r1, r1
   d7142:	0949      	lsrs	r1, r1, #5
   d7144:	e000      	b.n	d7148 <strftime+0x78c>
   d7146:	2101      	movs	r1, #1
   d7148:	1a52      	subs	r2, r2, r1
   d714a:	2a05      	cmp	r2, #5
   d714c:	bfb4      	ite	lt
   d714e:	2335      	movlt	r3, #53	; 0x35
   d7150:	2334      	movge	r3, #52	; 0x34
   d7152:	e020      	b.n	d7196 <strftime+0x7da>
   d7154:	2301      	movs	r3, #1
   d7156:	e01e      	b.n	d7196 <strftime+0x7da>
   d7158:	9b02      	ldr	r3, [sp, #8]
   d715a:	429c      	cmp	r4, r3
   d715c:	f080 80d8 	bcs.w	d7310 <strftime+0x954>
   d7160:	69ab      	ldr	r3, [r5, #24]
   d7162:	3330      	adds	r3, #48	; 0x30
   d7164:	e0c7      	b.n	d72f6 <strftime+0x93a>
   d7166:	69aa      	ldr	r2, [r5, #24]
   d7168:	b10a      	cbz	r2, d716e <strftime+0x7b2>
   d716a:	1e53      	subs	r3, r2, #1
   d716c:	e000      	b.n	d7170 <strftime+0x7b4>
   d716e:	2306      	movs	r3, #6
   d7170:	69ea      	ldr	r2, [r5, #28]
   d7172:	3207      	adds	r2, #7
   d7174:	1ad2      	subs	r2, r2, r3
   d7176:	2307      	movs	r3, #7
   d7178:	fb92 f3f3 	sdiv	r3, r2, r3
   d717c:	e00b      	b.n	d7196 <strftime+0x7da>
   d717e:	6968      	ldr	r0, [r5, #20]
   d7180:	2800      	cmp	r0, #0
   d7182:	da03      	bge.n	d718c <strftime+0x7d0>
   d7184:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7188:	f000 fbb2 	bl	d78f0 <abs>
   d718c:	2364      	movs	r3, #100	; 0x64
   d718e:	fb90 f2f3 	sdiv	r2, r0, r3
   d7192:	fb02 0313 	mls	r3, r2, r3, r0
   d7196:	4a21      	ldr	r2, [pc, #132]	; (d721c <strftime+0x860>)
   d7198:	e571      	b.n	d6c7e <strftime+0x2c2>
   d719a:	696b      	ldr	r3, [r5, #20]
   d719c:	4a20      	ldr	r2, [pc, #128]	; (d7220 <strftime+0x864>)
   d719e:	4293      	cmp	r3, r2
   d71a0:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   d71a4:	da05      	bge.n	d71b2 <strftime+0x7f6>
   d71a6:	232d      	movs	r3, #45	; 0x2d
   d71a8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d71ac:	f1cb 0b00 	rsb	fp, fp, #0
   d71b0:	e008      	b.n	d71c4 <strftime+0x808>
   d71b2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d71b6:	d10d      	bne.n	d71d4 <strftime+0x818>
   d71b8:	f242 730f 	movw	r3, #9999	; 0x270f
   d71bc:	459b      	cmp	fp, r3
   d71be:	d911      	bls.n	d71e4 <strftime+0x828>
   d71c0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d71c4:	f1b8 0f00 	cmp.w	r8, #0
   d71c8:	d001      	beq.n	d71ce <strftime+0x812>
   d71ca:	f108 38ff 	add.w	r8, r8, #4294967295
   d71ce:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   d71d2:	e000      	b.n	d71d6 <strftime+0x81a>
   d71d4:	ab0a      	add	r3, sp, #40	; 0x28
   d71d6:	2225      	movs	r2, #37	; 0x25
   d71d8:	701a      	strb	r2, [r3, #0]
   d71da:	f1ba 0f00 	cmp.w	sl, #0
   d71de:	d108      	bne.n	d71f2 <strftime+0x836>
   d71e0:	1c58      	adds	r0, r3, #1
   d71e2:	e009      	b.n	d71f8 <strftime+0x83c>
   d71e4:	f1b8 0f00 	cmp.w	r8, #0
   d71e8:	d1f4      	bne.n	d71d4 <strftime+0x818>
   d71ea:	2325      	movs	r3, #37	; 0x25
   d71ec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d71f0:	ab0a      	add	r3, sp, #40	; 0x28
   d71f2:	2230      	movs	r2, #48	; 0x30
   d71f4:	1c98      	adds	r0, r3, #2
   d71f6:	705a      	strb	r2, [r3, #1]
   d71f8:	490a      	ldr	r1, [pc, #40]	; (d7224 <strftime+0x868>)
   d71fa:	f7ff fb77 	bl	d68ec <strcpy>
   d71fe:	f8cd b000 	str.w	fp, [sp]
   d7202:	4643      	mov	r3, r8
   d7204:	aa0a      	add	r2, sp, #40	; 0x28
   d7206:	1b31      	subs	r1, r6, r4
   d7208:	1938      	adds	r0, r7, r4
   d720a:	e03e      	b.n	d728a <strftime+0x8ce>
   d720c:	2003e1c4 	.word	0x2003e1c4
   d7210:	000d80b1 	.word	0x000d80b1
   d7214:	000d80a7 	.word	0x000d80a7
   d7218:	000d80ac 	.word	0x000d80ac
   d721c:	000d808d 	.word	0x000d808d
   d7220:	fffff894 	.word	0xfffff894
   d7224:	000d809e 	.word	0x000d809e
   d7228:	6a2b      	ldr	r3, [r5, #32]
   d722a:	2b00      	cmp	r3, #0
   d722c:	db65      	blt.n	d72fa <strftime+0x93e>
   d722e:	f000 f9d7 	bl	d75e0 <__tz_lock>
   d7232:	9b06      	ldr	r3, [sp, #24]
   d7234:	b91b      	cbnz	r3, d723e <strftime+0x882>
   d7236:	f000 f9d5 	bl	d75e4 <_tzset_unlocked>
   d723a:	2301      	movs	r3, #1
   d723c:	9306      	str	r3, [sp, #24]
   d723e:	f000 fb9f 	bl	d7980 <__gettzinfo>
   d7242:	6a2b      	ldr	r3, [r5, #32]
   d7244:	2b00      	cmp	r3, #0
   d7246:	bfd4      	ite	le
   d7248:	2300      	movle	r3, #0
   d724a:	2301      	movgt	r3, #1
   d724c:	221c      	movs	r2, #28
   d724e:	fb02 0003 	mla	r0, r2, r3, r0
   d7252:	eb07 0a04 	add.w	sl, r7, r4
   d7256:	6a03      	ldr	r3, [r0, #32]
   d7258:	f1c3 0800 	rsb	r8, r3, #0
   d725c:	f000 f9c1 	bl	d75e2 <__tz_unlock>
   d7260:	233c      	movs	r3, #60	; 0x3c
   d7262:	fb98 f0f3 	sdiv	r0, r8, r3
   d7266:	9307      	str	r3, [sp, #28]
   d7268:	f000 fc26 	bl	d7ab8 <labs>
   d726c:	9b07      	ldr	r3, [sp, #28]
   d726e:	fb90 f2f3 	sdiv	r2, r0, r3
   d7272:	ebc4 0b06 	rsb	fp, r4, r6
   d7276:	fb02 0013 	mls	r0, r2, r3, r0
   d727a:	4a28      	ldr	r2, [pc, #160]	; (d731c <strftime+0x960>)
   d727c:	9000      	str	r0, [sp, #0]
   d727e:	4659      	mov	r1, fp
   d7280:	4650      	mov	r0, sl
   d7282:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7286:	fb98 f3f3 	sdiv	r3, r8, r3
   d728a:	f7fd fbdb 	bl	d4a44 <sniprintf>
   d728e:	e4fa      	b.n	d6c86 <strftime+0x2ca>
   d7290:	4404      	add	r4, r0
   d7292:	42a6      	cmp	r6, r4
   d7294:	d831      	bhi.n	d72fa <strftime+0x93e>
   d7296:	e03b      	b.n	d7310 <strftime+0x954>
   d7298:	6a2b      	ldr	r3, [r5, #32]
   d729a:	2b00      	cmp	r3, #0
   d729c:	db2d      	blt.n	d72fa <strftime+0x93e>
   d729e:	f000 f99f 	bl	d75e0 <__tz_lock>
   d72a2:	9b06      	ldr	r3, [sp, #24]
   d72a4:	b91b      	cbnz	r3, d72ae <strftime+0x8f2>
   d72a6:	f000 f99d 	bl	d75e4 <_tzset_unlocked>
   d72aa:	2301      	movs	r3, #1
   d72ac:	9306      	str	r3, [sp, #24]
   d72ae:	6a2b      	ldr	r3, [r5, #32]
   d72b0:	4a1b      	ldr	r2, [pc, #108]	; (d7320 <strftime+0x964>)
   d72b2:	2b00      	cmp	r3, #0
   d72b4:	bfd4      	ite	le
   d72b6:	2300      	movle	r3, #0
   d72b8:	2301      	movgt	r3, #1
   d72ba:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d72be:	4640      	mov	r0, r8
   d72c0:	f000 f830 	bl	d7324 <strlen>
   d72c4:	f108 38ff 	add.w	r8, r8, #4294967295
   d72c8:	193b      	adds	r3, r7, r4
   d72ca:	4420      	add	r0, r4
   d72cc:	4284      	cmp	r4, r0
   d72ce:	d00b      	beq.n	d72e8 <strftime+0x92c>
   d72d0:	9a02      	ldr	r2, [sp, #8]
   d72d2:	4294      	cmp	r4, r2
   d72d4:	d205      	bcs.n	d72e2 <strftime+0x926>
   d72d6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d72da:	f803 2b01 	strb.w	r2, [r3], #1
   d72de:	3401      	adds	r4, #1
   d72e0:	e7f4      	b.n	d72cc <strftime+0x910>
   d72e2:	f000 f97e 	bl	d75e2 <__tz_unlock>
   d72e6:	e013      	b.n	d7310 <strftime+0x954>
   d72e8:	f000 f97b 	bl	d75e2 <__tz_unlock>
   d72ec:	e005      	b.n	d72fa <strftime+0x93e>
   d72ee:	9b02      	ldr	r3, [sp, #8]
   d72f0:	429c      	cmp	r4, r3
   d72f2:	d20d      	bcs.n	d7310 <strftime+0x954>
   d72f4:	2325      	movs	r3, #37	; 0x25
   d72f6:	553b      	strb	r3, [r7, r4]
   d72f8:	3401      	adds	r4, #1
   d72fa:	f899 3000 	ldrb.w	r3, [r9]
   d72fe:	b11b      	cbz	r3, d7308 <strftime+0x94c>
   d7300:	f109 0901 	add.w	r9, r9, #1
   d7304:	f7ff bb69 	b.w	d69da <strftime+0x1e>
   d7308:	b126      	cbz	r6, d7314 <strftime+0x958>
   d730a:	2300      	movs	r3, #0
   d730c:	553b      	strb	r3, [r7, r4]
   d730e:	e001      	b.n	d7314 <strftime+0x958>
   d7310:	2000      	movs	r0, #0
   d7312:	e000      	b.n	d7316 <strftime+0x95a>
   d7314:	4620      	mov	r0, r4
   d7316:	b013      	add	sp, #76	; 0x4c
   d7318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d731c:	000d80bb 	.word	0x000d80bb
   d7320:	2003e22c 	.word	0x2003e22c

000d7324 <strlen>:
   d7324:	4603      	mov	r3, r0
   d7326:	f813 2b01 	ldrb.w	r2, [r3], #1
   d732a:	2a00      	cmp	r2, #0
   d732c:	d1fb      	bne.n	d7326 <strlen+0x2>
   d732e:	1a18      	subs	r0, r3, r0
   d7330:	3801      	subs	r0, #1
   d7332:	4770      	bx	lr

000d7334 <strncmp>:
   d7334:	b530      	push	{r4, r5, lr}
   d7336:	b182      	cbz	r2, d735a <strncmp+0x26>
   d7338:	1e45      	subs	r5, r0, #1
   d733a:	3901      	subs	r1, #1
   d733c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7344:	42a3      	cmp	r3, r4
   d7346:	d106      	bne.n	d7356 <strncmp+0x22>
   d7348:	43ec      	mvns	r4, r5
   d734a:	4414      	add	r4, r2
   d734c:	42e0      	cmn	r0, r4
   d734e:	d001      	beq.n	d7354 <strncmp+0x20>
   d7350:	2b00      	cmp	r3, #0
   d7352:	d1f3      	bne.n	d733c <strncmp+0x8>
   d7354:	461c      	mov	r4, r3
   d7356:	1b18      	subs	r0, r3, r4
   d7358:	bd30      	pop	{r4, r5, pc}
   d735a:	4610      	mov	r0, r2
   d735c:	bd30      	pop	{r4, r5, pc}
	...

000d7360 <_strtoul_r>:
   d7360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7364:	4680      	mov	r8, r0
   d7366:	483c      	ldr	r0, [pc, #240]	; (d7458 <_strtoul_r+0xf8>)
   d7368:	f8d0 9000 	ldr.w	r9, [r0]
   d736c:	460e      	mov	r6, r1
   d736e:	4635      	mov	r5, r6
   d7370:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7374:	eb09 0004 	add.w	r0, r9, r4
   d7378:	7840      	ldrb	r0, [r0, #1]
   d737a:	f000 0008 	and.w	r0, r0, #8
   d737e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7382:	b108      	cbz	r0, d7388 <_strtoul_r+0x28>
   d7384:	462e      	mov	r6, r5
   d7386:	e7f2      	b.n	d736e <_strtoul_r+0xe>
   d7388:	2c2d      	cmp	r4, #45	; 0x2d
   d738a:	d103      	bne.n	d7394 <_strtoul_r+0x34>
   d738c:	1cb5      	adds	r5, r6, #2
   d738e:	7874      	ldrb	r4, [r6, #1]
   d7390:	2701      	movs	r7, #1
   d7392:	e003      	b.n	d739c <_strtoul_r+0x3c>
   d7394:	2c2b      	cmp	r4, #43	; 0x2b
   d7396:	bf04      	itt	eq
   d7398:	7874      	ldrbeq	r4, [r6, #1]
   d739a:	1cb5      	addeq	r5, r6, #2
   d739c:	b113      	cbz	r3, d73a4 <_strtoul_r+0x44>
   d739e:	2b10      	cmp	r3, #16
   d73a0:	d10a      	bne.n	d73b8 <_strtoul_r+0x58>
   d73a2:	e053      	b.n	d744c <_strtoul_r+0xec>
   d73a4:	2c30      	cmp	r4, #48	; 0x30
   d73a6:	d14f      	bne.n	d7448 <_strtoul_r+0xe8>
   d73a8:	7828      	ldrb	r0, [r5, #0]
   d73aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d73ae:	2858      	cmp	r0, #88	; 0x58
   d73b0:	d145      	bne.n	d743e <_strtoul_r+0xde>
   d73b2:	786c      	ldrb	r4, [r5, #1]
   d73b4:	2310      	movs	r3, #16
   d73b6:	3502      	adds	r5, #2
   d73b8:	f04f 3cff 	mov.w	ip, #4294967295
   d73bc:	2600      	movs	r6, #0
   d73be:	fbbc fcf3 	udiv	ip, ip, r3
   d73c2:	fb03 fa0c 	mul.w	sl, r3, ip
   d73c6:	ea6f 0a0a 	mvn.w	sl, sl
   d73ca:	4630      	mov	r0, r6
   d73cc:	eb09 0e04 	add.w	lr, r9, r4
   d73d0:	f89e e001 	ldrb.w	lr, [lr, #1]
   d73d4:	f01e 0f04 	tst.w	lr, #4
   d73d8:	d001      	beq.n	d73de <_strtoul_r+0x7e>
   d73da:	3c30      	subs	r4, #48	; 0x30
   d73dc:	e00b      	b.n	d73f6 <_strtoul_r+0x96>
   d73de:	f01e 0e03 	ands.w	lr, lr, #3
   d73e2:	d01a      	beq.n	d741a <_strtoul_r+0xba>
   d73e4:	f1be 0f01 	cmp.w	lr, #1
   d73e8:	bf0c      	ite	eq
   d73ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d73ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d73f2:	ebce 0404 	rsb	r4, lr, r4
   d73f6:	42a3      	cmp	r3, r4
   d73f8:	dd0f      	ble.n	d741a <_strtoul_r+0xba>
   d73fa:	2e00      	cmp	r6, #0
   d73fc:	db08      	blt.n	d7410 <_strtoul_r+0xb0>
   d73fe:	4560      	cmp	r0, ip
   d7400:	d806      	bhi.n	d7410 <_strtoul_r+0xb0>
   d7402:	d101      	bne.n	d7408 <_strtoul_r+0xa8>
   d7404:	4554      	cmp	r4, sl
   d7406:	dc03      	bgt.n	d7410 <_strtoul_r+0xb0>
   d7408:	fb03 4000 	mla	r0, r3, r0, r4
   d740c:	2601      	movs	r6, #1
   d740e:	e001      	b.n	d7414 <_strtoul_r+0xb4>
   d7410:	f04f 36ff 	mov.w	r6, #4294967295
   d7414:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7418:	e7d8      	b.n	d73cc <_strtoul_r+0x6c>
   d741a:	2e00      	cmp	r6, #0
   d741c:	da07      	bge.n	d742e <_strtoul_r+0xce>
   d741e:	2322      	movs	r3, #34	; 0x22
   d7420:	f8c8 3000 	str.w	r3, [r8]
   d7424:	f04f 30ff 	mov.w	r0, #4294967295
   d7428:	b92a      	cbnz	r2, d7436 <_strtoul_r+0xd6>
   d742a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d742e:	b107      	cbz	r7, d7432 <_strtoul_r+0xd2>
   d7430:	4240      	negs	r0, r0
   d7432:	b172      	cbz	r2, d7452 <_strtoul_r+0xf2>
   d7434:	b106      	cbz	r6, d7438 <_strtoul_r+0xd8>
   d7436:	1e69      	subs	r1, r5, #1
   d7438:	6011      	str	r1, [r2, #0]
   d743a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d743e:	2430      	movs	r4, #48	; 0x30
   d7440:	2b00      	cmp	r3, #0
   d7442:	d1b9      	bne.n	d73b8 <_strtoul_r+0x58>
   d7444:	2308      	movs	r3, #8
   d7446:	e7b7      	b.n	d73b8 <_strtoul_r+0x58>
   d7448:	230a      	movs	r3, #10
   d744a:	e7b5      	b.n	d73b8 <_strtoul_r+0x58>
   d744c:	2c30      	cmp	r4, #48	; 0x30
   d744e:	d0ab      	beq.n	d73a8 <_strtoul_r+0x48>
   d7450:	e7b2      	b.n	d73b8 <_strtoul_r+0x58>
   d7452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7456:	bf00      	nop
   d7458:	2003e1c4 	.word	0x2003e1c4

000d745c <strtoul>:
   d745c:	4613      	mov	r3, r2
   d745e:	460a      	mov	r2, r1
   d7460:	4601      	mov	r1, r0
   d7462:	4802      	ldr	r0, [pc, #8]	; (d746c <strtoul+0x10>)
   d7464:	6800      	ldr	r0, [r0, #0]
   d7466:	f7ff bf7b 	b.w	d7360 <_strtoul_r>
   d746a:	bf00      	nop
   d746c:	2003e228 	.word	0x2003e228

000d7470 <__get_current_time_locale>:
   d7470:	4b04      	ldr	r3, [pc, #16]	; (d7484 <__get_current_time_locale+0x14>)
   d7472:	4a05      	ldr	r2, [pc, #20]	; (d7488 <__get_current_time_locale+0x18>)
   d7474:	6818      	ldr	r0, [r3, #0]
   d7476:	4b05      	ldr	r3, [pc, #20]	; (d748c <__get_current_time_locale+0x1c>)
   d7478:	2800      	cmp	r0, #0
   d747a:	bf14      	ite	ne
   d747c:	4610      	movne	r0, r2
   d747e:	4618      	moveq	r0, r3
   d7480:	4770      	bx	lr
   d7482:	bf00      	nop
   d7484:	2003e6c8 	.word	0x2003e6c8
   d7488:	2003e6cc 	.word	0x2003e6cc
   d748c:	000d81f8 	.word	0x000d81f8

000d7490 <__tzcalc_limits>:
   d7490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7494:	4604      	mov	r4, r0
   d7496:	f000 fa73 	bl	d7980 <__gettzinfo>
   d749a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d749e:	429c      	cmp	r4, r3
   d74a0:	f340 8096 	ble.w	d75d0 <__tzcalc_limits+0x140>
   d74a4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d74a8:	18e3      	adds	r3, r4, r3
   d74aa:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d74ae:	109b      	asrs	r3, r3, #2
   d74b0:	f240 156d 	movw	r5, #365	; 0x16d
   d74b4:	fb05 3502 	mla	r5, r5, r2, r3
   d74b8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d74bc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d74c0:	fb92 f3f3 	sdiv	r3, r2, r3
   d74c4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d74c8:	442b      	add	r3, r5
   d74ca:	18a5      	adds	r5, r4, r2
   d74cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d74d0:	fb95 f5f2 	sdiv	r5, r5, r2
   d74d4:	441d      	add	r5, r3
   d74d6:	2364      	movs	r3, #100	; 0x64
   d74d8:	fb94 f7f2 	sdiv	r7, r4, r2
   d74dc:	fb94 f6f3 	sdiv	r6, r4, r3
   d74e0:	fb02 4717 	mls	r7, r2, r7, r4
   d74e4:	fb03 4616 	mls	r6, r3, r6, r4
   d74e8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d74ec:	fab7 fe87 	clz	lr, r7
   d74f0:	9301      	str	r3, [sp, #4]
   d74f2:	f004 0303 	and.w	r3, r4, #3
   d74f6:	6044      	str	r4, [r0, #4]
   d74f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d74fc:	4601      	mov	r1, r0
   d74fe:	9300      	str	r3, [sp, #0]
   d7500:	f04f 0c07 	mov.w	ip, #7
   d7504:	7a0b      	ldrb	r3, [r1, #8]
   d7506:	2b4a      	cmp	r3, #74	; 0x4a
   d7508:	d10e      	bne.n	d7528 <__tzcalc_limits+0x98>
   d750a:	694b      	ldr	r3, [r1, #20]
   d750c:	9a00      	ldr	r2, [sp, #0]
   d750e:	18ec      	adds	r4, r5, r3
   d7510:	b902      	cbnz	r2, d7514 <__tzcalc_limits+0x84>
   d7512:	b906      	cbnz	r6, d7516 <__tzcalc_limits+0x86>
   d7514:	b927      	cbnz	r7, d7520 <__tzcalc_limits+0x90>
   d7516:	2b3b      	cmp	r3, #59	; 0x3b
   d7518:	bfd4      	ite	le
   d751a:	2300      	movle	r3, #0
   d751c:	2301      	movgt	r3, #1
   d751e:	e000      	b.n	d7522 <__tzcalc_limits+0x92>
   d7520:	2300      	movs	r3, #0
   d7522:	4423      	add	r3, r4
   d7524:	3b01      	subs	r3, #1
   d7526:	e03f      	b.n	d75a8 <__tzcalc_limits+0x118>
   d7528:	2b44      	cmp	r3, #68	; 0x44
   d752a:	d102      	bne.n	d7532 <__tzcalc_limits+0xa2>
   d752c:	694b      	ldr	r3, [r1, #20]
   d752e:	442b      	add	r3, r5
   d7530:	e03a      	b.n	d75a8 <__tzcalc_limits+0x118>
   d7532:	9b00      	ldr	r3, [sp, #0]
   d7534:	b92b      	cbnz	r3, d7542 <__tzcalc_limits+0xb2>
   d7536:	2e00      	cmp	r6, #0
   d7538:	bf0c      	ite	eq
   d753a:	46f0      	moveq	r8, lr
   d753c:	f04f 0801 	movne.w	r8, #1
   d7540:	e000      	b.n	d7544 <__tzcalc_limits+0xb4>
   d7542:	46f0      	mov	r8, lr
   d7544:	4b24      	ldr	r3, [pc, #144]	; (d75d8 <__tzcalc_limits+0x148>)
   d7546:	68cc      	ldr	r4, [r1, #12]
   d7548:	2230      	movs	r2, #48	; 0x30
   d754a:	fb02 3808 	mla	r8, r2, r8, r3
   d754e:	f1a8 0a04 	sub.w	sl, r8, #4
   d7552:	46a9      	mov	r9, r5
   d7554:	2301      	movs	r3, #1
   d7556:	42a3      	cmp	r3, r4
   d7558:	da04      	bge.n	d7564 <__tzcalc_limits+0xd4>
   d755a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d755e:	3301      	adds	r3, #1
   d7560:	44d9      	add	r9, fp
   d7562:	e7f8      	b.n	d7556 <__tzcalc_limits+0xc6>
   d7564:	f109 0304 	add.w	r3, r9, #4
   d7568:	fb93 fbfc 	sdiv	fp, r3, ip
   d756c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7570:	2c01      	cmp	r4, #1
   d7572:	ebca 0a03 	rsb	sl, sl, r3
   d7576:	694b      	ldr	r3, [r1, #20]
   d7578:	bfb8      	it	lt
   d757a:	2401      	movlt	r4, #1
   d757c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7580:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7584:	690b      	ldr	r3, [r1, #16]
   d7586:	f104 34ff 	add.w	r4, r4, #4294967295
   d758a:	f103 33ff 	add.w	r3, r3, #4294967295
   d758e:	bf48      	it	mi
   d7590:	f10a 0a07 	addmi.w	sl, sl, #7
   d7594:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7598:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d759c:	4453      	add	r3, sl
   d759e:	42a3      	cmp	r3, r4
   d75a0:	db01      	blt.n	d75a6 <__tzcalc_limits+0x116>
   d75a2:	3b07      	subs	r3, #7
   d75a4:	e7fb      	b.n	d759e <__tzcalc_limits+0x10e>
   d75a6:	444b      	add	r3, r9
   d75a8:	698c      	ldr	r4, [r1, #24]
   d75aa:	4a0c      	ldr	r2, [pc, #48]	; (d75dc <__tzcalc_limits+0x14c>)
   d75ac:	fb02 4303 	mla	r3, r2, r3, r4
   d75b0:	6a0c      	ldr	r4, [r1, #32]
   d75b2:	4423      	add	r3, r4
   d75b4:	f841 3f1c 	str.w	r3, [r1, #28]!
   d75b8:	9b01      	ldr	r3, [sp, #4]
   d75ba:	4299      	cmp	r1, r3
   d75bc:	d1a2      	bne.n	d7504 <__tzcalc_limits+0x74>
   d75be:	69c3      	ldr	r3, [r0, #28]
   d75c0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d75c2:	4293      	cmp	r3, r2
   d75c4:	bfac      	ite	ge
   d75c6:	2300      	movge	r3, #0
   d75c8:	2301      	movlt	r3, #1
   d75ca:	6003      	str	r3, [r0, #0]
   d75cc:	2001      	movs	r0, #1
   d75ce:	e000      	b.n	d75d2 <__tzcalc_limits+0x142>
   d75d0:	2000      	movs	r0, #0
   d75d2:	b003      	add	sp, #12
   d75d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75d8:	000d800c 	.word	0x000d800c
   d75dc:	00015180 	.word	0x00015180

000d75e0 <__tz_lock>:
   d75e0:	4770      	bx	lr

000d75e2 <__tz_unlock>:
   d75e2:	4770      	bx	lr

000d75e4 <_tzset_unlocked>:
   d75e4:	4b01      	ldr	r3, [pc, #4]	; (d75ec <_tzset_unlocked+0x8>)
   d75e6:	6818      	ldr	r0, [r3, #0]
   d75e8:	f000 b802 	b.w	d75f0 <_tzset_unlocked_r>
   d75ec:	2003e228 	.word	0x2003e228

000d75f0 <_tzset_unlocked_r>:
   d75f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75f4:	b08d      	sub	sp, #52	; 0x34
   d75f6:	4607      	mov	r7, r0
   d75f8:	f000 f9c2 	bl	d7980 <__gettzinfo>
   d75fc:	49b0      	ldr	r1, [pc, #704]	; (d78c0 <_tzset_unlocked_r+0x2d0>)
   d75fe:	4eb1      	ldr	r6, [pc, #708]	; (d78c4 <_tzset_unlocked_r+0x2d4>)
   d7600:	4604      	mov	r4, r0
   d7602:	4638      	mov	r0, r7
   d7604:	f000 f9b4 	bl	d7970 <_getenv_r>
   d7608:	4605      	mov	r5, r0
   d760a:	b960      	cbnz	r0, d7626 <_tzset_unlocked_r+0x36>
   d760c:	4bae      	ldr	r3, [pc, #696]	; (d78c8 <_tzset_unlocked_r+0x2d8>)
   d760e:	4aaf      	ldr	r2, [pc, #700]	; (d78cc <_tzset_unlocked_r+0x2dc>)
   d7610:	6018      	str	r0, [r3, #0]
   d7612:	4baf      	ldr	r3, [pc, #700]	; (d78d0 <_tzset_unlocked_r+0x2e0>)
   d7614:	6018      	str	r0, [r3, #0]
   d7616:	4baf      	ldr	r3, [pc, #700]	; (d78d4 <_tzset_unlocked_r+0x2e4>)
   d7618:	6830      	ldr	r0, [r6, #0]
   d761a:	601a      	str	r2, [r3, #0]
   d761c:	605a      	str	r2, [r3, #4]
   d761e:	f7fd f9e1 	bl	d49e4 <free>
   d7622:	6035      	str	r5, [r6, #0]
   d7624:	e148      	b.n	d78b8 <_tzset_unlocked_r+0x2c8>
   d7626:	6831      	ldr	r1, [r6, #0]
   d7628:	b979      	cbnz	r1, d764a <_tzset_unlocked_r+0x5a>
   d762a:	6830      	ldr	r0, [r6, #0]
   d762c:	f7fd f9da 	bl	d49e4 <free>
   d7630:	4628      	mov	r0, r5
   d7632:	f7ff fe77 	bl	d7324 <strlen>
   d7636:	1c41      	adds	r1, r0, #1
   d7638:	4638      	mov	r0, r7
   d763a:	f7fd fa13 	bl	d4a64 <_malloc_r>
   d763e:	6030      	str	r0, [r6, #0]
   d7640:	b148      	cbz	r0, d7656 <_tzset_unlocked_r+0x66>
   d7642:	4629      	mov	r1, r5
   d7644:	f7ff f952 	bl	d68ec <strcpy>
   d7648:	e005      	b.n	d7656 <_tzset_unlocked_r+0x66>
   d764a:	f7ff f945 	bl	d68d8 <strcmp>
   d764e:	2800      	cmp	r0, #0
   d7650:	f000 8132 	beq.w	d78b8 <_tzset_unlocked_r+0x2c8>
   d7654:	e7e9      	b.n	d762a <_tzset_unlocked_r+0x3a>
   d7656:	782b      	ldrb	r3, [r5, #0]
   d7658:	4a9f      	ldr	r2, [pc, #636]	; (d78d8 <_tzset_unlocked_r+0x2e8>)
   d765a:	49a0      	ldr	r1, [pc, #640]	; (d78dc <_tzset_unlocked_r+0x2ec>)
   d765c:	2b3a      	cmp	r3, #58	; 0x3a
   d765e:	bf08      	it	eq
   d7660:	3501      	addeq	r5, #1
   d7662:	ae0a      	add	r6, sp, #40	; 0x28
   d7664:	4633      	mov	r3, r6
   d7666:	4628      	mov	r0, r5
   d7668:	f7fd f9dc 	bl	d4a24 <siscanf>
   d766c:	2800      	cmp	r0, #0
   d766e:	f340 8123 	ble.w	d78b8 <_tzset_unlocked_r+0x2c8>
   d7672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7674:	18ef      	adds	r7, r5, r3
   d7676:	5ceb      	ldrb	r3, [r5, r3]
   d7678:	2b2d      	cmp	r3, #45	; 0x2d
   d767a:	d103      	bne.n	d7684 <_tzset_unlocked_r+0x94>
   d767c:	3701      	adds	r7, #1
   d767e:	f04f 35ff 	mov.w	r5, #4294967295
   d7682:	e003      	b.n	d768c <_tzset_unlocked_r+0x9c>
   d7684:	2b2b      	cmp	r3, #43	; 0x2b
   d7686:	bf08      	it	eq
   d7688:	3701      	addeq	r7, #1
   d768a:	2501      	movs	r5, #1
   d768c:	f10d 0a20 	add.w	sl, sp, #32
   d7690:	f10d 0b1e 	add.w	fp, sp, #30
   d7694:	f04f 0800 	mov.w	r8, #0
   d7698:	9603      	str	r6, [sp, #12]
   d769a:	f8cd a008 	str.w	sl, [sp, #8]
   d769e:	9601      	str	r6, [sp, #4]
   d76a0:	f8cd b000 	str.w	fp, [sp]
   d76a4:	4633      	mov	r3, r6
   d76a6:	aa07      	add	r2, sp, #28
   d76a8:	498d      	ldr	r1, [pc, #564]	; (d78e0 <_tzset_unlocked_r+0x2f0>)
   d76aa:	f8ad 801e 	strh.w	r8, [sp, #30]
   d76ae:	4638      	mov	r0, r7
   d76b0:	f8ad 8020 	strh.w	r8, [sp, #32]
   d76b4:	f7fd f9b6 	bl	d4a24 <siscanf>
   d76b8:	4540      	cmp	r0, r8
   d76ba:	f340 80fd 	ble.w	d78b8 <_tzset_unlocked_r+0x2c8>
   d76be:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d76c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d76c6:	f8df 9224 	ldr.w	r9, [pc, #548]	; d78ec <_tzset_unlocked_r+0x2fc>
   d76ca:	213c      	movs	r1, #60	; 0x3c
   d76cc:	fb01 3302 	mla	r3, r1, r2, r3
   d76d0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d76d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d76d8:	fb01 3302 	mla	r3, r1, r2, r3
   d76dc:	435d      	muls	r5, r3
   d76de:	6225      	str	r5, [r4, #32]
   d76e0:	4d7c      	ldr	r5, [pc, #496]	; (d78d4 <_tzset_unlocked_r+0x2e4>)
   d76e2:	4b7d      	ldr	r3, [pc, #500]	; (d78d8 <_tzset_unlocked_r+0x2e8>)
   d76e4:	602b      	str	r3, [r5, #0]
   d76e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d76e8:	497c      	ldr	r1, [pc, #496]	; (d78dc <_tzset_unlocked_r+0x2ec>)
   d76ea:	441f      	add	r7, r3
   d76ec:	464a      	mov	r2, r9
   d76ee:	4633      	mov	r3, r6
   d76f0:	4638      	mov	r0, r7
   d76f2:	f7fd f997 	bl	d4a24 <siscanf>
   d76f6:	4540      	cmp	r0, r8
   d76f8:	dc08      	bgt.n	d770c <_tzset_unlocked_r+0x11c>
   d76fa:	682b      	ldr	r3, [r5, #0]
   d76fc:	606b      	str	r3, [r5, #4]
   d76fe:	4b72      	ldr	r3, [pc, #456]	; (d78c8 <_tzset_unlocked_r+0x2d8>)
   d7700:	6a22      	ldr	r2, [r4, #32]
   d7702:	601a      	str	r2, [r3, #0]
   d7704:	4b72      	ldr	r3, [pc, #456]	; (d78d0 <_tzset_unlocked_r+0x2e0>)
   d7706:	f8c3 8000 	str.w	r8, [r3]
   d770a:	e0d5      	b.n	d78b8 <_tzset_unlocked_r+0x2c8>
   d770c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d770e:	f8c5 9004 	str.w	r9, [r5, #4]
   d7712:	18fd      	adds	r5, r7, r3
   d7714:	5cfb      	ldrb	r3, [r7, r3]
   d7716:	2b2d      	cmp	r3, #45	; 0x2d
   d7718:	d103      	bne.n	d7722 <_tzset_unlocked_r+0x132>
   d771a:	3501      	adds	r5, #1
   d771c:	f04f 37ff 	mov.w	r7, #4294967295
   d7720:	e003      	b.n	d772a <_tzset_unlocked_r+0x13a>
   d7722:	2b2b      	cmp	r3, #43	; 0x2b
   d7724:	bf08      	it	eq
   d7726:	3501      	addeq	r5, #1
   d7728:	2701      	movs	r7, #1
   d772a:	2300      	movs	r3, #0
   d772c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7730:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7734:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7738:	930a      	str	r3, [sp, #40]	; 0x28
   d773a:	9603      	str	r6, [sp, #12]
   d773c:	f8cd a008 	str.w	sl, [sp, #8]
   d7740:	9601      	str	r6, [sp, #4]
   d7742:	f8cd b000 	str.w	fp, [sp]
   d7746:	4633      	mov	r3, r6
   d7748:	aa07      	add	r2, sp, #28
   d774a:	4965      	ldr	r1, [pc, #404]	; (d78e0 <_tzset_unlocked_r+0x2f0>)
   d774c:	4628      	mov	r0, r5
   d774e:	f7fd f969 	bl	d4a24 <siscanf>
   d7752:	2800      	cmp	r0, #0
   d7754:	dc04      	bgt.n	d7760 <_tzset_unlocked_r+0x170>
   d7756:	6a23      	ldr	r3, [r4, #32]
   d7758:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d775c:	63e3      	str	r3, [r4, #60]	; 0x3c
   d775e:	e00e      	b.n	d777e <_tzset_unlocked_r+0x18e>
   d7760:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7764:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7768:	213c      	movs	r1, #60	; 0x3c
   d776a:	fb01 3302 	mla	r3, r1, r2, r3
   d776e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7772:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7776:	fb01 3302 	mla	r3, r1, r2, r3
   d777a:	435f      	muls	r7, r3
   d777c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d777e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7780:	4627      	mov	r7, r4
   d7782:	441d      	add	r5, r3
   d7784:	f04f 0900 	mov.w	r9, #0
   d7788:	782b      	ldrb	r3, [r5, #0]
   d778a:	2b2c      	cmp	r3, #44	; 0x2c
   d778c:	bf08      	it	eq
   d778e:	3501      	addeq	r5, #1
   d7790:	f895 8000 	ldrb.w	r8, [r5]
   d7794:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7798:	d126      	bne.n	d77e8 <_tzset_unlocked_r+0x1f8>
   d779a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d779e:	9302      	str	r3, [sp, #8]
   d77a0:	ab09      	add	r3, sp, #36	; 0x24
   d77a2:	9300      	str	r3, [sp, #0]
   d77a4:	9603      	str	r6, [sp, #12]
   d77a6:	9601      	str	r6, [sp, #4]
   d77a8:	4633      	mov	r3, r6
   d77aa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d77ae:	494d      	ldr	r1, [pc, #308]	; (d78e4 <_tzset_unlocked_r+0x2f4>)
   d77b0:	4628      	mov	r0, r5
   d77b2:	f7fd f937 	bl	d4a24 <siscanf>
   d77b6:	2803      	cmp	r0, #3
   d77b8:	d17e      	bne.n	d78b8 <_tzset_unlocked_r+0x2c8>
   d77ba:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d77be:	1e4b      	subs	r3, r1, #1
   d77c0:	2b0b      	cmp	r3, #11
   d77c2:	d879      	bhi.n	d78b8 <_tzset_unlocked_r+0x2c8>
   d77c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d77c8:	1e53      	subs	r3, r2, #1
   d77ca:	2b04      	cmp	r3, #4
   d77cc:	d874      	bhi.n	d78b8 <_tzset_unlocked_r+0x2c8>
   d77ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d77d2:	2b06      	cmp	r3, #6
   d77d4:	d870      	bhi.n	d78b8 <_tzset_unlocked_r+0x2c8>
   d77d6:	f887 8008 	strb.w	r8, [r7, #8]
   d77da:	60f9      	str	r1, [r7, #12]
   d77dc:	613a      	str	r2, [r7, #16]
   d77de:	617b      	str	r3, [r7, #20]
   d77e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d77e2:	eb05 0803 	add.w	r8, r5, r3
   d77e6:	e02a      	b.n	d783e <_tzset_unlocked_r+0x24e>
   d77e8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d77ec:	bf06      	itte	eq
   d77ee:	3501      	addeq	r5, #1
   d77f0:	4643      	moveq	r3, r8
   d77f2:	2344      	movne	r3, #68	; 0x44
   d77f4:	220a      	movs	r2, #10
   d77f6:	a90b      	add	r1, sp, #44	; 0x2c
   d77f8:	4628      	mov	r0, r5
   d77fa:	9305      	str	r3, [sp, #20]
   d77fc:	f7ff fe2e 	bl	d745c <strtoul>
   d7800:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7804:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7808:	4545      	cmp	r5, r8
   d780a:	9b05      	ldr	r3, [sp, #20]
   d780c:	d114      	bne.n	d7838 <_tzset_unlocked_r+0x248>
   d780e:	234d      	movs	r3, #77	; 0x4d
   d7810:	f1b9 0f00 	cmp.w	r9, #0
   d7814:	d107      	bne.n	d7826 <_tzset_unlocked_r+0x236>
   d7816:	7223      	strb	r3, [r4, #8]
   d7818:	2303      	movs	r3, #3
   d781a:	60e3      	str	r3, [r4, #12]
   d781c:	2302      	movs	r3, #2
   d781e:	6123      	str	r3, [r4, #16]
   d7820:	f8c4 9014 	str.w	r9, [r4, #20]
   d7824:	e00b      	b.n	d783e <_tzset_unlocked_r+0x24e>
   d7826:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d782a:	230b      	movs	r3, #11
   d782c:	62a3      	str	r3, [r4, #40]	; 0x28
   d782e:	2301      	movs	r3, #1
   d7830:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7832:	2300      	movs	r3, #0
   d7834:	6323      	str	r3, [r4, #48]	; 0x30
   d7836:	e002      	b.n	d783e <_tzset_unlocked_r+0x24e>
   d7838:	b280      	uxth	r0, r0
   d783a:	723b      	strb	r3, [r7, #8]
   d783c:	6178      	str	r0, [r7, #20]
   d783e:	2302      	movs	r3, #2
   d7840:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7844:	2300      	movs	r3, #0
   d7846:	f8ad 301e 	strh.w	r3, [sp, #30]
   d784a:	f8ad 3020 	strh.w	r3, [sp, #32]
   d784e:	930a      	str	r3, [sp, #40]	; 0x28
   d7850:	f898 3000 	ldrb.w	r3, [r8]
   d7854:	2b2f      	cmp	r3, #47	; 0x2f
   d7856:	d10b      	bne.n	d7870 <_tzset_unlocked_r+0x280>
   d7858:	9603      	str	r6, [sp, #12]
   d785a:	f8cd a008 	str.w	sl, [sp, #8]
   d785e:	9601      	str	r6, [sp, #4]
   d7860:	f8cd b000 	str.w	fp, [sp]
   d7864:	4633      	mov	r3, r6
   d7866:	aa07      	add	r2, sp, #28
   d7868:	491f      	ldr	r1, [pc, #124]	; (d78e8 <_tzset_unlocked_r+0x2f8>)
   d786a:	4640      	mov	r0, r8
   d786c:	f7fd f8da 	bl	d4a24 <siscanf>
   d7870:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7874:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7878:	213c      	movs	r1, #60	; 0x3c
   d787a:	fb01 3302 	mla	r3, r1, r2, r3
   d787e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7882:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7886:	fb01 3302 	mla	r3, r1, r2, r3
   d788a:	61bb      	str	r3, [r7, #24]
   d788c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d788e:	f109 0901 	add.w	r9, r9, #1
   d7892:	f1b9 0f02 	cmp.w	r9, #2
   d7896:	4445      	add	r5, r8
   d7898:	f107 071c 	add.w	r7, r7, #28
   d789c:	f47f af74 	bne.w	d7788 <_tzset_unlocked_r+0x198>
   d78a0:	6860      	ldr	r0, [r4, #4]
   d78a2:	f7ff fdf5 	bl	d7490 <__tzcalc_limits>
   d78a6:	4b08      	ldr	r3, [pc, #32]	; (d78c8 <_tzset_unlocked_r+0x2d8>)
   d78a8:	6a22      	ldr	r2, [r4, #32]
   d78aa:	601a      	str	r2, [r3, #0]
   d78ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d78ae:	1a9b      	subs	r3, r3, r2
   d78b0:	4a07      	ldr	r2, [pc, #28]	; (d78d0 <_tzset_unlocked_r+0x2e0>)
   d78b2:	bf18      	it	ne
   d78b4:	2301      	movne	r3, #1
   d78b6:	6013      	str	r3, [r2, #0]
   d78b8:	b00d      	add	sp, #52	; 0x34
   d78ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d78be:	bf00      	nop
   d78c0:	000d82f4 	.word	0x000d82f4
   d78c4:	2003e7e0 	.word	0x2003e7e0
   d78c8:	2003e7e8 	.word	0x2003e7e8
   d78cc:	000d82f7 	.word	0x000d82f7
   d78d0:	2003e7e4 	.word	0x2003e7e4
   d78d4:	2003e22c 	.word	0x2003e22c
   d78d8:	2003e7d3 	.word	0x2003e7d3
   d78dc:	000d82fb 	.word	0x000d82fb
   d78e0:	000d831e 	.word	0x000d831e
   d78e4:	000d830a 	.word	0x000d830a
   d78e8:	000d831d 	.word	0x000d831d
   d78ec:	2003e7c8 	.word	0x2003e7c8

000d78f0 <abs>:
   d78f0:	2800      	cmp	r0, #0
   d78f2:	bfb8      	it	lt
   d78f4:	4240      	neglt	r0, r0
   d78f6:	4770      	bx	lr

000d78f8 <_findenv_r>:
   d78f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78fc:	4607      	mov	r7, r0
   d78fe:	468b      	mov	fp, r1
   d7900:	4690      	mov	r8, r2
   d7902:	f000 f8dd 	bl	d7ac0 <__env_lock>
   d7906:	4b19      	ldr	r3, [pc, #100]	; (d796c <_findenv_r+0x74>)
   d7908:	681d      	ldr	r5, [r3, #0]
   d790a:	469a      	mov	sl, r3
   d790c:	b13d      	cbz	r5, d791e <_findenv_r+0x26>
   d790e:	465c      	mov	r4, fp
   d7910:	4623      	mov	r3, r4
   d7912:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7916:	b142      	cbz	r2, d792a <_findenv_r+0x32>
   d7918:	2a3d      	cmp	r2, #61	; 0x3d
   d791a:	461c      	mov	r4, r3
   d791c:	d1f8      	bne.n	d7910 <_findenv_r+0x18>
   d791e:	4638      	mov	r0, r7
   d7920:	f000 f8cf 	bl	d7ac2 <__env_unlock>
   d7924:	2000      	movs	r0, #0
   d7926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d792a:	ebcb 0404 	rsb	r4, fp, r4
   d792e:	46a9      	mov	r9, r5
   d7930:	f859 0b04 	ldr.w	r0, [r9], #4
   d7934:	2800      	cmp	r0, #0
   d7936:	d0f2      	beq.n	d791e <_findenv_r+0x26>
   d7938:	4622      	mov	r2, r4
   d793a:	4659      	mov	r1, fp
   d793c:	f7ff fcfa 	bl	d7334 <strncmp>
   d7940:	b988      	cbnz	r0, d7966 <_findenv_r+0x6e>
   d7942:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7946:	191e      	adds	r6, r3, r4
   d7948:	5d1b      	ldrb	r3, [r3, r4]
   d794a:	2b3d      	cmp	r3, #61	; 0x3d
   d794c:	d10b      	bne.n	d7966 <_findenv_r+0x6e>
   d794e:	f8da 3000 	ldr.w	r3, [sl]
   d7952:	1aed      	subs	r5, r5, r3
   d7954:	10ad      	asrs	r5, r5, #2
   d7956:	4638      	mov	r0, r7
   d7958:	f8c8 5000 	str.w	r5, [r8]
   d795c:	f000 f8b1 	bl	d7ac2 <__env_unlock>
   d7960:	1c70      	adds	r0, r6, #1
   d7962:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7966:	464d      	mov	r5, r9
   d7968:	e7e1      	b.n	d792e <_findenv_r+0x36>
   d796a:	bf00      	nop
   d796c:	2003e274 	.word	0x2003e274

000d7970 <_getenv_r>:
   d7970:	b507      	push	{r0, r1, r2, lr}
   d7972:	aa01      	add	r2, sp, #4
   d7974:	f7ff ffc0 	bl	d78f8 <_findenv_r>
   d7978:	b003      	add	sp, #12
   d797a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7980 <__gettzinfo>:
   d7980:	4800      	ldr	r0, [pc, #0]	; (d7984 <__gettzinfo+0x4>)
   d7982:	4770      	bx	lr
   d7984:	2003e234 	.word	0x2003e234

000d7988 <gmtime_r>:
   d7988:	6802      	ldr	r2, [r0, #0]
   d798a:	4b47      	ldr	r3, [pc, #284]	; (d7aa8 <gmtime_r+0x120>)
   d798c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d798e:	fb92 f4f3 	sdiv	r4, r2, r3
   d7992:	fb03 2214 	mls	r2, r3, r4, r2
   d7996:	2a00      	cmp	r2, #0
   d7998:	bfbc      	itt	lt
   d799a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d799e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d79a2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d79a6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d79aa:	fb92 f3f0 	sdiv	r3, r2, r0
   d79ae:	fb00 2213 	mls	r2, r0, r3, r2
   d79b2:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d79b6:	bfac      	ite	ge
   d79b8:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d79bc:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d79c0:	608b      	str	r3, [r1, #8]
   d79c2:	fb92 f3f0 	sdiv	r3, r2, r0
   d79c6:	fb00 2213 	mls	r2, r0, r3, r2
   d79ca:	604b      	str	r3, [r1, #4]
   d79cc:	600a      	str	r2, [r1, #0]
   d79ce:	2307      	movs	r3, #7
   d79d0:	1ce2      	adds	r2, r4, #3
   d79d2:	fb92 f3f3 	sdiv	r3, r2, r3
   d79d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d79da:	1ad3      	subs	r3, r2, r3
   d79dc:	618b      	str	r3, [r1, #24]
   d79de:	4b33      	ldr	r3, [pc, #204]	; (d7aac <gmtime_r+0x124>)
   d79e0:	4d33      	ldr	r5, [pc, #204]	; (d7ab0 <gmtime_r+0x128>)
   d79e2:	fb94 f5f5 	sdiv	r5, r4, r5
   d79e6:	fb03 4405 	mla	r4, r3, r5, r4
   d79ea:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d79ee:	fbb4 f2f2 	udiv	r2, r4, r2
   d79f2:	4422      	add	r2, r4
   d79f4:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d79f8:	fbb4 f3f7 	udiv	r3, r4, r7
   d79fc:	1ad2      	subs	r2, r2, r3
   d79fe:	482d      	ldr	r0, [pc, #180]	; (d7ab4 <gmtime_r+0x12c>)
   d7a00:	fbb4 f0f0 	udiv	r0, r4, r0
   d7a04:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7a08:	1a13      	subs	r3, r2, r0
   d7a0a:	fbb3 f6f6 	udiv	r6, r3, r6
   d7a0e:	4434      	add	r4, r6
   d7a10:	f240 126d 	movw	r2, #365	; 0x16d
   d7a14:	fbb3 f0f2 	udiv	r0, r3, r2
   d7a18:	fbb3 f3f7 	udiv	r3, r3, r7
   d7a1c:	1ae3      	subs	r3, r4, r3
   d7a1e:	fb02 3310 	mls	r3, r2, r0, r3
   d7a22:	2499      	movs	r4, #153	; 0x99
   d7a24:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d7a28:	3202      	adds	r2, #2
   d7a2a:	fbb2 f2f4 	udiv	r2, r2, r4
   d7a2e:	2a0a      	cmp	r2, #10
   d7a30:	fb04 f402 	mul.w	r4, r4, r2
   d7a34:	f104 0602 	add.w	r6, r4, #2
   d7a38:	f04f 0405 	mov.w	r4, #5
   d7a3c:	fbb6 f4f4 	udiv	r4, r6, r4
   d7a40:	bf34      	ite	cc
   d7a42:	2602      	movcc	r6, #2
   d7a44:	f06f 0609 	mvncs.w	r6, #9
   d7a48:	4416      	add	r6, r2
   d7a4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7a4e:	fb02 0505 	mla	r5, r2, r5, r0
   d7a52:	1c5f      	adds	r7, r3, #1
   d7a54:	2e01      	cmp	r6, #1
   d7a56:	bf98      	it	ls
   d7a58:	3501      	addls	r5, #1
   d7a5a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7a5e:	eba7 0704 	sub.w	r7, r7, r4
   d7a62:	d302      	bcc.n	d7a6a <gmtime_r+0xe2>
   d7a64:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7a68:	e014      	b.n	d7a94 <gmtime_r+0x10c>
   d7a6a:	0782      	lsls	r2, r0, #30
   d7a6c:	d105      	bne.n	d7a7a <gmtime_r+0xf2>
   d7a6e:	2464      	movs	r4, #100	; 0x64
   d7a70:	fbb0 f2f4 	udiv	r2, r0, r4
   d7a74:	fb04 0212 	mls	r2, r4, r2, r0
   d7a78:	b94a      	cbnz	r2, d7a8e <gmtime_r+0x106>
   d7a7a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7a7e:	fbb0 f4f2 	udiv	r4, r0, r2
   d7a82:	fb02 0014 	mls	r0, r2, r4, r0
   d7a86:	fab0 f280 	clz	r2, r0
   d7a8a:	0952      	lsrs	r2, r2, #5
   d7a8c:	e000      	b.n	d7a90 <gmtime_r+0x108>
   d7a8e:	2201      	movs	r2, #1
   d7a90:	333b      	adds	r3, #59	; 0x3b
   d7a92:	441a      	add	r2, r3
   d7a94:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7a98:	2300      	movs	r3, #0
   d7a9a:	61ca      	str	r2, [r1, #28]
   d7a9c:	614d      	str	r5, [r1, #20]
   d7a9e:	610e      	str	r6, [r1, #16]
   d7aa0:	60cf      	str	r7, [r1, #12]
   d7aa2:	620b      	str	r3, [r1, #32]
   d7aa4:	4608      	mov	r0, r1
   d7aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7aa8:	00015180 	.word	0x00015180
   d7aac:	fffdc54f 	.word	0xfffdc54f
   d7ab0:	00023ab1 	.word	0x00023ab1
   d7ab4:	00023ab0 	.word	0x00023ab0

000d7ab8 <labs>:
   d7ab8:	2800      	cmp	r0, #0
   d7aba:	bfb8      	it	lt
   d7abc:	4240      	neglt	r0, r0
   d7abe:	4770      	bx	lr

000d7ac0 <__env_lock>:
   d7ac0:	4770      	bx	lr

000d7ac2 <__env_unlock>:
   d7ac2:	4770      	bx	lr

000d7ac4 <dynalib_user>:
   d7ac4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7ad4:	0000 0000 6143 6c6c 6162 6b63 7b00 6422     ....Callback.{"d
   d7ae4:	7665 6369 4965 2244 223a 7325 2c22 7422     eviceID":"%s","t
   d7af4:	6d69 7365 6174 706d 3a22 2522 2273 222c     imestamp":"%s","
   d7b04:	6574 706d 7265 7461 7275 2265 253a 2c66     temperature":%f,
   d7b14:	7422 6d65 5570 696e 2274 223a 6325 2c22     "tempUnit":"%c",
   d7b24:	6822 6d75 6469 7469 2279 253a 2c66 6822     "humidity":%f,"h
   d7b34:	6d75 6e55 7469 3a22 2522 2263 007d 7325     umUnit":"%c"}.%s
   d7b44:	7300 6e65 6f73 4472 7461 0061 7570 6c62     .sensorData.publ
   d7b54:	7369 6568 0064 0000                         ished...

000d7b5c <_ZTVN5spark13EthernetClassE>:
	...
   d7b64:	4ad3 000d 4ac9 000d 4abf 000d 4ab5 000d     .J...J...J...J..
   d7b74:	4aa9 000d 4a9d 000d 4a91 000d 4a89 000d     .J...J...J...J..
   d7b84:	4a7f 000d 4a75 000d 5e01 000d               .J..uJ...^..

000d7b90 <_ZTV8SPIClass>:
	...
   d7b98:	4af1 000d 4af3 000d                         .J...J..

000d7ba0 <_ZTV3UDP>:
	...
   d7ba8:	5189 000d 51ad 000d 4b69 000d 4c93 000d     .Q...Q..iK...L..
   d7bb8:	4b61 000d 4b7f 000d 4b9d 000d 4bb7 000d     aK...K...K...K..
   d7bc8:	4bdb 000d 4c77 000d 4f79 000d 4d19 000d     .K..wL..yO...M..
   d7bd8:	4e99 000d 4b49 000d 511f 000d 4e1d 000d     .N..IK...Q...N..
   d7be8:	4d51 000d 514d 000d 4cbd 000d 4b57 000d     QM..MQ...L..WK..
   d7bf8:	4cf9 000d 4b5d 000d 4bb9 000d fff0 ffff     .L..]K...K......
   d7c08:	0000 0000 4bd3 000d 0066 6e6c 6600 006e     .....K..f.ln.fn.
   d7c18:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d7c28:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d7c38:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d7c48:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
   d7c58:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d7c68:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d7c78:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d7c88:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d7c98:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d7ca8:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d7cb8:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d7cc8:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d7cd8:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d7ce8:	0063 6c61 006c 2b25 3330 3a64 3025 7532     c.all.%+03d:%02u
   d7cf8:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d7d08:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d7d18 <_ZTV9IPAddress>:
	...
   d7d20:	573f 000d 5731 000d 5733 000d               ?W..1W..3W..

000d7d2c <_ZTV9USBSerial>:
	...
   d7d34:	5845 000d 5889 000d 5863 000d 528b 000d     EX...X..cX...R..
   d7d44:	585d 000d 5847 000d 584f 000d 5883 000d     ]X..GX..OX...X..
   d7d54:	5857 000d 5841 000d                         WX..AX..

000d7d5c <_ZTV11USARTSerial>:
	...
   d7d64:	5929 000d 594d 000d 5959 000d 528b 000d     )Y..MY..YY...R..
   d7d74:	5935 000d 5941 000d 593b 000d 5947 000d     5Y..AY..;Y..GY..
   d7d84:	592b 000d 592f 000d                         +Y../Y..

000d7d8c <_ZTV7TwoWire>:
	...
   d7d94:	59fd 000d 5a47 000d 5a1f 000d 59ff 000d     .Y..GZ...Z...Y..
   d7da4:	5a27 000d 5a2f 000d 5a37 000d 5a3f 000d     'Z../Z..7Z..?Z..

000d7db4 <_ZTVN5spark9MeshClassE>:
	...
   d7dbc:	5adf 000d 5ad5 000d 5acb 000d 5ac1 000d     .Z...Z...Z...Z..
   d7dcc:	5ab5 000d 5aa9 000d 5a9d 000d 5a95 000d     .Z...Z...Z...Z..
   d7ddc:	5a8b 000d 5a81 000d 5e01 000d 6666 3330     .Z...Z...^..ff03
   d7dec:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d7dfc:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d7e0c:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d7e18 <_ZTVN5spark12NetworkClassE>:
	...
   d7e20:	5d99 000d 5da3 000d 5dad 000d 5db7 000d     .]...]...]...]..
   d7e30:	5dc1 000d 5dcd 000d 5dd9 000d 5de5 000d     .]...]...]...]..
   d7e40:	5ded 000d 5df7 000d 5e01 000d               .]...]...^..

000d7e4c <day_name.4725>:
   d7e4c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d7e5c:	6972 6153 4a74                                   riSat

000d7e61 <mon_name.4726>:
   d7e61:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d7e71:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d7e81:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d7e91:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d7ea1:	6425 000a                                   %d..

000d7ea5 <_ctype_>:
   d7ea5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d7eb5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d7ec5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d7ed5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d7ee5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d7ef5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d7f05:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d7f15:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d7f25:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d7fa8 <__sf_fake_stdin>:
	...

000d7fc8 <__sf_fake_stdout>:
	...

000d7fe8 <__sf_fake_stderr>:
	...
   d8008:	0043 0000                                   C...

000d800c <__month_lengths>:
   d800c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d801c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d802c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d803c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d804c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d805c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d806c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   d807c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   d808c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   d809c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   d80ac:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   d80bc:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   d80cc:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   d80dc:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   d80ec:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   d80fc:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   d810c:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   d811c:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   d812c:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   d813c:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   d814c:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   d815c:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   d816c:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   d817c:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   d818c:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   d819c:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   d81ac:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   d81bc:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   d81cc:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   d81dc:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   d81ec:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000d81f8 <_C_time_locale>:
   d81f8:	80cf 000d 80d3 000d 80d7 000d 80db 000d     ................
   d8208:	80df 000d 80e3 000d 80e7 000d 80eb 000d     ................
   d8218:	80ef 000d 80f3 000d 80f7 000d 80fb 000d     ................
   d8228:	80ff 000d 8107 000d 8110 000d 8116 000d     ................
   d8238:	80df 000d 811c 000d 8121 000d 8126 000d     ........!...&...
   d8248:	812d 000d 8137 000d 813f 000d 8148 000d     -...7...?...H...
   d8258:	8151 000d 8155 000d 8159 000d 815d 000d     Q...U...Y...]...
   d8268:	8161 000d 8165 000d 8169 000d 816d 000d     a...e...i...m...
   d8278:	8174 000d 817b 000d 8183 000d 818d 000d     t...{...........
   d8288:	8196 000d 819d 000d 81a6 000d 81af 000d     ................
   d8298:	81b8 000d 81cd 000d 81d0 000d 81d3 000d     ................
   d82a8:	80ff 000d 8107 000d 8110 000d 8116 000d     ................
   d82b8:	80df 000d 811c 000d 8121 000d 8126 000d     ........!...&...
   d82c8:	812d 000d 8137 000d 813f 000d 8148 000d     -...7...?...H...
   d82d8:	7c72 000d 81eb 000d 7c26 000d 7c26 000d     r|......&|..&|..
   d82e8:	7c26 000d 7c26 000d 7c26 000d 5a54 4700     &|..&|..&|..TZ.G
   d82f8:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   d8308:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   d8318:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   d8328:	3a6e 6825 2575 006e                         n:%hu%n.

000d8330 <link_const_variable_data_end>:
   d8330:	000d41f9 	.word	0x000d41f9
   d8334:	000d4231 	.word	0x000d4231
   d8338:	000d44ad 	.word	0x000d44ad
   d833c:	000d4add 	.word	0x000d4add
   d8340:	000d4b31 	.word	0x000d4b31
   d8344:	000d53e1 	.word	0x000d53e1
   d8348:	000d55f9 	.word	0x000d55f9
   d834c:	000d5631 	.word	0x000d5631
   d8350:	000d5d4d 	.word	0x000d5d4d
   d8354:	000d5ecd 	.word	0x000d5ecd
   d8358:	000d5f4d 	.word	0x000d5f4d
   d835c:	000d5fdd 	.word	0x000d5fdd
   d8360:	000d6061 	.word	0x000d6061
   d8364:	000d6125 	.word	0x000d6125
   d8368:	000d61e9 	.word	0x000d61e9

000d836c <link_constructors_end>:
   d836c:	00000000 	.word	0x00000000
