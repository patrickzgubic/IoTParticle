
c:/projects/IOTArgon/target/1.1.0/argon/IOTArgon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017138  2**0
                  CONTENTS
  3 .data         0000006c  2003e304  000d70a0  0000e304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000480  2003e370  2003e370  0001e370  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d710c  000d710c  0001710c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7134  000d7134  00017134  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bcf3c  00000000  00000000  00017138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010829  00000000  00000000  000d4074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016699  00000000  00000000  000e489d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002168  00000000  00000000  000faf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000035a0  00000000  00000000  000fd09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00034a60  00000000  00000000  0010063e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027d26  00000000  00000000  0013509e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000dafd6  00000000  00000000  0015cdc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c058  00000000  00000000  00237d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	10 6c 0d 00                                         .l..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd8a 	bl	d6b46 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd8f 	bl	d6b5c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e304 	.word	0x2003e304
   d4048:	000d70a0 	.word	0x000d70a0
   d404c:	2003e370 	.word	0x2003e370
   d4050:	2003e370 	.word	0x2003e370
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fbbd 	bl	d57d8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7098 	.word	0x000d7098
   d4080:	000d7054 	.word	0x000d7054

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b868 	b.w	d4158 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8af 	bl	d41ec <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb6f 	b.w	d5774 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bdf9 	b.w	d4c8c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bdf7 	b.w	d4c8c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bdfd 	b.w	d4c9c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bdfb 	b.w	d4c9c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z8callbackPcPhj>:

String deviceID = System.deviceID();

byte server[] ={192,168,7,31}; 

void callback(char* topic, byte* payload, unsigned int length) {
   d40b8:	b508      	push	{r3, lr}
	Serial.printf("Callback");
   d40ba:	f001 fc83 	bl	d59c4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40be:	4a03      	ldr	r2, [pc, #12]	; (d40cc <_Z8callbackPcPhj+0x14>)
   d40c0:	2100      	movs	r1, #0
}
   d40c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40c6:	f001 baab 	b.w	d5620 <_ZN5Print11printf_implEbPKcz>
   d40ca:	bf00      	nop
   d40cc:	000d6c24 	.word	0x000d6c24

000d40d0 <_Z12meshcallbackPKcS0_>:
MQTT client(server, 1883, callback);

const char *message;
void meshcallback(const char *event, const char *data)
{
   d40d0:	b510      	push	{r4, lr}
	
	if (client.isConnected() && data) {
   d40d2:	4814      	ldr	r0, [pc, #80]	; (d4124 <_Z12meshcallbackPKcS0_+0x54>)
}
MQTT client(server, 1883, callback);

const char *message;
void meshcallback(const char *event, const char *data)
{
   d40d4:	460c      	mov	r4, r1
	
	if (client.isConnected() && data) {
   d40d6:	f000 f9f3 	bl	d44c0 <_ZN4MQTT11isConnectedEv>
   d40da:	b120      	cbz	r0, d40e6 <_Z12meshcallbackPKcS0_+0x16>
   d40dc:	b98c      	cbnz	r4, d4102 <_Z12meshcallbackPKcS0_+0x32>
		Serial.println("published");
    }
	else
	{
		if(!data){
			Serial.println("Data Error");
   d40de:	f001 fc71 	bl	d59c4 <_Z16_fetch_usbserialv>
   d40e2:	4911      	ldr	r1, [pc, #68]	; (d4128 <_Z12meshcallbackPKcS0_+0x58>)
   d40e4:	e004      	b.n	d40f0 <_Z12meshcallbackPKcS0_+0x20>
		Serial.println(data);
		Serial.println("published");
    }
	else
	{
		if(!data){
   d40e6:	2c00      	cmp	r4, #0
   d40e8:	d0f9      	beq.n	d40de <_Z12meshcallbackPKcS0_+0xe>
			Serial.println("Data Error");
		}
		else
		{
			Serial.println("Server not found");
   d40ea:	f001 fc6b 	bl	d59c4 <_Z16_fetch_usbserialv>
   d40ee:	490f      	ldr	r1, [pc, #60]	; (d412c <_Z12meshcallbackPKcS0_+0x5c>)
   d40f0:	f001 fa53 	bl	d559a <_ZN5Print7printlnEPKc>
   d40f4:	4b0e      	ldr	r3, [pc, #56]	; (d4130 <_Z12meshcallbackPKcS0_+0x60>)
		}
		client.connect(deviceID);
   d40f6:	480b      	ldr	r0, [pc, #44]	; (d4124 <_Z12meshcallbackPKcS0_+0x54>)
   d40f8:	6819      	ldr	r1, [r3, #0]
	}
	   
}
   d40fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		}
		else
		{
			Serial.println("Server not found");
		}
		client.connect(deviceID);
   d40fe:	f000 bac3 	b.w	d4688 <_ZN4MQTT7connectEPKc>
const char *message;
void meshcallback(const char *event, const char *data)
{
	
	if (client.isConnected() && data) {
        client.publish("data",data);
   d4102:	4622      	mov	r2, r4
   d4104:	490b      	ldr	r1, [pc, #44]	; (d4134 <_Z12meshcallbackPKcS0_+0x64>)
   d4106:	4807      	ldr	r0, [pc, #28]	; (d4124 <_Z12meshcallbackPKcS0_+0x54>)
   d4108:	f000 fb3e 	bl	d4788 <_ZN4MQTT7publishEPKcS1_>
		Serial.println(data);
   d410c:	f001 fc5a 	bl	d59c4 <_Z16_fetch_usbserialv>
   d4110:	4621      	mov	r1, r4
   d4112:	f001 fa42 	bl	d559a <_ZN5Print7printlnEPKc>
		Serial.println("published");
   d4116:	f001 fc55 	bl	d59c4 <_Z16_fetch_usbserialv>
   d411a:	4907      	ldr	r1, [pc, #28]	; (d4138 <_Z12meshcallbackPKcS0_+0x68>)
			Serial.println("Server not found");
		}
		client.connect(deviceID);
	}
	   
}
   d411c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	
	if (client.isConnected() && data) {
        client.publish("data",data);
		Serial.println(data);
		Serial.println("published");
   d4120:	f001 ba3b 	b.w	d559a <_ZN5Print7printlnEPKc>
   d4124:	2003e384 	.word	0x2003e384
   d4128:	000d6c2d 	.word	0x000d6c2d
   d412c:	000d6c38 	.word	0x000d6c38
   d4130:	2003e374 	.word	0x2003e374
   d4134:	000d6c49 	.word	0x000d6c49
   d4138:	000d6c4e 	.word	0x000d6c4e

000d413c <_ZN10CloudClass12syncTimeDoneEv.isra.5>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d413c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d413e:	2000      	movs	r0, #0
   d4140:	f000 fd94 	bl	d4c6c <spark_sync_time_pending>
   d4144:	b128      	cbz	r0, d4152 <_ZN10CloudClass12syncTimeDoneEv.isra.5+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4146:	f000 fd79 	bl	d4c3c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d414a:	f080 0001 	eor.w	r0, r0, #1
   d414e:	b2c0      	uxtb	r0, r0
   d4150:	bd08      	pop	{r3, pc}
   d4152:	2001      	movs	r0, #1
    }
   d4154:	bd08      	pop	{r3, pc}
	...

000d4158 <setup>:
	}
	   
}

void setup()
{
   d4158:	b510      	push	{r4, lr}
   d415a:	b086      	sub	sp, #24
	Serial.begin(9600);
   d415c:	f001 fc32 	bl	d59c4 <_Z16_fetch_usbserialv>
   d4160:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4164:	f001 fc22 	bl	d59ac <_ZN9USBSerial5beginEl>
	Time.zone(1);
   d4168:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d416c:	f001 fa9e 	bl	d56ac <_ZN9TimeClass4zoneEf>
	Serial.println(System.deviceID());
   d4170:	f001 fc28 	bl	d59c4 <_Z16_fetch_usbserialv>
   d4174:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4176:	4668      	mov	r0, sp
   d4178:	f000 fd68 	bl	d4c4c <spark_deviceID>
   d417c:	9900      	ldr	r1, [sp, #0]
   d417e:	4620      	mov	r0, r4
   d4180:	f001 fa0b 	bl	d559a <_ZN5Print7printlnEPKc>
   d4184:	4668      	mov	r0, sp
   d4186:	f001 f95e 	bl	d5446 <_ZN6StringD1Ev>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
   d418a:	2000      	movs	r0, #0
   d418c:	f000 fd66 	bl	d4c5c <spark_sync_time>
	Particle.syncTime();
  	waitUntil(Particle.syncTimeDone);
   d4190:	f7ff ffd4 	bl	d413c <_ZN10CloudClass12syncTimeDoneEv.isra.5>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4194:	b1f0      	cbz	r0, d41d4 <setup+0x7c>
   d4196:	f7ff ffd1 	bl	d413c <_ZN10CloudClass12syncTimeDoneEv.isra.5>
	Serial.print("ip: ");
   d419a:	f001 fc13 	bl	d59c4 <_Z16_fetch_usbserialv>
   d419e:	490f      	ldr	r1, [pc, #60]	; (d41dc <setup+0x84>)
   d41a0:	f001 f9e2 	bl	d5568 <_ZN5Print5printEPKc>
	Serial.println(WiFi.localIP());
   d41a4:	f001 fc0e 	bl	d59c4 <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d41a8:	4b0d      	ldr	r3, [pc, #52]	; (d41e0 <setup+0x88>)
   d41aa:	2200      	movs	r2, #0
   d41ac:	4611      	mov	r1, r2
   d41ae:	4604      	mov	r4, r0
   d41b0:	6858      	ldr	r0, [r3, #4]
   d41b2:	f000 fce3 	bl	d4b7c <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d41b6:	1c81      	adds	r1, r0, #2
   d41b8:	4668      	mov	r0, sp
   d41ba:	f001 fb6f 	bl	d589c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d41be:	4669      	mov	r1, sp
   d41c0:	4620      	mov	r0, r4
   d41c2:	f001 f9f4 	bl	d55ae <_ZN5Print7printlnERK9Printable>
   d41c6:	4b07      	ldr	r3, [pc, #28]	; (d41e4 <setup+0x8c>)
	client.connect(deviceID);
   d41c8:	4807      	ldr	r0, [pc, #28]	; (d41e8 <setup+0x90>)
   d41ca:	6819      	ldr	r1, [r3, #0]
   d41cc:	f000 fa5c 	bl	d4688 <_ZN4MQTT7connectEPKc>
}
   d41d0:	b006      	add	sp, #24
   d41d2:	bd10      	pop	{r4, pc}
            spark_process();
   d41d4:	f000 fd2a 	bl	d4c2c <spark_process>
   d41d8:	e7da      	b.n	d4190 <setup+0x38>
   d41da:	bf00      	nop
   d41dc:	000d6c58 	.word	0x000d6c58
   d41e0:	2003e718 	.word	0x2003e718
   d41e4:	2003e374 	.word	0x2003e374
   d41e8:	2003e384 	.word	0x2003e384

000d41ec <loop>:

void loop()
{
   d41ec:	b508      	push	{r3, lr}
 	Mesh.subscribe("sensorData", meshcallback);
   d41ee:	4a05      	ldr	r2, [pc, #20]	; (d4204 <loop+0x18>)
   d41f0:	4905      	ldr	r1, [pc, #20]	; (d4208 <loop+0x1c>)
   d41f2:	4806      	ldr	r0, [pc, #24]	; (d420c <loop+0x20>)
   d41f4:	f001 fe3a 	bl	d5e6c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
	delay(500);
   d41f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void loop()
{
 	Mesh.subscribe("sensorData", meshcallback);
	delay(500);
   d4200:	f001 ba7a 	b.w	d56f8 <delay>
   d4204:	000d40d1 	.word	0x000d40d1
   d4208:	000d6c5d 	.word	0x000d6c5d
   d420c:	2003e550 	.word	0x2003e550

000d4210 <_GLOBAL__sub_I_deviceID>:
   d4210:	b538      	push	{r3, r4, r5, lr}
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4212:	4c0d      	ldr	r4, [pc, #52]	; (d4248 <_GLOBAL__sub_I_deviceID+0x38>)
 * Date:
 */
#include "MQTT.h"
#include <time.h>

String deviceID = System.deviceID();
   d4214:	4d0d      	ldr	r5, [pc, #52]	; (d424c <_GLOBAL__sub_I_deviceID+0x3c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4216:	f000 fafb 	bl	d4810 <HAL_Pin_Map>
   d421a:	4620      	mov	r0, r4
   d421c:	f000 fd16 	bl	d4c4c <spark_deviceID>
   d4220:	4620      	mov	r0, r4
byte server[] ={192,168,7,31}; 

void callback(char* topic, byte* payload, unsigned int length) {
	Serial.printf("Callback");
}
MQTT client(server, 1883, callback);
   d4222:	4c0b      	ldr	r4, [pc, #44]	; (d4250 <_GLOBAL__sub_I_deviceID+0x40>)
 * Date:
 */
#include "MQTT.h"
#include <time.h>

String deviceID = System.deviceID();
   d4224:	490b      	ldr	r1, [pc, #44]	; (d4254 <_GLOBAL__sub_I_deviceID+0x44>)
   d4226:	462a      	mov	r2, r5
   d4228:	f002 fb06 	bl	d6838 <__aeabi_atexit>
byte server[] ={192,168,7,31}; 

void callback(char* topic, byte* payload, unsigned int length) {
	Serial.printf("Callback");
}
MQTT client(server, 1883, callback);
   d422c:	4b0a      	ldr	r3, [pc, #40]	; (d4258 <_GLOBAL__sub_I_deviceID+0x48>)
   d422e:	490b      	ldr	r1, [pc, #44]	; (d425c <_GLOBAL__sub_I_deviceID+0x4c>)
   d4230:	f240 725b 	movw	r2, #1883	; 0x75b
   d4234:	4620      	mov	r0, r4
   d4236:	f000 f85b 	bl	d42f0 <_ZN4MQTTC1EPhtPFvPcS0_jE>
   d423a:	462a      	mov	r2, r5
   d423c:	4620      	mov	r0, r4
   d423e:	4908      	ldr	r1, [pc, #32]	; (d4260 <_GLOBAL__sub_I_deviceID+0x50>)

void loop()
{
 	Mesh.subscribe("sensorData", meshcallback);
	delay(500);
   d4240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
byte server[] ={192,168,7,31}; 

void callback(char* topic, byte* payload, unsigned int length) {
	Serial.printf("Callback");
}
MQTT client(server, 1883, callback);
   d4244:	f002 baf8 	b.w	d6838 <__aeabi_atexit>
   d4248:	2003e374 	.word	0x2003e374
   d424c:	2003e370 	.word	0x2003e370
   d4250:	2003e384 	.word	0x2003e384
   d4254:	000d5447 	.word	0x000d5447
   d4258:	000d40b9 	.word	0x000d40b9
   d425c:	2003e304 	.word	0x2003e304
   d4260:	000d47af 	.word	0x000d47af

000d4264 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4264:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4266:	6984      	ldr	r4, [r0, #24]
   d4268:	4b0a      	ldr	r3, [pc, #40]	; (d4294 <_ZN9TCPClientD1Ev+0x30>)
   d426a:	6003      	str	r3, [r0, #0]
   d426c:	4605      	mov	r5, r0
   d426e:	b17c      	cbz	r4, d4290 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4270:	6863      	ldr	r3, [r4, #4]
   d4272:	3b01      	subs	r3, #1
   d4274:	6063      	str	r3, [r4, #4]
   d4276:	b95b      	cbnz	r3, d4290 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4278:	6823      	ldr	r3, [r4, #0]
   d427a:	4620      	mov	r0, r4
   d427c:	689b      	ldr	r3, [r3, #8]
   d427e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4280:	68a3      	ldr	r3, [r4, #8]
   d4282:	3b01      	subs	r3, #1
   d4284:	60a3      	str	r3, [r4, #8]
   d4286:	b91b      	cbnz	r3, d4290 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4288:	6823      	ldr	r3, [r4, #0]
   d428a:	4620      	mov	r0, r4
   d428c:	68db      	ldr	r3, [r3, #12]
   d428e:	4798      	blx	r3
   d4290:	4628      	mov	r0, r5
   d4292:	bd38      	pop	{r3, r4, r5, pc}
   d4294:	000d6f30 	.word	0x000d6f30

000d4298 <_ZN9TCPClientD0Ev>:
   d4298:	b510      	push	{r4, lr}
   d429a:	4604      	mov	r4, r0
   d429c:	f7ff ffe2 	bl	d4264 <_ZN9TCPClientD1Ev>
   d42a0:	4620      	mov	r0, r4
   d42a2:	f7ff fefc 	bl	d409e <_ZdlPv>
   d42a6:	4620      	mov	r0, r4
   d42a8:	bd10      	pop	{r4, pc}

000d42aa <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d42aa:	b538      	push	{r3, r4, r5, lr}
   d42ac:	461d      	mov	r5, r3
    this->callback = callback;
   d42ae:	9b05      	ldr	r3, [sp, #20]
   d42b0:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d42b2:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d42b4:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d42b6:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d42b8:	b102      	cbz	r2, d42bc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d42ba:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d42bc:	b119      	cbz	r1, d42c6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d42be:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d42c2:	f001 f91a 	bl	d54fa <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d42c6:	9b04      	ldr	r3, [sp, #16]
   d42c8:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d42ca:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d42cc:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d42ce:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d42d2:	2bff      	cmp	r3, #255	; 0xff
   d42d4:	bfb8      	it	lt
   d42d6:	23ff      	movlt	r3, #255	; 0xff
   d42d8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d42dc:	b108      	cbz	r0, d42e2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d42de:	f7ff fee0 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d42e2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d42e6:	f7ff fed8 	bl	d409a <_Znaj>
   d42ea:	61e0      	str	r0, [r4, #28]
   d42ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d42f0 <_ZN4MQTTC1EPhtPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d42f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d42f4:	4604      	mov	r4, r0
   d42f6:	2500      	movs	r5, #0
   d42f8:	4617      	mov	r7, r2
   d42fa:	4698      	mov	r8, r3
   d42fc:	460e      	mov	r6, r1
   d42fe:	f002 f979 	bl	d65f4 <_ZN9TCPClientC1Ev>
   d4302:	61e5      	str	r5, [r4, #28]
   d4304:	490a      	ldr	r1, [pc, #40]	; (d4330 <_ZN4MQTTC1EPhtPFvPcS0_jE+0x40>)
   d4306:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d430a:	f001 f8e3 	bl	d54d4 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d430e:	23ff      	movs	r3, #255	; 0xff
   d4310:	9302      	str	r3, [sp, #8]
   d4312:	230f      	movs	r3, #15
   d4314:	9300      	str	r3, [sp, #0]
   d4316:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4318:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d431a:	f8cd 8004 	str.w	r8, [sp, #4]
   d431e:	463b      	mov	r3, r7
   d4320:	4632      	mov	r2, r6
   d4322:	4629      	mov	r1, r5
   d4324:	f7ff ffc1 	bl	d42aa <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d4328:	4620      	mov	r0, r4
   d432a:	b004      	add	sp, #16
   d432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4330:	000d6d42 	.word	0x000d6d42

000d4334 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4334:	b510      	push	{r4, lr}
   d4336:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4338:	4620      	mov	r0, r4
   d433a:	f002 f8bf 	bl	d64bc <_ZN9TCPClient9availableEv>
   d433e:	2800      	cmp	r0, #0
   d4340:	d0fa      	beq.n	d4338 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4342:	4620      	mov	r0, r4
   d4344:	f001 ffdb 	bl	d62fe <_ZN9TCPClient4readEv>
}
   d4348:	b2c0      	uxtb	r0, r0
   d434a:	bd10      	pop	{r4, pc}

000d434c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4350:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4352:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4354:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4356:	f7ff ffed 	bl	d4334 <_ZN4MQTT8readByteEv>
   d435a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d435c:	69eb      	ldr	r3, [r5, #28]
   d435e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4362:	f04f 0901 	mov.w	r9, #1
   d4366:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d436a:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d436c:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d436e:	4628      	mov	r0, r5
   d4370:	f7ff ffe0 	bl	d4334 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4374:	69eb      	ldr	r3, [r5, #28]
   d4376:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4378:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d437c:	fb13 f309 	smulbb	r3, r3, r9
   d4380:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4382:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4384:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4386:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4388:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d438a:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d438e:	d501      	bpl.n	d4394 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4390:	4626      	mov	r6, r4
   d4392:	e7ec      	b.n	d436e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4394:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4396:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d439a:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d439e:	d113      	bne.n	d43c8 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d43a0:	4628      	mov	r0, r5
   d43a2:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d43a6:	f7ff ffc5 	bl	d4334 <_ZN4MQTT8readByteEv>
   d43aa:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d43ae:	4628      	mov	r0, r5
   d43b0:	1cf4      	adds	r4, r6, #3
   d43b2:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d43b6:	3602      	adds	r6, #2
   d43b8:	f7ff ffbc 	bl	d4334 <_ZN4MQTT8readByteEv>
   d43bc:	b2b6      	uxth	r6, r6
   d43be:	b2a4      	uxth	r4, r4
   d43c0:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d43c4:	2302      	movs	r3, #2
   d43c6:	e000      	b.n	d43ca <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d43c8:	2300      	movs	r3, #0
   d43ca:	1b1b      	subs	r3, r3, r4
   d43cc:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d43ce:	19a3      	adds	r3, r4, r6
   d43d0:	b29b      	uxth	r3, r3
   d43d2:	429f      	cmp	r7, r3
   d43d4:	d90b      	bls.n	d43ee <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d43d6:	4628      	mov	r0, r5
   d43d8:	f7ff ffac 	bl	d4334 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d43dc:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d43e0:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d43e2:	bf84      	itt	hi
   d43e4:	69eb      	ldrhi	r3, [r5, #28]
   d43e6:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d43e8:	3401      	adds	r4, #1
   d43ea:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d43ec:	e7ef      	b.n	d43ce <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d43ee:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d43f2:	42a0      	cmp	r0, r4
   d43f4:	bf2c      	ite	cs
   d43f6:	4620      	movcs	r0, r4
   d43f8:	2000      	movcc	r0, #0
   d43fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d43fe <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d43fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4400:	4607      	mov	r7, r0
   d4402:	468e      	mov	lr, r1
   d4404:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4406:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d4408:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d440a:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d440c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4410:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d4412:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d4414:	bf18      	it	ne
   d4416:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d441a:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d441c:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d4420:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d4422:	2d00      	cmp	r5, #0
   d4424:	d1f1      	bne.n	d440a <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d4426:	f1c4 0304 	rsb	r3, r4, #4
   d442a:	18d1      	adds	r1, r2, r3
   d442c:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4430:	42a5      	cmp	r5, r4
   d4432:	da06      	bge.n	d4442 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d4434:	1b2b      	subs	r3, r5, r4
   d4436:	a801      	add	r0, sp, #4
   d4438:	4413      	add	r3, r2
   d443a:	5c28      	ldrb	r0, [r5, r0]
   d443c:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d443e:	3501      	adds	r5, #1
   d4440:	e7f6      	b.n	d4430 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4442:	1c72      	adds	r2, r6, #1
   d4444:	4422      	add	r2, r4
   d4446:	4638      	mov	r0, r7
   d4448:	f001 fe37 	bl	d60ba <_ZN9TCPClient5writeEPKhj>
   d444c:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d444e:	f000 fa27 	bl	d48a0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4452:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d4454:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4456:	4434      	add	r4, r6
   d4458:	b2a8      	uxth	r0, r5
}
   d445a:	1a23      	subs	r3, r4, r0
   d445c:	4258      	negs	r0, r3
   d445e:	4158      	adcs	r0, r3
   d4460:	b003      	add	sp, #12
   d4462:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4464 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4464:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d4466:	69c3      	ldr	r3, [r0, #28]
   d4468:	22e0      	movs	r2, #224	; 0xe0
   d446a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d446c:	69c3      	ldr	r3, [r0, #28]
   d446e:	2200      	movs	r2, #0
   d4470:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4472:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d4474:	2202      	movs	r2, #2
   d4476:	69c1      	ldr	r1, [r0, #28]
   d4478:	f001 fe1f 	bl	d60ba <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d447c:	4620      	mov	r0, r4
   d447e:	f002 f806 	bl	d648e <_ZN9TCPClient4stopEv>
   d4482:	f000 fa0d 	bl	d48a0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4486:	6260      	str	r0, [r4, #36]	; 0x24
   d4488:	62a0      	str	r0, [r4, #40]	; 0x28
   d448a:	bd10      	pop	{r4, pc}

000d448c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d448c:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d448e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4490:	b29b      	uxth	r3, r3
   d4492:	460d      	mov	r5, r1
   d4494:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d4496:	f815 6b01 	ldrb.w	r6, [r5], #1
   d449a:	b2a4      	uxth	r4, r4
   d449c:	b13e      	cbz	r6, d44ae <_ZN4MQTT11writeStringEPKcPht+0x22>
   d449e:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d44a2:	429f      	cmp	r7, r3
   d44a4:	d903      	bls.n	d44ae <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d44a6:	1c5c      	adds	r4, r3, #1
   d44a8:	54d6      	strb	r6, [r2, r3]
   d44aa:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d44ac:	e7f2      	b.n	d4494 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d44ae:	1b19      	subs	r1, r3, r4
   d44b0:	440a      	add	r2, r1
   d44b2:	1221      	asrs	r1, r4, #8
   d44b4:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d44b8:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d44bc:	4618      	mov	r0, r3
   d44be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d44c0 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d44c0:	b538      	push	{r3, r4, r5, lr}
   d44c2:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d44c4:	f001 fe0f 	bl	d60e6 <_ZN9TCPClient9connectedEv>
   d44c8:	2800      	cmp	r0, #0
   d44ca:	bf14      	ite	ne
   d44cc:	2401      	movne	r4, #1
   d44ce:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d44d0:	d102      	bne.n	d44d8 <_ZN4MQTT11isConnectedEv+0x18>
   d44d2:	4628      	mov	r0, r5
   d44d4:	f001 ffdb 	bl	d648e <_ZN9TCPClient4stopEv>
    return rc;
}
   d44d8:	4620      	mov	r0, r4
   d44da:	bd38      	pop	{r3, r4, r5, pc}

000d44dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d44dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d44e0:	b087      	sub	sp, #28
   d44e2:	4604      	mov	r4, r0
   d44e4:	4689      	mov	r9, r1
   d44e6:	4617      	mov	r7, r2
   d44e8:	461e      	mov	r6, r3
   d44ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d44ee:	f7ff ffe7 	bl	d44c0 <_ZN4MQTT11isConnectedEv>
   d44f2:	4605      	mov	r5, r0
   d44f4:	2800      	cmp	r0, #0
   d44f6:	f040 80bd 	bne.w	d4674 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d44fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d44fc:	b939      	cbnz	r1, d450e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d44fe:	4603      	mov	r3, r0
   d4500:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4504:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4506:	4620      	mov	r0, r4
   d4508:	f001 fe1a 	bl	d6140 <_ZN9TCPClient7connectEPKctm>
   d450c:	e009      	b.n	d4522 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d450e:	4668      	mov	r0, sp
   d4510:	f001 fa04 	bl	d591c <_ZN9IPAddressC1EPKh>
   d4514:	462b      	mov	r3, r5
   d4516:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d451a:	4669      	mov	r1, sp
   d451c:	4620      	mov	r0, r4
   d451e:	f001 ff39 	bl	d6394 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d4522:	2800      	cmp	r0, #0
   d4524:	f000 80a2 	beq.w	d466c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d4528:	2301      	movs	r3, #1
   d452a:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d452c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d4530:	2b04      	cmp	r3, #4
   d4532:	d115      	bne.n	d4560 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4534:	4b52      	ldr	r3, [pc, #328]	; (d4680 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d4536:	6818      	ldr	r0, [r3, #0]
   d4538:	889a      	ldrh	r2, [r3, #4]
   d453a:	f8ad 2004 	strh.w	r2, [sp, #4]
   d453e:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4540:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4542:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4544:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4546:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d454a:	1d53      	adds	r3, r2, #5
   d454c:	f8c2 0005 	str.w	r0, [r2, #5]
   d4550:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d4554:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4558:	719a      	strb	r2, [r3, #6]
   d455a:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d455c:	230c      	movs	r3, #12
   d455e:	e012      	b.n	d4586 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4560:	4b48      	ldr	r3, [pc, #288]	; (d4684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4562:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4566:	6818      	ldr	r0, [r3, #0]
   d4568:	6859      	ldr	r1, [r3, #4]
   d456a:	7a1b      	ldrb	r3, [r3, #8]
   d456c:	466a      	mov	r2, sp
   d456e:	c203      	stmia	r2!, {r0, r1}
   d4570:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4572:	466b      	mov	r3, sp
   d4574:	cb03      	ldmia	r3!, {r0, r1}
   d4576:	f8cc 0005 	str.w	r0, [ip, #5]
   d457a:	f8cc 1009 	str.w	r1, [ip, #9]
   d457e:	7813      	ldrb	r3, [r2, #0]
   d4580:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4584:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d4586:	f1b8 0f00 	cmp.w	r8, #0
   d458a:	d00a      	beq.n	d45a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d458c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4590:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d4594:	0152      	lsls	r2, r2, #5
   d4596:	f042 0206 	orr.w	r2, r2, #6
   d459a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d459e:	b2d2      	uxtb	r2, r2
   d45a0:	e000      	b.n	d45a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d45a2:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d45a4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d45a8:	b909      	cbnz	r1, d45ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d45aa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d45ae:	b12f      	cbz	r7, d45bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d45b0:	b916      	cbnz	r6, d45b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d45b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d45b6:	e001      	b.n	d45bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d45b8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d45bc:	69e1      	ldr	r1, [r4, #28]
   d45be:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d45c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d45c2:	69e1      	ldr	r1, [r4, #28]
   d45c4:	1c58      	adds	r0, r3, #1
   d45c6:	1212      	asrs	r2, r2, #8
   d45c8:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d45ca:	1c9a      	adds	r2, r3, #2
   d45cc:	69e1      	ldr	r1, [r4, #28]
   d45ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d45d0:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d45d2:	3303      	adds	r3, #3
   d45d4:	69e2      	ldr	r2, [r4, #28]
   d45d6:	4649      	mov	r1, r9
   d45d8:	4620      	mov	r0, r4
   d45da:	f7ff ff57 	bl	d448c <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d45de:	f1b8 0f00 	cmp.w	r8, #0
   d45e2:	d00b      	beq.n	d45fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d45e4:	4603      	mov	r3, r0
   d45e6:	69e2      	ldr	r2, [r4, #28]
   d45e8:	4641      	mov	r1, r8
   d45ea:	4620      	mov	r0, r4
   d45ec:	f7ff ff4e 	bl	d448c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d45f0:	69e2      	ldr	r2, [r4, #28]
   d45f2:	9911      	ldr	r1, [sp, #68]	; 0x44
   d45f4:	4603      	mov	r3, r0
   d45f6:	4620      	mov	r0, r4
   d45f8:	f7ff ff48 	bl	d448c <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d45fc:	b167      	cbz	r7, d4618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d45fe:	4603      	mov	r3, r0
   d4600:	69e2      	ldr	r2, [r4, #28]
   d4602:	4639      	mov	r1, r7
   d4604:	4620      	mov	r0, r4
   d4606:	f7ff ff41 	bl	d448c <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d460a:	b12e      	cbz	r6, d4618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d460c:	4603      	mov	r3, r0
   d460e:	69e2      	ldr	r2, [r4, #28]
   d4610:	4631      	mov	r1, r6
   d4612:	4620      	mov	r0, r4
   d4614:	f7ff ff3a 	bl	d448c <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d4618:	1f43      	subs	r3, r0, #5
   d461a:	b29b      	uxth	r3, r3
   d461c:	69e2      	ldr	r2, [r4, #28]
   d461e:	2110      	movs	r1, #16
   d4620:	4620      	mov	r0, r4
   d4622:	f7ff feec 	bl	d43fe <_ZN4MQTT5writeEhPht>
   d4626:	f000 f93b 	bl	d48a0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d462a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d462e:	6260      	str	r0, [r4, #36]	; 0x24
   d4630:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d4632:	4620      	mov	r0, r4
   d4634:	f001 ff42 	bl	d64bc <_ZN9TCPClient9availableEv>
   d4638:	b940      	cbnz	r0, d464c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d463a:	f000 f931 	bl	d48a0 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d463e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4640:	1ac0      	subs	r0, r0, r3
   d4642:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4644:	4373      	muls	r3, r6
   d4646:	4298      	cmp	r0, r3
   d4648:	d9f3      	bls.n	d4632 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d464a:	e00f      	b.n	d466c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d464c:	4669      	mov	r1, sp
   d464e:	4620      	mov	r0, r4
   d4650:	f7ff fe7c 	bl	d434c <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d4654:	2804      	cmp	r0, #4
   d4656:	d109      	bne.n	d466c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d4658:	69e3      	ldr	r3, [r4, #28]
   d465a:	78de      	ldrb	r6, [r3, #3]
   d465c:	b936      	cbnz	r6, d466c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d465e:	f000 f91f 	bl	d48a0 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d4662:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d4664:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4666:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d466a:	e004      	b.n	d4676 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d466c:	4620      	mov	r0, r4
   d466e:	f001 ff0e 	bl	d648e <_ZN9TCPClient4stopEv>
   d4672:	e000      	b.n	d4676 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d4674:	2500      	movs	r5, #0
}
   d4676:	4628      	mov	r0, r5
   d4678:	b007      	add	sp, #28
   d467a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d467e:	bf00      	nop
   d4680:	000d6c68 	.word	0x000d6c68
   d4684:	000d6c6f 	.word	0x000d6c6f

000d4688 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d4688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d468a:	2304      	movs	r3, #4
   d468c:	9305      	str	r3, [sp, #20]
   d468e:	2301      	movs	r3, #1
   d4690:	9304      	str	r3, [sp, #16]
   d4692:	2300      	movs	r3, #0
   d4694:	9303      	str	r3, [sp, #12]
   d4696:	9302      	str	r3, [sp, #8]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	9300      	str	r3, [sp, #0]
   d469c:	461a      	mov	r2, r3
   d469e:	f7ff ff1d 	bl	d44dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d46a2:	b007      	add	sp, #28
   d46a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d46a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d46a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d46ae:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d46b2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d46b6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d46ba:	4604      	mov	r4, r0
   d46bc:	468b      	mov	fp, r1
   d46be:	4691      	mov	r9, r2
   d46c0:	469a      	mov	sl, r3
    if (isConnected()) {
   d46c2:	f7ff fefd 	bl	d44c0 <_ZN4MQTT11isConnectedEv>
   d46c6:	2800      	cmp	r0, #0
   d46c8:	d04c      	beq.n	d4764 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d46ca:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d46ce:	69e0      	ldr	r0, [r4, #28]
   d46d0:	2100      	movs	r1, #0
   d46d2:	f002 fa43 	bl	d6b5c <memset>

        length = writeString(topic, buffer, length);
   d46d6:	2305      	movs	r3, #5
   d46d8:	69e2      	ldr	r2, [r4, #28]
   d46da:	4659      	mov	r1, fp
   d46dc:	4620      	mov	r0, r4
   d46de:	f7ff fed5 	bl	d448c <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d46e2:	1e6b      	subs	r3, r5, #1
   d46e4:	2b01      	cmp	r3, #1
   d46e6:	d812      	bhi.n	d470e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d46e8:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d46ea:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d46ec:	3301      	adds	r3, #1
   d46ee:	b29b      	uxth	r3, r3
   d46f0:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d46f2:	121b      	asrs	r3, r3, #8
   d46f4:	5413      	strb	r3, [r2, r0]
   d46f6:	1c41      	adds	r1, r0, #1
   d46f8:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d46fa:	69e3      	ldr	r3, [r4, #28]
   d46fc:	8c22      	ldrh	r2, [r4, #32]
   d46fe:	545a      	strb	r2, [r3, r1]
   d4700:	3002      	adds	r0, #2
   d4702:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4704:	b11e      	cbz	r6, d470e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d4706:	8c23      	ldrh	r3, [r4, #32]
   d4708:	1c5a      	adds	r2, r3, #1
   d470a:	8422      	strh	r2, [r4, #32]
   d470c:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d470e:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4710:	b291      	uxth	r1, r2
   d4712:	1883      	adds	r3, r0, r2
   d4714:	458a      	cmp	sl, r1
   d4716:	b29b      	uxth	r3, r3
   d4718:	d90a      	bls.n	d4730 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d471a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d471e:	429e      	cmp	r6, r3
   d4720:	f102 0201 	add.w	r2, r2, #1
   d4724:	d904      	bls.n	d4730 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d4726:	f819 6001 	ldrb.w	r6, [r9, r1]
   d472a:	69e1      	ldr	r1, [r4, #28]
   d472c:	54ce      	strb	r6, [r1, r3]
   d472e:	e7ef      	b.n	d4710 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d4730:	f1b8 0f00 	cmp.w	r8, #0
   d4734:	bf0c      	ite	eq
   d4736:	2130      	moveq	r1, #48	; 0x30
   d4738:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d473a:	b10f      	cbz	r7, d4740 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d473c:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d4740:	2d02      	cmp	r5, #2
   d4742:	d102      	bne.n	d474a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d4744:	f041 0104 	orr.w	r1, r1, #4
   d4748:	e003      	b.n	d4752 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d474a:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d474c:	bf08      	it	eq
   d474e:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4752:	3b05      	subs	r3, #5
   d4754:	69e2      	ldr	r2, [r4, #28]
   d4756:	b29b      	uxth	r3, r3
   d4758:	4620      	mov	r0, r4
    }
    return false;
}
   d475a:	b001      	add	sp, #4
   d475c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4760:	f7ff be4d 	b.w	d43fe <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4764:	b001      	add	sp, #4
   d4766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d476a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d476a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d476c:	9c08      	ldr	r4, [sp, #32]
   d476e:	9403      	str	r4, [sp, #12]
   d4770:	2400      	movs	r4, #0
   d4772:	9402      	str	r4, [sp, #8]
   d4774:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4778:	9401      	str	r4, [sp, #4]
   d477a:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d477e:	9400      	str	r4, [sp, #0]
   d4780:	f7ff ff92 	bl	d46a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4784:	b004      	add	sp, #16
   d4786:	bd10      	pop	{r4, pc}

000d4788 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d478a:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d478c:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d478e:	460e      	mov	r6, r1
   d4790:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4792:	f002 fa13 	bl	d6bbc <strlen>
   d4796:	2300      	movs	r3, #0
   d4798:	9302      	str	r3, [sp, #8]
   d479a:	9301      	str	r3, [sp, #4]
   d479c:	9300      	str	r3, [sp, #0]
   d479e:	4622      	mov	r2, r4
   d47a0:	4603      	mov	r3, r0
   d47a2:	4631      	mov	r1, r6
   d47a4:	4628      	mov	r0, r5
   d47a6:	f7ff ffe0 	bl	d476a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d47aa:	b004      	add	sp, #16
   d47ac:	bd70      	pop	{r4, r5, r6, pc}

000d47ae <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d47ae:	b510      	push	{r4, lr}
   d47b0:	4604      	mov	r4, r0
    if (isConnected()) {
   d47b2:	f7ff fe85 	bl	d44c0 <_ZN4MQTT11isConnectedEv>
   d47b6:	b110      	cbz	r0, d47be <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d47b8:	4620      	mov	r0, r4
   d47ba:	f7ff fe53 	bl	d4464 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d47be:	69e0      	ldr	r0, [r4, #28]
   d47c0:	b108      	cbz	r0, d47c6 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d47c2:	f7ff fc6e 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d47c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d47ca:	f000 fe3c 	bl	d5446 <_ZN6StringD1Ev>
   d47ce:	4620      	mov	r0, r4
   d47d0:	f7ff fd48 	bl	d4264 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d47d4:	4620      	mov	r0, r4
   d47d6:	bd10      	pop	{r4, pc}

000d47d8 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d47d8:	f000 b81a 	b.w	d4810 <HAL_Pin_Map>

000d47dc <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d47dc:	b508      	push	{r3, lr}
   d47de:	f000 f817 	bl	d4810 <HAL_Pin_Map>
   d47e2:	4b01      	ldr	r3, [pc, #4]	; (d47e8 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d47e4:	6018      	str	r0, [r3, #0]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	2003e3dc 	.word	0x2003e3dc

000d47ec <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d47ec:	f000 b810 	b.w	d4810 <HAL_Pin_Map>

000d47f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <netdb_freeaddrinfo+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	689b      	ldr	r3, [r3, #8]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030268 	.word	0x00030268

000d4800 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <netdb_getaddrinfo+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	68db      	ldr	r3, [r3, #12]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030268 	.word	0x00030268

000d4810 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_Pin_Map+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	681b      	ldr	r3, [r3, #0]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003022c 	.word	0x0003022c

000d4820 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_SPI_Init+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	69db      	ldr	r3, [r3, #28]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030230 	.word	0x00030230

000d4830 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <if_name_to_index+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	691b      	ldr	r3, [r3, #16]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003026c 	.word	0x0003026c

000d4840 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <if_index_to_name+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	695b      	ldr	r3, [r3, #20]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003026c 	.word	0x0003026c

000d4850 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <if_get_by_index+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	699b      	ldr	r3, [r3, #24]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003026c 	.word	0x0003026c

000d4860 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <if_get_addrs+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003026c 	.word	0x0003026c

000d4870 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <if_free_if_addrs+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003026c 	.word	0x0003026c

000d4880 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_RNG_GetRandomNumber+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	685b      	ldr	r3, [r3, #4]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030218 	.word	0x00030218

000d4890 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_Delay_Milliseconds+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	689b      	ldr	r3, [r3, #8]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030218 	.word	0x00030218

000d48a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	695b      	ldr	r3, [r3, #20]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030218 	.word	0x00030218

000d48b0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <os_thread_create+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	685b      	ldr	r3, [r3, #4]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030248 	.word	0x00030248

000d48c0 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <os_thread_is_current+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	689b      	ldr	r3, [r3, #8]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030248 	.word	0x00030248

000d48d0 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <os_thread_yield+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	68db      	ldr	r3, [r3, #12]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030248 	.word	0x00030248

000d48e0 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <os_thread_join+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	691b      	ldr	r3, [r3, #16]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030248 	.word	0x00030248

000d48f0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <os_thread_cleanup+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	695b      	ldr	r3, [r3, #20]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030248 	.word	0x00030248

000d4900 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <os_mutex_create+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030248 	.word	0x00030248

000d4910 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <os_mutex_recursive_create+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030248 	.word	0x00030248

000d4920 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <os_mutex_recursive_lock+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030248 	.word	0x00030248

000d4930 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <os_mutex_recursive_unlock+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030248 	.word	0x00030248

000d4940 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <os_thread_exit+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030248 	.word	0x00030248

000d4950 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <inet_inet_ntop+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030264 	.word	0x00030264

000d4960 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <inet_inet_pton+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	699b      	ldr	r3, [r3, #24]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030264 	.word	0x00030264

000d4970 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <inet_htonl+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6a1b      	ldr	r3, [r3, #32]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030264 	.word	0x00030264

000d4980 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <inet_ntohs+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030264 	.word	0x00030264

000d4990 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <inet_htons+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	00030264 	.word	0x00030264

000d49a0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_USART_Init+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	681b      	ldr	r3, [r3, #0]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	0003023c 	.word	0x0003023c

000d49b0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_USART_Write_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	68db      	ldr	r3, [r3, #12]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003023c 	.word	0x0003023c

000d49c0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_USART_Available_Data+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	691b      	ldr	r3, [r3, #16]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	0003023c 	.word	0x0003023c

000d49d0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_USART_Read_Data+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	695b      	ldr	r3, [r3, #20]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	0003023c 	.word	0x0003023c

000d49e0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <HAL_USART_Peek_Data+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	699b      	ldr	r3, [r3, #24]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	0003023c 	.word	0x0003023c

000d49f0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <HAL_USART_Flush_Data+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	69db      	ldr	r3, [r3, #28]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	0003023c 	.word	0x0003023c

000d4a00 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <HAL_USART_Available_Data_For_Write+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	0003023c 	.word	0x0003023c

000d4a10 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <sock_bind+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	685b      	ldr	r3, [r3, #4]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030238 	.word	0x00030238

000d4a20 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <sock_setsockopt+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	699b      	ldr	r3, [r3, #24]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030238 	.word	0x00030238

000d4a30 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <sock_close+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	69db      	ldr	r3, [r3, #28]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030238 	.word	0x00030238

000d4a40 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <sock_connect+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6a1b      	ldr	r3, [r3, #32]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030238 	.word	0x00030238

000d4a50 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <sock_recv+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030238 	.word	0x00030238

000d4a60 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <sock_recvfrom+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030238 	.word	0x00030238

000d4a70 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <sock_send+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030238 	.word	0x00030238

000d4a80 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <sock_sendto+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030238 	.word	0x00030238

000d4a90 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <sock_socket+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030238 	.word	0x00030238

000d4aa0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USB_USART_Init+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	681b      	ldr	r3, [r3, #0]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003024c 	.word	0x0003024c

000d4ab0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USB_USART_Begin+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	685b      	ldr	r3, [r3, #4]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003024c 	.word	0x0003024c

000d4ac0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Available_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	691b      	ldr	r3, [r3, #16]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	695b      	ldr	r3, [r3, #20]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Receive_Data+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	699b      	ldr	r3, [r3, #24]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USB_USART_Send_Data+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	69db      	ldr	r3, [r3, #28]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003024c 	.word	0x0003024c

000d4b00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Flush_Data+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	6a1b      	ldr	r3, [r3, #32]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <log_message+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030260 	.word	0x00030260

000d4b20 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <set_system_mode+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	685b      	ldr	r3, [r3, #4]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030220 	.word	0x00030220

000d4b30 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <system_delay_ms+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	695b      	ldr	r3, [r3, #20]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030220 	.word	0x00030220

000d4b40 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b03      	ldr	r3, [pc, #12]	; (d4b50 <system_ctrl_set_app_request_handler+0x10>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b4a:	9301      	str	r3, [sp, #4]
   d4b4c:	bd08      	pop	{r3, pc}
   d4b4e:	0000      	.short	0x0000
   d4b50:	00030220 	.word	0x00030220

000d4b54 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b03      	ldr	r3, [pc, #12]	; (d4b64 <system_ctrl_set_result+0x10>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b5e:	9301      	str	r3, [sp, #4]
   d4b60:	bd08      	pop	{r3, pc}
   d4b62:	0000      	.short	0x0000
   d4b64:	00030220 	.word	0x00030220

000d4b68 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4b68:	b508      	push	{r3, lr}
   d4b6a:	4b03      	ldr	r3, [pc, #12]	; (d4b78 <system_invoke_event_handler+0x10>)
   d4b6c:	681b      	ldr	r3, [r3, #0]
   d4b6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4b72:	9301      	str	r3, [sp, #4]
   d4b74:	bd08      	pop	{r3, pc}
   d4b76:	0000      	.short	0x0000
   d4b78:	00030220 	.word	0x00030220

000d4b7c <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <network_config+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	681b      	ldr	r3, [r3, #0]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030240 	.word	0x00030240

000d4b8c <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <network_connect+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	685b      	ldr	r3, [r3, #4]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030240 	.word	0x00030240

000d4b9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <network_connecting+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	689b      	ldr	r3, [r3, #8]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030240 	.word	0x00030240

000d4bac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <network_disconnect+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	68db      	ldr	r3, [r3, #12]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030240 	.word	0x00030240

000d4bbc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <network_ready+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	691b      	ldr	r3, [r3, #16]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030240 	.word	0x00030240

000d4bcc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <network_on+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	695b      	ldr	r3, [r3, #20]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030240 	.word	0x00030240

000d4bdc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <network_off+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	699b      	ldr	r3, [r3, #24]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030240 	.word	0x00030240

000d4bec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <network_listen+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	69db      	ldr	r3, [r3, #28]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030240 	.word	0x00030240

000d4bfc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <network_listening+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6a1b      	ldr	r3, [r3, #32]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030240 	.word	0x00030240

000d4c0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <network_set_listen_timeout+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030240 	.word	0x00030240

000d4c1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <network_get_listen_timeout+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030240 	.word	0x00030240

000d4c2c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <spark_process+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	689b      	ldr	r3, [r3, #8]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030244 	.word	0x00030244

000d4c3c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <spark_cloud_flag_connected+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	695b      	ldr	r3, [r3, #20]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030244 	.word	0x00030244

000d4c4c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <spark_deviceID+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	69db      	ldr	r3, [r3, #28]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030244 	.word	0x00030244

000d4c5c <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <spark_sync_time+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030244 	.word	0x00030244

000d4c6c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <spark_sync_time_pending+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030244 	.word	0x00030244

000d4c7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030244 	.word	0x00030244

000d4c8c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <malloc+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	681b      	ldr	r3, [r3, #0]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003021c 	.word	0x0003021c

000d4c9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <free+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	685b      	ldr	r3, [r3, #4]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003021c 	.word	0x0003021c

000d4cac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <realloc+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	689b      	ldr	r3, [r3, #8]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003021c 	.word	0x0003021c

000d4cbc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <vsnprintf+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	0003021c 	.word	0x0003021c

000d4ccc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <abort+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	0003021c 	.word	0x0003021c

000d4cdc <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <__errno+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	0003021c 	.word	0x0003021c

000d4cec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cec:	2200      	movs	r2, #0
   d4cee:	4611      	mov	r1, r2
   d4cf0:	6840      	ldr	r0, [r0, #4]
   d4cf2:	f7ff bf83 	b.w	d4bfc <network_listening>

000d4cf6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4cf6:	2200      	movs	r2, #0
   d4cf8:	4611      	mov	r1, r2
   d4cfa:	6840      	ldr	r0, [r0, #4]
   d4cfc:	f7ff bf8e 	b.w	d4c1c <network_get_listen_timeout>

000d4d00 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d00:	2200      	movs	r2, #0
   d4d02:	6840      	ldr	r0, [r0, #4]
   d4d04:	f7ff bf82 	b.w	d4c0c <network_set_listen_timeout>

000d4d08 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d08:	2200      	movs	r2, #0
   d4d0a:	f081 0101 	eor.w	r1, r1, #1
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	f7ff bf6c 	b.w	d4bec <network_listen>

000d4d14 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d14:	2300      	movs	r3, #0
   d4d16:	461a      	mov	r2, r3
   d4d18:	4619      	mov	r1, r3
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	f7ff bf5e 	b.w	d4bdc <network_off>

000d4d20 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d20:	2300      	movs	r3, #0
   d4d22:	461a      	mov	r2, r3
   d4d24:	4619      	mov	r1, r3
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	f7ff bf50 	b.w	d4bcc <network_on>

000d4d2c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	4611      	mov	r1, r2
   d4d30:	6840      	ldr	r0, [r0, #4]
   d4d32:	f7ff bf43 	b.w	d4bbc <network_ready>

000d4d36 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d36:	2200      	movs	r2, #0
   d4d38:	4611      	mov	r1, r2
   d4d3a:	6840      	ldr	r0, [r0, #4]
   d4d3c:	f7ff bf2e 	b.w	d4b9c <network_connecting>

000d4d40 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d40:	2200      	movs	r2, #0
   d4d42:	2102      	movs	r1, #2
   d4d44:	6840      	ldr	r0, [r0, #4]
   d4d46:	f7ff bf31 	b.w	d4bac <network_disconnect>

000d4d4a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d4a:	2300      	movs	r3, #0
   d4d4c:	461a      	mov	r2, r3
   d4d4e:	6840      	ldr	r0, [r0, #4]
   d4d50:	f7ff bf1c 	b.w	d4b8c <network_connect>

000d4d54 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d54:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d56:	2203      	movs	r2, #3
   d4d58:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d5a:	4a02      	ldr	r2, [pc, #8]	; (d4d64 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d5c:	601a      	str	r2, [r3, #0]
   d4d5e:	4770      	bx	lr
   d4d60:	2003e3e0 	.word	0x2003e3e0
   d4d64:	000d6c80 	.word	0x000d6c80

000d4d68 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4d68:	4770      	bx	lr

000d4d6a <_ZN8SPIClassD0Ev>:
   d4d6a:	b510      	push	{r4, lr}
   d4d6c:	4604      	mov	r4, r0
   d4d6e:	f7ff f996 	bl	d409e <_ZdlPv>
   d4d72:	4620      	mov	r0, r4
   d4d74:	bd10      	pop	{r4, pc}
	...

000d4d78 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4d78:	b570      	push	{r4, r5, r6, lr}
   d4d7a:	4b08      	ldr	r3, [pc, #32]	; (d4d9c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4d7c:	6003      	str	r3, [r0, #0]
   d4d7e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4d80:	2500      	movs	r5, #0
   d4d82:	460e      	mov	r6, r1
   d4d84:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4d88:	f7ff fdba 	bl	d4900 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4d8c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4d8e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4d90:	f7ff fd46 	bl	d4820 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4d94:	60a5      	str	r5, [r4, #8]
}
   d4d96:	4620      	mov	r0, r4
   d4d98:	bd70      	pop	{r4, r5, r6, pc}
   d4d9a:	bf00      	nop
   d4d9c:	000d6cb4 	.word	0x000d6cb4

000d4da0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4da0:	4b04      	ldr	r3, [pc, #16]	; (d4db4 <_GLOBAL__sub_I_System+0x14>)
   d4da2:	2000      	movs	r0, #0
   d4da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4da8:	7018      	strb	r0, [r3, #0]
   d4daa:	8058      	strh	r0, [r3, #2]
   d4dac:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4dae:	f7ff beb7 	b.w	d4b20 <set_system_mode>
   d4db2:	bf00      	nop
   d4db4:	2003e3e8 	.word	0x2003e3e8

000d4db8 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4db8:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4dba:	6804      	ldr	r4, [r0, #0]
   d4dbc:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4dbe:	46a4      	mov	ip, r4
    }
   d4dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4dc4:	4760      	bx	ip

000d4dc6 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4dc6:	6803      	ldr	r3, [r0, #0]
   d4dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4dca:	4718      	bx	r3

000d4dcc <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4dcc:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4dce:	4770      	bx	lr

000d4dd0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4dd0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4dd2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4dd4:	1a10      	subs	r0, r2, r0
   d4dd6:	4770      	bx	lr

000d4dd8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4dd8:	b513      	push	{r0, r1, r4, lr}
   d4dda:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4ddc:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4dde:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4de2:	68d4      	ldr	r4, [r2, #12]
   d4de4:	4619      	mov	r1, r3
   d4de6:	2201      	movs	r2, #1
   d4de8:	47a0      	blx	r4
}
   d4dea:	b002      	add	sp, #8
   d4dec:	bd10      	pop	{r4, pc}

000d4dee <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4dee:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4df0:	6803      	ldr	r3, [r0, #0]
   d4df2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4df4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4df6:	4798      	blx	r3
   d4df8:	b128      	cbz	r0, d4e06 <_ZN3UDP4readEv+0x18>
   d4dfa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4dfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4dfe:	1c59      	adds	r1, r3, #1
   d4e00:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4e02:	5cd0      	ldrb	r0, [r2, r3]
   d4e04:	bd10      	pop	{r4, pc}
   d4e06:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4e0a:	bd10      	pop	{r4, pc}

000d4e0c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4e0c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4e0e:	6803      	ldr	r3, [r0, #0]
   d4e10:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4e12:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4e14:	4798      	blx	r3
   d4e16:	b118      	cbz	r0, d4e20 <_ZN3UDP4peekEv+0x14>
   d4e18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4e1a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4e1c:	5cd0      	ldrb	r0, [r2, r3]
   d4e1e:	bd10      	pop	{r4, pc}
   d4e20:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4e24:	bd10      	pop	{r4, pc}

000d4e26 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4e26:	4770      	bx	lr

000d4e28 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4e28:	b410      	push	{r4}
   d4e2a:	4603      	mov	r3, r0
   d4e2c:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4e2e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4e30:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4e32:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4e34:	6803      	ldr	r3, [r0, #0]
   d4e36:	1a52      	subs	r2, r2, r1
   d4e38:	68db      	ldr	r3, [r3, #12]
   d4e3a:	4421      	add	r1, r4
}
   d4e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4e40:	4718      	bx	r3

000d4e42 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4e42:	f1a0 0010 	sub.w	r0, r0, #16
   d4e46:	f7ff bfef 	b.w	d4e28 <_ZNK3UDP7printToER5Print>

000d4e4a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4e4c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4e4e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4e50:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4e54:	4604      	mov	r4, r0
   d4e56:	460f      	mov	r7, r1
   d4e58:	4615      	mov	r5, r2
    stop();
   d4e5a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4e5c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4e5e:	4632      	mov	r2, r6
   d4e60:	2100      	movs	r1, #0
   d4e62:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4e64:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4e66:	f001 fe79 	bl	d6b5c <memset>
    saddr.sin6_len = sizeof(saddr);
   d4e6a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4e6e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4e70:	260a      	movs	r6, #10
   d4e72:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4e76:	f7ff fd8b 	bl	d4990 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4e7a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4e7c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4e80:	2102      	movs	r1, #2
   d4e82:	4630      	mov	r0, r6
   d4e84:	f7ff fe04 	bl	d4a90 <sock_socket>

    if (_sock < 0) {
   d4e88:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4e8a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4e8c:	db24      	blt.n	d4ed8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4e8e:	2204      	movs	r2, #4
   d4e90:	9200      	str	r2, [sp, #0]
   d4e92:	ab02      	add	r3, sp, #8
   d4e94:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4e98:	f7ff fdc2 	bl	d4a20 <sock_setsockopt>
   d4e9c:	b9e0      	cbnz	r0, d4ed8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4e9e:	b195      	cbz	r5, d4ec6 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4ea0:	9003      	str	r0, [sp, #12]
   d4ea2:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4ea6:	a903      	add	r1, sp, #12
   d4ea8:	b2e8      	uxtb	r0, r5
   d4eaa:	f7ff fcc9 	bl	d4840 <if_index_to_name>
   d4eae:	b998      	cbnz	r0, d4ed8 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4eb0:	2306      	movs	r3, #6
   d4eb2:	9300      	str	r3, [sp, #0]
   d4eb4:	f241 020b 	movw	r2, #4107	; 0x100b
   d4eb8:	ab03      	add	r3, sp, #12
   d4eba:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4ebe:	6960      	ldr	r0, [r4, #20]
   d4ec0:	f7ff fdae 	bl	d4a20 <sock_setsockopt>
   d4ec4:	b940      	cbnz	r0, d4ed8 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4ec6:	221c      	movs	r2, #28
   d4ec8:	a905      	add	r1, sp, #20
   d4eca:	6960      	ldr	r0, [r4, #20]
   d4ecc:	f7ff fda0 	bl	d4a10 <sock_bind>
   d4ed0:	b910      	cbnz	r0, d4ed8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4ed2:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4ed4:	2001      	movs	r0, #1
   d4ed6:	e004      	b.n	d4ee2 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4ed8:	6823      	ldr	r3, [r4, #0]
   d4eda:	4620      	mov	r0, r4
   d4edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ede:	4798      	blx	r3
   d4ee0:	2000      	movs	r0, #0
    }
    return bound;
}
   d4ee2:	b00d      	add	sp, #52	; 0x34
   d4ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ee6 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4ee6:	b510      	push	{r4, lr}
   d4ee8:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4eea:	6940      	ldr	r0, [r0, #20]
   d4eec:	2800      	cmp	r0, #0
   d4eee:	db01      	blt.n	d4ef4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4ef0:	f7ff fd9e 	bl	d4a30 <sock_close>
    }

    _sock = -1;
   d4ef4:	f04f 33ff 	mov.w	r3, #4294967295
   d4ef8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4efa:	2300      	movs	r3, #0
   d4efc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4efe:	8723      	strh	r3, [r4, #56]	; 0x38
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4f02:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4f04:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4f06:	4605      	mov	r5, r0
   d4f08:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4f0a:	b113      	cbz	r3, d4f12 <_ZN3UDP5writeEPKhj+0x10>
   d4f0c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4f0e:	1a24      	subs	r4, r4, r0
   d4f10:	e000      	b.n	d4f14 <_ZN3UDP5writeEPKhj+0x12>
   d4f12:	461c      	mov	r4, r3
   d4f14:	4294      	cmp	r4, r2
   d4f16:	bf28      	it	cs
   d4f18:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4f1a:	4622      	mov	r2, r4
   d4f1c:	4418      	add	r0, r3
   d4f1e:	f001 fe12 	bl	d6b46 <memcpy>
    _offset += size;
   d4f22:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4f24:	4423      	add	r3, r4
   d4f26:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4f28:	4620      	mov	r0, r4
   d4f2a:	bd38      	pop	{r3, r4, r5, pc}

000d4f2c <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4f2c:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4f2e:	6803      	ldr	r3, [r0, #0]
   d4f30:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4f32:	4604      	mov	r4, r0
   d4f34:	460e      	mov	r6, r1
   d4f36:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4f38:	4798      	blx	r3
   d4f3a:	b188      	cbz	r0, d4f60 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4f3c:	6823      	ldr	r3, [r4, #0]
   d4f3e:	4620      	mov	r0, r4
   d4f40:	691b      	ldr	r3, [r3, #16]
   d4f42:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4f44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f46:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4f48:	4285      	cmp	r5, r0
   d4f4a:	bfa8      	it	ge
   d4f4c:	4605      	movge	r5, r0
   d4f4e:	4419      	add	r1, r3
   d4f50:	462a      	mov	r2, r5
   d4f52:	4630      	mov	r0, r6
   d4f54:	f001 fdf7 	bl	d6b46 <memcpy>
        _offset += read;
   d4f58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f5a:	442b      	add	r3, r5
   d4f5c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4f5e:	e001      	b.n	d4f64 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4f60:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4f64:	4628      	mov	r0, r5
   d4f66:	bd70      	pop	{r4, r5, r6, pc}

000d4f68 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4f68:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4f6a:	4604      	mov	r4, r0
   d4f6c:	4b05      	ldr	r3, [pc, #20]	; (d4f84 <_ZN3UDP8remoteIPEv+0x1c>)
   d4f6e:	f844 3b04 	str.w	r3, [r4], #4
   d4f72:	f101 0520 	add.w	r5, r1, #32
   d4f76:	4606      	mov	r6, r0
   d4f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f7c:	682b      	ldr	r3, [r5, #0]
   d4f7e:	7023      	strb	r3, [r4, #0]
   d4f80:	4630      	mov	r0, r6
   d4f82:	bd70      	pop	{r4, r5, r6, pc}
   d4f84:	000d6e3c 	.word	0x000d6e3c

000d4f88 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f8a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4f8c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4f8e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4f90:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4f92:	4a0a      	ldr	r2, [pc, #40]	; (d4fbc <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4f94:	9202      	str	r2, [sp, #8]
   d4f96:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4f98:	468e      	mov	lr, r1
   d4f9a:	4606      	mov	r6, r0
   d4f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f9e:	ac03      	add	r4, sp, #12
   d4fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4fa2:	682b      	ldr	r3, [r5, #0]
   d4fa4:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4fa6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4faa:	9300      	str	r3, [sp, #0]
   d4fac:	4662      	mov	r2, ip
   d4fae:	ab02      	add	r3, sp, #8
   d4fb0:	4671      	mov	r1, lr
   d4fb2:	4630      	mov	r0, r6
   d4fb4:	47b8      	blx	r7
    }
   d4fb6:	b009      	add	sp, #36	; 0x24
   d4fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fba:	bf00      	nop
   d4fbc:	000d6e3c 	.word	0x000d6e3c

000d4fc0 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4fc2:	6803      	ldr	r3, [r0, #0]
   d4fc4:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4fc8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4fca:	4b0d      	ldr	r3, [pc, #52]	; (d5000 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4fcc:	b089      	sub	sp, #36	; 0x24
   d4fce:	f100 0620 	add.w	r6, r0, #32
   d4fd2:	4604      	mov	r4, r0
   d4fd4:	9302      	str	r3, [sp, #8]
   d4fd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4fd8:	ad03      	add	r5, sp, #12
   d4fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4fdc:	6833      	ldr	r3, [r6, #0]
   d4fde:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4fe0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4fe2:	9300      	str	r3, [sp, #0]
   d4fe4:	4672      	mov	r2, lr
   d4fe6:	ab02      	add	r3, sp, #8
   d4fe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4fea:	4620      	mov	r0, r4
   d4fec:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4fee:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4ff0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4ff2:	69db      	ldr	r3, [r3, #28]
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	4798      	blx	r3
    return result;
}
   d4ff8:	4628      	mov	r0, r5
   d4ffa:	b009      	add	sp, #36	; 0x24
   d4ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ffe:	bf00      	nop
   d5000:	000d6e3c 	.word	0x000d6e3c

000d5004 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5004:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5006:	7843      	ldrb	r3, [r0, #1]
   d5008:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d500a:	b08d      	sub	sp, #52	; 0x34
   d500c:	4605      	mov	r5, r0
   d500e:	460c      	mov	r4, r1
   d5010:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5012:	d101      	bne.n	d5018 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5014:	1d01      	adds	r1, r0, #4
   d5016:	e033      	b.n	d5080 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5018:	2b0a      	cmp	r3, #10
   d501a:	d135      	bne.n	d5088 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d501c:	2211      	movs	r2, #17
   d501e:	2100      	movs	r1, #0
   d5020:	a801      	add	r0, sp, #4
   d5022:	f001 fd9b 	bl	d6b5c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5026:	68ab      	ldr	r3, [r5, #8]
   d5028:	b943      	cbnz	r3, d503c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d502a:	68eb      	ldr	r3, [r5, #12]
   d502c:	b933      	cbnz	r3, d503c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d502e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5032:	692e      	ldr	r6, [r5, #16]
   d5034:	f7ff fc9c 	bl	d4970 <inet_htonl>
   d5038:	4286      	cmp	r6, r0
   d503a:	d01f      	beq.n	d507c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d503c:	f105 0308 	add.w	r3, r5, #8
   d5040:	ae01      	add	r6, sp, #4
   d5042:	f105 0e18 	add.w	lr, r5, #24
   d5046:	6818      	ldr	r0, [r3, #0]
   d5048:	6859      	ldr	r1, [r3, #4]
   d504a:	4632      	mov	r2, r6
   d504c:	c203      	stmia	r2!, {r0, r1}
   d504e:	3308      	adds	r3, #8
   d5050:	4573      	cmp	r3, lr
   d5052:	4616      	mov	r6, r2
   d5054:	d1f7      	bne.n	d5046 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5056:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5058:	a901      	add	r1, sp, #4
   d505a:	a806      	add	r0, sp, #24
   d505c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d505e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5062:	f000 fc1b 	bl	d589c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5066:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5068:	3404      	adds	r4, #4
   d506a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d506c:	6833      	ldr	r3, [r6, #0]
   d506e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5070:	b157      	cbz	r7, d5088 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5072:	8868      	ldrh	r0, [r5, #2]
   d5074:	f7ff fc84 	bl	d4980 <inet_ntohs>
   d5078:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d507a:	e005      	b.n	d5088 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d507c:	f105 0114 	add.w	r1, r5, #20
   d5080:	4620      	mov	r0, r4
   d5082:	f000 fc40 	bl	d5906 <_ZN9IPAddressaSEPKh>
   d5086:	e7f3      	b.n	d5070 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5088:	b00d      	add	sp, #52	; 0x34
   d508a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d508c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d508c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5090:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5092:	ab0e      	add	r3, sp, #56	; 0x38
   d5094:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5096:	4606      	mov	r6, r0
   d5098:	4617      	mov	r7, r2
   d509a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d509c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d50a0:	462a      	mov	r2, r5
   d50a2:	4629      	mov	r1, r5
   d50a4:	f7ff fbac 	bl	d4800 <netdb_getaddrinfo>
   d50a8:	2800      	cmp	r0, #0
   d50aa:	db1f      	blt.n	d50ec <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d50ac:	9b01      	ldr	r3, [sp, #4]
   d50ae:	b1fb      	cbz	r3, d50f0 <_ZN3UDP11beginPacketEPKct+0x64>
   d50b0:	695b      	ldr	r3, [r3, #20]
   d50b2:	b1eb      	cbz	r3, d50f0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d50b4:	a802      	add	r0, sp, #8
   d50b6:	f000 fbe3 	bl	d5880 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d50ba:	9b01      	ldr	r3, [sp, #4]
   d50bc:	462a      	mov	r2, r5
   d50be:	6958      	ldr	r0, [r3, #20]
   d50c0:	a902      	add	r1, sp, #8
   d50c2:	f7ff ff9f 	bl	d5004 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d50c6:	a802      	add	r0, sp, #8
   d50c8:	f000 fbfa 	bl	d58c0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d50cc:	b180      	cbz	r0, d50f0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d50ce:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50d0:	ad03      	add	r5, sp, #12
   d50d2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d50d6:	4b0b      	ldr	r3, [pc, #44]	; (d5104 <_ZN3UDP11beginPacketEPKct+0x78>)
   d50d8:	9308      	str	r3, [sp, #32]
   d50da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50dc:	ac09      	add	r4, sp, #36	; 0x24
   d50de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50e0:	682b      	ldr	r3, [r5, #0]
   d50e2:	7023      	strb	r3, [r4, #0]
   d50e4:	463a      	mov	r2, r7
   d50e6:	a908      	add	r1, sp, #32
   d50e8:	4630      	mov	r0, r6
   d50ea:	47c0      	blx	r8
   d50ec:	4604      	mov	r4, r0
   d50ee:	e001      	b.n	d50f4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d50f0:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d50f4:	9801      	ldr	r0, [sp, #4]
   d50f6:	f7ff fb7b 	bl	d47f0 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d50fa:	4620      	mov	r0, r4
   d50fc:	b00e      	add	sp, #56	; 0x38
   d50fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5102:	bf00      	nop
   d5104:	000d6e3c 	.word	0x000d6e3c

000d5108 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d510c:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5110:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5114:	b08c      	sub	sp, #48	; 0x30
   d5116:	4605      	mov	r5, r0
   d5118:	460c      	mov	r4, r1
   d511a:	4617      	mov	r7, r2
   d511c:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d511e:	db00      	blt.n	d5122 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d5120:	b911      	cbnz	r1, d5128 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d5122:	f04f 30ff 	mov.w	r0, #4294967295
   d5126:	e035      	b.n	d5194 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5128:	f04f 0a1c 	mov.w	sl, #28
   d512c:	ae05      	add	r6, sp, #20
   d512e:	4652      	mov	r2, sl
   d5130:	2100      	movs	r1, #0
   d5132:	4630      	mov	r0, r6
   d5134:	f001 fd12 	bl	d6b5c <memset>
        socklen_t slen = sizeof(saddr);
   d5138:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d513c:	f1b9 0f00 	cmp.w	r9, #0
   d5140:	d014      	beq.n	d516c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5146:	fbb9 f1f2 	udiv	r1, r9, r2
   d514a:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d514c:	fb02 9111 	mls	r1, r2, r1, r9
   d5150:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5152:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5154:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5156:	9300      	str	r3, [sp, #0]
   d5158:	f241 0206 	movw	r2, #4102	; 0x1006
   d515c:	ab03      	add	r3, sp, #12
   d515e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5162:	4640      	mov	r0, r8
   d5164:	f7ff fc5c 	bl	d4a20 <sock_setsockopt>
            if (ret) {
   d5168:	b108      	cbz	r0, d516e <_ZN3UDP13receivePacketEPhjm+0x66>
   d516a:	e013      	b.n	d5194 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d516c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d516e:	ab02      	add	r3, sp, #8
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	4621      	mov	r1, r4
   d5174:	4603      	mov	r3, r0
   d5176:	9600      	str	r6, [sp, #0]
   d5178:	463a      	mov	r2, r7
   d517a:	6968      	ldr	r0, [r5, #20]
   d517c:	f7ff fc70 	bl	d4a60 <sock_recvfrom>
        if (ret >= 0) {
   d5180:	1e04      	subs	r4, r0, #0
   d5182:	db06      	blt.n	d5192 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5184:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5188:	f105 011c 	add.w	r1, r5, #28
   d518c:	4630      	mov	r0, r6
   d518e:	f7ff ff39 	bl	d5004 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5192:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5194:	b00c      	add	sp, #48	; 0x30
   d5196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d519a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d519a:	b538      	push	{r3, r4, r5, lr}
   d519c:	4605      	mov	r5, r0
   d519e:	4614      	mov	r4, r2
   d51a0:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d51a2:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d51a4:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d51a6:	d111      	bne.n	d51cc <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d51a8:	231c      	movs	r3, #28
   d51aa:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d51ac:	230a      	movs	r3, #10
   d51ae:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d51b0:	f7ff fbee 	bl	d4990 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d51b4:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d51b6:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d51ba:	1d2b      	adds	r3, r5, #4
   d51bc:	3514      	adds	r5, #20
   d51be:	f853 2b04 	ldr.w	r2, [r3], #4
   d51c2:	f844 2b04 	str.w	r2, [r4], #4
   d51c6:	42ab      	cmp	r3, r5
   d51c8:	d1f9      	bne.n	d51be <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d51ca:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d51cc:	2b04      	cmp	r3, #4
   d51ce:	d10a      	bne.n	d51e6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d51d0:	2310      	movs	r3, #16
   d51d2:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d51d4:	2302      	movs	r3, #2
   d51d6:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d51d8:	f7ff fbda 	bl	d4990 <inet_htons>
   d51dc:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d51de:	6868      	ldr	r0, [r5, #4]
   d51e0:	f7ff fbc6 	bl	d4970 <inet_htonl>
   d51e4:	6060      	str	r0, [r4, #4]
   d51e6:	bd38      	pop	{r3, r4, r5, pc}

000d51e8 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d51e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d51ec:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d51ee:	ac03      	add	r4, sp, #12
   d51f0:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d51f2:	4699      	mov	r9, r3
   d51f4:	4606      	mov	r6, r0
   d51f6:	460f      	mov	r7, r1
   d51f8:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d51fa:	2100      	movs	r1, #0
   d51fc:	462a      	mov	r2, r5
   d51fe:	4620      	mov	r0, r4
   d5200:	f001 fcac 	bl	d6b5c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5204:	4622      	mov	r2, r4
   d5206:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d520a:	4648      	mov	r0, r9
   d520c:	f7ff ffc5 	bl	d519a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5210:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5214:	b143      	cbz	r3, d5228 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5216:	e88d 0030 	stmia.w	sp, {r4, r5}
   d521a:	2300      	movs	r3, #0
   d521c:	4642      	mov	r2, r8
   d521e:	4639      	mov	r1, r7
   d5220:	6970      	ldr	r0, [r6, #20]
   d5222:	f7ff fc2d 	bl	d4a80 <sock_sendto>
   d5226:	e001      	b.n	d522c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5228:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d522c:	b00b      	add	sp, #44	; 0x2c
   d522e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5232 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5232:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5234:	b091      	sub	sp, #68	; 0x44
   d5236:	460c      	mov	r4, r1
   d5238:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d523a:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d523c:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d523e:	a809      	add	r0, sp, #36	; 0x24
   d5240:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5242:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5244:	f001 fc8a 	bl	d6b5c <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5248:	aa09      	add	r2, sp, #36	; 0x24
   d524a:	2100      	movs	r1, #0
   d524c:	4620      	mov	r0, r4
   d524e:	f7ff ffa4 	bl	d519a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5252:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5256:	2b02      	cmp	r3, #2
   d5258:	d12e      	bne.n	d52b8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d525a:	2300      	movs	r3, #0
   d525c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d525e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5260:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5262:	b1dd      	cbz	r5, d529c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5264:	a902      	add	r1, sp, #8
   d5266:	4628      	mov	r0, r5
   d5268:	f7ff faf2 	bl	d4850 <if_get_by_index>
   d526c:	b9b0      	cbnz	r0, d529c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d526e:	a910      	add	r1, sp, #64	; 0x40
   d5270:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5274:	9802      	ldr	r0, [sp, #8]
   d5276:	f7ff faf3 	bl	d4860 <if_get_addrs>
   d527a:	b960      	cbnz	r0, d5296 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d527c:	9b03      	ldr	r3, [sp, #12]
   d527e:	b153      	cbz	r3, d5296 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5280:	68da      	ldr	r2, [r3, #12]
   d5282:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5284:	7851      	ldrb	r1, [r2, #1]
   d5286:	2902      	cmp	r1, #2
   d5288:	d103      	bne.n	d5292 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d528a:	6852      	ldr	r2, [r2, #4]
   d528c:	b10a      	cbz	r2, d5292 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d528e:	9205      	str	r2, [sp, #20]
   d5290:	e001      	b.n	d5296 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5292:	681b      	ldr	r3, [r3, #0]
   d5294:	e7f3      	b.n	d527e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5296:	9803      	ldr	r0, [sp, #12]
   d5298:	f7ff faea 	bl	d4870 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d529c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d529e:	f04f 0308 	mov.w	r3, #8
   d52a2:	9300      	str	r3, [sp, #0]
   d52a4:	bf18      	it	ne
   d52a6:	2203      	movne	r2, #3
   d52a8:	ab04      	add	r3, sp, #16
   d52aa:	bf08      	it	eq
   d52ac:	2204      	moveq	r2, #4
   d52ae:	2100      	movs	r1, #0
   d52b0:	4630      	mov	r0, r6
   d52b2:	f7ff fbb5 	bl	d4a20 <sock_setsockopt>
   d52b6:	e01e      	b.n	d52f6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d52b8:	2b0a      	cmp	r3, #10
   d52ba:	d11a      	bne.n	d52f2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d52bc:	ac04      	add	r4, sp, #16
   d52be:	2214      	movs	r2, #20
   d52c0:	2100      	movs	r1, #0
   d52c2:	4620      	mov	r0, r4
   d52c4:	f001 fc4a 	bl	d6b5c <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d52c8:	ab0b      	add	r3, sp, #44	; 0x2c
   d52ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d52cc:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d52ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d52d2:	f04f 0314 	mov.w	r3, #20
   d52d6:	9300      	str	r3, [sp, #0]
   d52d8:	bf18      	it	ne
   d52da:	220c      	movne	r2, #12
   d52dc:	4623      	mov	r3, r4
   d52de:	bf08      	it	eq
   d52e0:	220d      	moveq	r2, #13
   d52e2:	2129      	movs	r1, #41	; 0x29
   d52e4:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d52e6:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d52e8:	f7ff fb9a 	bl	d4a20 <sock_setsockopt>
   d52ec:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d52f0:	e001      	b.n	d52f6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d52f2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d52f6:	b011      	add	sp, #68	; 0x44
   d52f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d52fc <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d52fc:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d52fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5302:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5304:	4b0b      	ldr	r3, [pc, #44]	; (d5334 <_ZN3UDPC1Ev+0x38>)
   d5306:	f103 0208 	add.w	r2, r3, #8
   d530a:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d530c:	2500      	movs	r5, #0
   d530e:	6103      	str	r3, [r0, #16]
   d5310:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d5314:	4604      	mov	r4, r0
   d5316:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5318:	6002      	str	r2, [r0, #0]
   d531a:	6143      	str	r3, [r0, #20]
   d531c:	301c      	adds	r0, #28
   d531e:	f000 faaf 	bl	d5880 <_ZN9IPAddressC1Ev>
   d5322:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5326:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5328:	8725      	strh	r5, [r4, #56]	; 0x38
   d532a:	63e5      	str	r5, [r4, #60]	; 0x3c
   d532c:	6423      	str	r3, [r4, #64]	; 0x40
   d532e:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5330:	4620      	mov	r0, r4
   d5332:	bd38      	pop	{r3, r4, r5, pc}
   d5334:	000d6cbc 	.word	0x000d6cbc

000d5338 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5338:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d533a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d533e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5340:	b11b      	cbz	r3, d534a <_ZN3UDP13releaseBufferEv+0x12>
   d5342:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5344:	b108      	cbz	r0, d534a <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d5346:	f7fe feaa 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d534a:	2300      	movs	r3, #0
   d534c:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d534e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5352:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5354:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5356:	8723      	strh	r3, [r4, #56]	; 0x38
   d5358:	bd10      	pop	{r4, pc}

000d535a <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d535a:	b570      	push	{r4, r5, r6, lr}
   d535c:	4604      	mov	r4, r0
   d535e:	4616      	mov	r6, r2
   d5360:	460d      	mov	r5, r1
    releaseBuffer();
   d5362:	f7ff ffe9 	bl	d5338 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5366:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5368:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d536a:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d536c:	b93e      	cbnz	r6, d537e <_ZN3UDP9setBufferEjPh+0x24>
   d536e:	b135      	cbz	r5, d537e <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5370:	4628      	mov	r0, r5
   d5372:	f7fe fe92 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5376:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5378:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d537a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d537e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5380:	b103      	cbz	r3, d5384 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d5382:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d5384:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5386:	3000      	adds	r0, #0
   d5388:	bf18      	it	ne
   d538a:	2001      	movne	r0, #1
   d538c:	bd70      	pop	{r4, r5, r6, pc}

000d538e <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d538e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5390:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5392:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5394:	4605      	mov	r5, r0
   d5396:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5398:	b91a      	cbnz	r2, d53a2 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d539a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d539c:	b109      	cbz	r1, d53a2 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d539e:	f7ff ffdc 	bl	d535a <_ZN3UDP9setBufferEjPh>
   d53a2:	3404      	adds	r4, #4
   d53a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d53a6:	f105 0620 	add.w	r6, r5, #32
   d53aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d53ac:	6823      	ldr	r3, [r4, #0]
   d53ae:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53b0:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d53b2:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53b4:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d53b6:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d53b8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d53ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53bc <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d53bc:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d53be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d53c0:	4604      	mov	r4, r0
   d53c2:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d53c4:	b91a      	cbnz	r2, d53ce <_ZN3UDP11parsePacketEm+0x12>
   d53c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d53c8:	b109      	cbz	r1, d53ce <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d53ca:	f7ff ffc6 	bl	d535a <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d53ce:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d53d0:	2200      	movs	r2, #0
   d53d2:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d53d4:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d53d6:	b149      	cbz	r1, d53ec <_ZN3UDP11parsePacketEm+0x30>
   d53d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d53da:	b13a      	cbz	r2, d53ec <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d53dc:	6823      	ldr	r3, [r4, #0]
   d53de:	4620      	mov	r0, r4
   d53e0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d53e2:	4633      	mov	r3, r6
   d53e4:	47a8      	blx	r5
        if (result > 0) {
   d53e6:	2800      	cmp	r0, #0
            _total = result;
   d53e8:	bfc8      	it	gt
   d53ea:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d53ec:	6823      	ldr	r3, [r4, #0]
   d53ee:	4620      	mov	r0, r4
   d53f0:	691b      	ldr	r3, [r3, #16]
}
   d53f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d53f6:	4718      	bx	r3

000d53f8 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d53f8:	b510      	push	{r4, lr}
   d53fa:	4b07      	ldr	r3, [pc, #28]	; (d5418 <_ZN3UDPD1Ev+0x20>)
   d53fc:	f103 0208 	add.w	r2, r3, #8
   d5400:	336c      	adds	r3, #108	; 0x6c
   d5402:	4604      	mov	r4, r0
   d5404:	6002      	str	r2, [r0, #0]
   d5406:	6103      	str	r3, [r0, #16]
   d5408:	f7ff fd6d 	bl	d4ee6 <_ZN3UDP4stopEv>
   d540c:	4620      	mov	r0, r4
   d540e:	f7ff ff93 	bl	d5338 <_ZN3UDP13releaseBufferEv>
   d5412:	4620      	mov	r0, r4
   d5414:	bd10      	pop	{r4, pc}
   d5416:	bf00      	nop
   d5418:	000d6cbc 	.word	0x000d6cbc

000d541c <_ZN3UDPD0Ev>:
   d541c:	b510      	push	{r4, lr}
   d541e:	4604      	mov	r4, r0
   d5420:	f7ff ffea 	bl	d53f8 <_ZN3UDPD1Ev>
   d5424:	4620      	mov	r0, r4
   d5426:	f7fe fe3a 	bl	d409e <_ZdlPv>
   d542a:	4620      	mov	r0, r4
   d542c:	bd10      	pop	{r4, pc}

000d542e <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d542e:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5430:	6940      	ldr	r0, [r0, #20]
   d5432:	2800      	cmp	r0, #0
   d5434:	db04      	blt.n	d5440 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5436:	2301      	movs	r3, #1
   d5438:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d543c:	f7ff bef9 	b.w	d5232 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d5440:	f04f 30ff 	mov.w	r0, #4294967295
   d5444:	4770      	bx	lr

000d5446 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5446:	b510      	push	{r4, lr}
   d5448:	4604      	mov	r4, r0
{
	free(buffer);
   d544a:	6800      	ldr	r0, [r0, #0]
   d544c:	f7ff fc26 	bl	d4c9c <free>
}
   d5450:	4620      	mov	r0, r4
   d5452:	bd10      	pop	{r4, pc}

000d5454 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5454:	b510      	push	{r4, lr}
   d5456:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5458:	6800      	ldr	r0, [r0, #0]
   d545a:	b108      	cbz	r0, d5460 <_ZN6String10invalidateEv+0xc>
   d545c:	f7ff fc1e 	bl	d4c9c <free>
	buffer = NULL;
   d5460:	2300      	movs	r3, #0
   d5462:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5464:	60a3      	str	r3, [r4, #8]
   d5466:	6063      	str	r3, [r4, #4]
   d5468:	bd10      	pop	{r4, pc}

000d546a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d546a:	b538      	push	{r3, r4, r5, lr}
   d546c:	4604      	mov	r4, r0
   d546e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5470:	6800      	ldr	r0, [r0, #0]
   d5472:	3101      	adds	r1, #1
   d5474:	f7ff fc1a 	bl	d4cac <realloc>
	if (newbuffer) {
   d5478:	b110      	cbz	r0, d5480 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d547a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d547e:	2001      	movs	r0, #1
	}
	return 0;
}
   d5480:	bd38      	pop	{r3, r4, r5, pc}

000d5482 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5482:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5484:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5486:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5488:	b113      	cbz	r3, d5490 <_ZN6String7reserveEj+0xe>
   d548a:	6843      	ldr	r3, [r0, #4]
   d548c:	428b      	cmp	r3, r1
   d548e:	d207      	bcs.n	d54a0 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5490:	4620      	mov	r0, r4
   d5492:	f7ff ffea 	bl	d546a <_ZN6String12changeBufferEj>
   d5496:	b120      	cbz	r0, d54a2 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5498:	68a3      	ldr	r3, [r4, #8]
   d549a:	b90b      	cbnz	r3, d54a0 <_ZN6String7reserveEj+0x1e>
   d549c:	6822      	ldr	r2, [r4, #0]
   d549e:	7013      	strb	r3, [r2, #0]
   d54a0:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d54a2:	bd10      	pop	{r4, pc}

000d54a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54a4:	b570      	push	{r4, r5, r6, lr}
   d54a6:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d54a8:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d54aa:	4604      	mov	r4, r0
   d54ac:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d54ae:	f7ff ffe8 	bl	d5482 <_ZN6String7reserveEj>
   d54b2:	b918      	cbnz	r0, d54bc <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d54b4:	4620      	mov	r0, r4
   d54b6:	f7ff ffcd 	bl	d5454 <_ZN6String10invalidateEv>
		return *this;
   d54ba:	e009      	b.n	d54d0 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d54bc:	462a      	mov	r2, r5
   d54be:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d54c0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d54c2:	6820      	ldr	r0, [r4, #0]
   d54c4:	f001 fb3f 	bl	d6b46 <memcpy>
	buffer[len] = 0;
   d54c8:	6822      	ldr	r2, [r4, #0]
   d54ca:	68a3      	ldr	r3, [r4, #8]
   d54cc:	2100      	movs	r1, #0
   d54ce:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd70      	pop	{r4, r5, r6, pc}

000d54d4 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54d4:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54d6:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d54d8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54da:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54dc:	6043      	str	r3, [r0, #4]
	len = 0;
   d54de:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54e0:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d54e2:	460d      	mov	r5, r1
   d54e4:	b139      	cbz	r1, d54f6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d54e6:	4608      	mov	r0, r1
   d54e8:	f001 fb68 	bl	d6bbc <strlen>
   d54ec:	4629      	mov	r1, r5
   d54ee:	4602      	mov	r2, r0
   d54f0:	4620      	mov	r0, r4
   d54f2:	f7ff ffd7 	bl	d54a4 <_ZN6String4copyEPKcj>
}
   d54f6:	4620      	mov	r0, r4
   d54f8:	bd38      	pop	{r3, r4, r5, pc}

000d54fa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d54fa:	b538      	push	{r3, r4, r5, lr}
   d54fc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d54fe:	460c      	mov	r4, r1
   d5500:	b141      	cbz	r1, d5514 <_ZN6StringaSEPKc+0x1a>
   d5502:	4608      	mov	r0, r1
   d5504:	f001 fb5a 	bl	d6bbc <strlen>
   d5508:	4621      	mov	r1, r4
   d550a:	4602      	mov	r2, r0
   d550c:	4628      	mov	r0, r5
   d550e:	f7ff ffc9 	bl	d54a4 <_ZN6String4copyEPKcj>
   d5512:	e001      	b.n	d5518 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5514:	f7ff ff9e 	bl	d5454 <_ZN6String10invalidateEv>

	return *this;
}
   d5518:	4628      	mov	r0, r5
   d551a:	bd38      	pop	{r3, r4, r5, pc}

000d551c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d551e:	4606      	mov	r6, r0
   d5520:	460d      	mov	r5, r1
   d5522:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5524:	2400      	movs	r4, #0
  while (size--) {
   d5526:	42bd      	cmp	r5, r7
   d5528:	d00c      	beq.n	d5544 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d552a:	6833      	ldr	r3, [r6, #0]
   d552c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5530:	689b      	ldr	r3, [r3, #8]
   d5532:	4630      	mov	r0, r6
   d5534:	4798      	blx	r3
     if (chunk>=0)
   d5536:	2800      	cmp	r0, #0
   d5538:	db01      	blt.n	d553e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d553a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d553c:	e7f3      	b.n	d5526 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d553e:	2c00      	cmp	r4, #0
   d5540:	bf08      	it	eq
   d5542:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5544:	4620      	mov	r0, r4
   d5546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5548 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5548:	b570      	push	{r4, r5, r6, lr}
   d554a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d554c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d554e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5550:	b149      	cbz	r1, d5566 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5552:	f001 fb33 	bl	d6bbc <strlen>
   d5556:	682b      	ldr	r3, [r5, #0]
   d5558:	4602      	mov	r2, r0
   d555a:	4621      	mov	r1, r4
   d555c:	4628      	mov	r0, r5
   d555e:	68db      	ldr	r3, [r3, #12]
    }
   d5560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5564:	4718      	bx	r3
    }
   d5566:	bd70      	pop	{r4, r5, r6, pc}

000d5568 <_ZN5Print5printEPKc>:
   d5568:	b508      	push	{r3, lr}
   d556a:	f7ff ffed 	bl	d5548 <_ZN5Print5writeEPKc>
   d556e:	bd08      	pop	{r3, pc}

000d5570 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5570:	6803      	ldr	r3, [r0, #0]
   d5572:	689b      	ldr	r3, [r3, #8]
   d5574:	4718      	bx	r3

000d5576 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d5576:	680a      	ldr	r2, [r1, #0]
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   d5578:	460b      	mov	r3, r1
   return x.printTo(*this);
   d557a:	6812      	ldr	r2, [r2, #0]
   d557c:	4601      	mov	r1, r0
   d557e:	4618      	mov	r0, r3
   d5580:	4710      	bx	r2

000d5582 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5582:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5584:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5586:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5588:	f7ff fff2 	bl	d5570 <_ZN5Print5printEc>
  n += print('\n');
   d558c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d558e:	4604      	mov	r4, r0
  n += print('\n');
   d5590:	4628      	mov	r0, r5
   d5592:	f7ff ffed 	bl	d5570 <_ZN5Print5printEc>
  return n;
}
   d5596:	4420      	add	r0, r4
   d5598:	bd38      	pop	{r3, r4, r5, pc}

000d559a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d559a:	b538      	push	{r3, r4, r5, lr}
   d559c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d559e:	f7ff ffd3 	bl	d5548 <_ZN5Print5writeEPKc>
   d55a2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d55a4:	4628      	mov	r0, r5
   d55a6:	f7ff ffec 	bl	d5582 <_ZN5Print7printlnEv>
  return n;
}
   d55aa:	4420      	add	r0, r4
   d55ac:	bd38      	pop	{r3, r4, r5, pc}

000d55ae <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   d55ae:	b538      	push	{r3, r4, r5, lr}
   d55b0:	4605      	mov	r5, r0
   size_t n = print(x);
   d55b2:	f7ff ffe0 	bl	d5576 <_ZN5Print5printERK9Printable>
   d55b6:	4604      	mov	r4, r0
   n += println();
   d55b8:	4628      	mov	r0, r5
   d55ba:	f7ff ffe2 	bl	d5582 <_ZN5Print7printlnEv>
   return n;
 }
   d55be:	4420      	add	r0, r4
   d55c0:	bd38      	pop	{r3, r4, r5, pc}

000d55c2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d55c2:	b530      	push	{r4, r5, lr}
   d55c4:	b08b      	sub	sp, #44	; 0x2c
   d55c6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d55c8:	2100      	movs	r1, #0
   d55ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d55ce:	2a01      	cmp	r2, #1
   d55d0:	bf98      	it	ls
   d55d2:	220a      	movls	r2, #10
   d55d4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d55d8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d55dc:	fb05 3312 	mls	r3, r5, r2, r3
   d55e0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d55e4:	2b09      	cmp	r3, #9
   d55e6:	bf94      	ite	ls
   d55e8:	3330      	addls	r3, #48	; 0x30
   d55ea:	3337      	addhi	r3, #55	; 0x37
   d55ec:	b2db      	uxtb	r3, r3
   d55ee:	4621      	mov	r1, r4
   d55f0:	f804 3901 	strb.w	r3, [r4], #-1
   d55f4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d55f6:	2d00      	cmp	r5, #0
   d55f8:	d1ee      	bne.n	d55d8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d55fa:	f7ff ffa5 	bl	d5548 <_ZN5Print5writeEPKc>
}
   d55fe:	b00b      	add	sp, #44	; 0x2c
   d5600:	bd30      	pop	{r4, r5, pc}

000d5602 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5602:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5604:	b92a      	cbnz	r2, d5612 <_ZN5Print5printEmi+0x10>
   d5606:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5608:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d560c:	689b      	ldr	r3, [r3, #8]
   d560e:	b2c9      	uxtb	r1, r1
   d5610:	4718      	bx	r3
  else return printNumber(n, base);
   d5612:	b2d2      	uxtb	r2, r2
}
   d5614:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5618:	f7ff bfd3 	b.w	d55c2 <_ZN5Print11printNumberEmh>

000d561c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d561c:	f7ff bff1 	b.w	d5602 <_ZN5Print5printEmi>

000d5620 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5620:	b40c      	push	{r2, r3}
   d5622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5626:	b087      	sub	sp, #28
   d5628:	af00      	add	r7, sp, #0
   d562a:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d562e:	4605      	mov	r5, r0
   d5630:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5634:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5636:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5638:	4623      	mov	r3, r4
   d563a:	464a      	mov	r2, r9
   d563c:	2114      	movs	r1, #20
   d563e:	1d38      	adds	r0, r7, #4
   d5640:	f7ff fb3c 	bl	d4cbc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5644:	2813      	cmp	r0, #19
   d5646:	d805      	bhi.n	d5654 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5648:	1d39      	adds	r1, r7, #4
   d564a:	4628      	mov	r0, r5
   d564c:	f7ff ff7c 	bl	d5548 <_ZN5Print5writeEPKc>
   d5650:	4604      	mov	r4, r0
   d5652:	e013      	b.n	d567c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5654:	f100 0308 	add.w	r3, r0, #8
   d5658:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d565c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d565e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5662:	1c41      	adds	r1, r0, #1
   d5664:	4623      	mov	r3, r4
   d5666:	464a      	mov	r2, r9
   d5668:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d566a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d566c:	f7ff fb26 	bl	d4cbc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5670:	4669      	mov	r1, sp
   d5672:	4628      	mov	r0, r5
   d5674:	f7ff ff68 	bl	d5548 <_ZN5Print5writeEPKc>
   d5678:	4604      	mov	r4, r0
   d567a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d567c:	b11e      	cbz	r6, d5686 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d567e:	4628      	mov	r0, r5
   d5680:	f7ff ff7f 	bl	d5582 <_ZN5Print7printlnEv>
   d5684:	4404      	add	r4, r0
    return n;
}
   d5686:	4620      	mov	r0, r4
   d5688:	371c      	adds	r7, #28
   d568a:	46bd      	mov	sp, r7
   d568c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5690:	b002      	add	sp, #8
   d5692:	4770      	bx	lr

000d5694 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5694:	6800      	ldr	r0, [r0, #0]
   d5696:	f7ff b943 	b.w	d4920 <os_mutex_recursive_lock>
	...

000d569c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d569c:	4b01      	ldr	r3, [pc, #4]	; (d56a4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d569e:	4a02      	ldr	r2, [pc, #8]	; (d56a8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d56a0:	601a      	str	r2, [r3, #0]
   d56a2:	4770      	bx	lr
   d56a4:	2003e3f0 	.word	0x2003e3f0
   d56a8:	000d6de1 	.word	0x000d6de1

000d56ac <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d56ac:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d56b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d56b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d56b8:	d40f      	bmi.n	d56da <_ZN9TimeClass4zoneEf+0x2e>
   d56ba:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d56be:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d56c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d56c6:	dc08      	bgt.n	d56da <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d56c8:	eddf 7a04 	vldr	s15, [pc, #16]	; d56dc <_ZN9TimeClass4zoneEf+0x30>
   d56cc:	4b04      	ldr	r3, [pc, #16]	; (d56e0 <_ZN9TimeClass4zoneEf+0x34>)
   d56ce:	ee20 0a27 	vmul.f32	s0, s0, s15
   d56d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d56d6:	ed83 0a00 	vstr	s0, [r3]
   d56da:	4770      	bx	lr
   d56dc:	45610000 	.word	0x45610000
   d56e0:	2003e3f8 	.word	0x2003e3f8

000d56e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d56e4:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d56e6:	681a      	ldr	r2, [r3, #0]
   d56e8:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d56ea:	601a      	str	r2, [r3, #0]
   d56ec:	4770      	bx	lr
   d56ee:	bf00      	nop
   d56f0:	2003e308 	.word	0x2003e308
   d56f4:	2003e3f4 	.word	0x2003e3f4

000d56f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d56f8:	2100      	movs	r1, #0
   d56fa:	f7ff ba19 	b.w	d4b30 <system_delay_ms>

000d56fe <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d56fe:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5700:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5702:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5704:	b113      	cbz	r3, d570c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5706:	2203      	movs	r2, #3
   d5708:	4601      	mov	r1, r0
   d570a:	4798      	blx	r3
    }
   d570c:	4620      	mov	r0, r4
   d570e:	bd10      	pop	{r4, pc}

000d5710 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5710:	b510      	push	{r4, lr}
   d5712:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5714:	f7ff fff3 	bl	d56fe <_ZNSt14_Function_baseD1Ev>
   d5718:	4620      	mov	r0, r4
   d571a:	bd10      	pop	{r4, pc}

000d571c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d571c:	4803      	ldr	r0, [pc, #12]	; (d572c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d571e:	4a04      	ldr	r2, [pc, #16]	; (d5730 <_GLOBAL__sub_I_RGB+0x14>)
   d5720:	4904      	ldr	r1, [pc, #16]	; (d5734 <_GLOBAL__sub_I_RGB+0x18>)
   d5722:	2300      	movs	r3, #0
   d5724:	6083      	str	r3, [r0, #8]
   d5726:	f001 b887 	b.w	d6838 <__aeabi_atexit>
   d572a:	bf00      	nop
   d572c:	2003e3fc 	.word	0x2003e3fc
   d5730:	2003e370 	.word	0x2003e370
   d5734:	000d5711 	.word	0x000d5711

000d5738 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5738:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d573a:	4b0c      	ldr	r3, [pc, #48]	; (d576c <serialEventRun+0x34>)
   d573c:	b133      	cbz	r3, d574c <serialEventRun+0x14>
   d573e:	f000 f941 	bl	d59c4 <_Z16_fetch_usbserialv>
   d5742:	6803      	ldr	r3, [r0, #0]
   d5744:	691b      	ldr	r3, [r3, #16]
   d5746:	4798      	blx	r3
   d5748:	2800      	cmp	r0, #0
   d574a:	dc09      	bgt.n	d5760 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d574c:	4b08      	ldr	r3, [pc, #32]	; (d5770 <serialEventRun+0x38>)
   d574e:	b163      	cbz	r3, d576a <serialEventRun+0x32>
   d5750:	f000 f99e 	bl	d5a90 <_Z22__fetch_global_Serial1v>
   d5754:	6803      	ldr	r3, [r0, #0]
   d5756:	691b      	ldr	r3, [r3, #16]
   d5758:	4798      	blx	r3
   d575a:	2800      	cmp	r0, #0
   d575c:	dc03      	bgt.n	d5766 <serialEventRun+0x2e>
   d575e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5760:	f3af 8000 	nop.w
   d5764:	e7f2      	b.n	d574c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5766:	f3af 8000 	nop.w
   d576a:	bd08      	pop	{r3, pc}
	...

000d5774 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5774:	b508      	push	{r3, lr}
	serialEventRun();
   d5776:	f7ff ffdf 	bl	d5738 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d577a:	f7ff f891 	bl	d48a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d577e:	4b01      	ldr	r3, [pc, #4]	; (d5784 <_post_loop+0x10>)
   d5780:	6018      	str	r0, [r3, #0]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	2003e748 	.word	0x2003e748

000d5788 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5788:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d578a:	2300      	movs	r3, #0
   d578c:	9300      	str	r3, [sp, #0]
   d578e:	461a      	mov	r2, r3
   d5790:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5794:	f7ff f9de 	bl	d4b54 <system_ctrl_set_result>
}
   d5798:	b003      	add	sp, #12
   d579a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d57a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d57a2:	8843      	ldrh	r3, [r0, #2]
   d57a4:	2b0a      	cmp	r3, #10
   d57a6:	d008      	beq.n	d57ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d57a8:	2b50      	cmp	r3, #80	; 0x50
   d57aa:	d109      	bne.n	d57c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d57ac:	4b09      	ldr	r3, [pc, #36]	; (d57d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d57ae:	681b      	ldr	r3, [r3, #0]
   d57b0:	b13b      	cbz	r3, d57c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d57b2:	b003      	add	sp, #12
   d57b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d57b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d57ba:	f7ff ffe5 	bl	d5788 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d57be:	e006      	b.n	d57ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57c0:	2300      	movs	r3, #0
   d57c2:	9300      	str	r3, [sp, #0]
   d57c4:	461a      	mov	r2, r3
   d57c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57ca:	f7ff f9c3 	bl	d4b54 <system_ctrl_set_result>
        break;
    }
}
   d57ce:	b003      	add	sp, #12
   d57d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d57d4:	2003e40c 	.word	0x2003e40c

000d57d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d57d8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d57da:	f7ff f851 	bl	d4880 <HAL_RNG_GetRandomNumber>
   d57de:	4604      	mov	r4, r0
    srand(seed);
   d57e0:	f001 f9c4 	bl	d6b6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d57e4:	4b07      	ldr	r3, [pc, #28]	; (d5804 <module_user_init_hook+0x2c>)
   d57e6:	b113      	cbz	r3, d57ee <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d57e8:	4620      	mov	r0, r4
   d57ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d57ee:	2100      	movs	r1, #0
   d57f0:	4804      	ldr	r0, [pc, #16]	; (d5804 <module_user_init_hook+0x2c>)
   d57f2:	f7ff fa43 	bl	d4c7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57f6:	2100      	movs	r1, #0
   d57f8:	4803      	ldr	r0, [pc, #12]	; (d5808 <module_user_init_hook+0x30>)
}
   d57fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57fe:	f7ff b99f 	b.w	d4b40 <system_ctrl_set_app_request_handler>
   d5802:	bf00      	nop
   d5804:	00000000 	.word	0x00000000
   d5808:	000d57a1 	.word	0x000d57a1

000d580c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d580c:	4770      	bx	lr

000d580e <_ZN9IPAddressD0Ev>:
   d580e:	b510      	push	{r4, lr}
   d5810:	4604      	mov	r4, r0
   d5812:	f7fe fc44 	bl	d409e <_ZdlPv>
   d5816:	4620      	mov	r0, r4
   d5818:	bd10      	pop	{r4, pc}

000d581a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d581a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d581c:	7d03      	ldrb	r3, [r0, #20]
   d581e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5820:	b08d      	sub	sp, #52	; 0x34
   d5822:	460e      	mov	r6, r1
   d5824:	f100 0704 	add.w	r7, r0, #4
   d5828:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d582c:	d002      	beq.n	d5834 <_ZNK9IPAddress7printToER5Print+0x1a>
   d582e:	f100 0508 	add.w	r5, r0, #8
   d5832:	e018      	b.n	d5866 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5834:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5836:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5838:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d583c:	232f      	movs	r3, #47	; 0x2f
   d583e:	462a      	mov	r2, r5
   d5840:	200a      	movs	r0, #10
   d5842:	f7ff f885 	bl	d4950 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5846:	4628      	mov	r0, r5
   d5848:	f001 f9b8 	bl	d6bbc <strlen>
   d584c:	6833      	ldr	r3, [r6, #0]
   d584e:	4602      	mov	r2, r0
   d5850:	68db      	ldr	r3, [r3, #12]
   d5852:	4629      	mov	r1, r5
   d5854:	4630      	mov	r0, r6
   d5856:	4798      	blx	r3
   d5858:	e00f      	b.n	d587a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d585a:	b124      	cbz	r4, d5866 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d585c:	212e      	movs	r1, #46	; 0x2e
   d585e:	4630      	mov	r0, r6
   d5860:	f7ff fe86 	bl	d5570 <_ZN5Print5printEc>
   d5864:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5866:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d586a:	220a      	movs	r2, #10
   d586c:	4630      	mov	r0, r6
   d586e:	f7ff fed5 	bl	d561c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5872:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5874:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5876:	d1f0      	bne.n	d585a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5878:	4620      	mov	r0, r4
    }
    return n;
}
   d587a:	b00d      	add	sp, #52	; 0x34
   d587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5880 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5880:	b510      	push	{r4, lr}
   d5882:	4b05      	ldr	r3, [pc, #20]	; (d5898 <_ZN9IPAddressC1Ev+0x18>)
   d5884:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5886:	2211      	movs	r2, #17
   d5888:	f840 3b04 	str.w	r3, [r0], #4
   d588c:	2100      	movs	r1, #0
   d588e:	f001 f965 	bl	d6b5c <memset>
{
    clear();
}
   d5892:	4620      	mov	r0, r4
   d5894:	bd10      	pop	{r4, pc}
   d5896:	bf00      	nop
   d5898:	000d6e3c 	.word	0x000d6e3c

000d589c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d589c:	4603      	mov	r3, r0
   d589e:	4a07      	ldr	r2, [pc, #28]	; (d58bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d58a0:	b510      	push	{r4, lr}
   d58a2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d58a6:	f101 0210 	add.w	r2, r1, #16
   d58aa:	f851 4b04 	ldr.w	r4, [r1], #4
   d58ae:	f843 4b04 	str.w	r4, [r3], #4
   d58b2:	4291      	cmp	r1, r2
   d58b4:	d1f9      	bne.n	d58aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d58b6:	780a      	ldrb	r2, [r1, #0]
   d58b8:	701a      	strb	r2, [r3, #0]
}
   d58ba:	bd10      	pop	{r4, pc}
   d58bc:	000d6e3c 	.word	0x000d6e3c

000d58c0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d58c0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d58c2:	2b04      	cmp	r3, #4
   d58c4:	d101      	bne.n	d58ca <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d58c6:	6840      	ldr	r0, [r0, #4]
   d58c8:	e008      	b.n	d58dc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d58ca:	2b06      	cmp	r3, #6
   d58cc:	d10a      	bne.n	d58e4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d58ce:	6843      	ldr	r3, [r0, #4]
   d58d0:	b153      	cbz	r3, d58e8 <_ZNK9IPAddresscvbEv+0x28>
   d58d2:	6883      	ldr	r3, [r0, #8]
   d58d4:	b143      	cbz	r3, d58e8 <_ZNK9IPAddresscvbEv+0x28>
   d58d6:	68c3      	ldr	r3, [r0, #12]
   d58d8:	b133      	cbz	r3, d58e8 <_ZNK9IPAddresscvbEv+0x28>
   d58da:	6900      	ldr	r0, [r0, #16]
   d58dc:	3000      	adds	r0, #0
   d58de:	bf18      	it	ne
   d58e0:	2001      	movne	r0, #1
   d58e2:	4770      	bx	lr
   d58e4:	2000      	movs	r0, #0
   d58e6:	4770      	bx	lr
   d58e8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d58ea:	4770      	bx	lr

000d58ec <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d58ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d58ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d58f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d58f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d58fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d58fe:	2304      	movs	r3, #4
   d5900:	6041      	str	r1, [r0, #4]
   d5902:	7503      	strb	r3, [r0, #20]
   d5904:	bd10      	pop	{r4, pc}

000d5906 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5906:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5908:	780d      	ldrb	r5, [r1, #0]
   d590a:	788b      	ldrb	r3, [r1, #2]
   d590c:	784a      	ldrb	r2, [r1, #1]
   d590e:	78c9      	ldrb	r1, [r1, #3]
   d5910:	9100      	str	r1, [sp, #0]
   d5912:	4629      	mov	r1, r5
   d5914:	f7ff ffea 	bl	d58ec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5918:	b003      	add	sp, #12
   d591a:	bd30      	pop	{r4, r5, pc}

000d591c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d591c:	b510      	push	{r4, lr}
   d591e:	4b03      	ldr	r3, [pc, #12]	; (d592c <_ZN9IPAddressC1EPKh+0x10>)
   d5920:	6003      	str	r3, [r0, #0]
   d5922:	4604      	mov	r4, r0
{
    *this = address;
   d5924:	f7ff ffef 	bl	d5906 <_ZN9IPAddressaSEPKh>
}
   d5928:	4620      	mov	r0, r4
   d592a:	bd10      	pop	{r4, pc}
   d592c:	000d6e3c 	.word	0x000d6e3c

000d5930 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5930:	7441      	strb	r1, [r0, #17]
   d5932:	4770      	bx	lr

000d5934 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5934:	4770      	bx	lr

000d5936 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5936:	2100      	movs	r1, #0
   d5938:	7c00      	ldrb	r0, [r0, #16]
   d593a:	f7ff b8d1 	b.w	d4ae0 <HAL_USB_USART_Receive_Data>

000d593e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d593e:	2101      	movs	r1, #1
   d5940:	7c00      	ldrb	r0, [r0, #16]
   d5942:	f7ff b8cd 	b.w	d4ae0 <HAL_USB_USART_Receive_Data>

000d5946 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5946:	7c00      	ldrb	r0, [r0, #16]
   d5948:	f7ff b8c2 	b.w	d4ad0 <HAL_USB_USART_Available_Data_For_Write>

000d594c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d594c:	7c00      	ldrb	r0, [r0, #16]
   d594e:	f7ff b8b7 	b.w	d4ac0 <HAL_USB_USART_Available_Data>

000d5952 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5952:	b538      	push	{r3, r4, r5, lr}
   d5954:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5956:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5958:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d595a:	f7ff f8b9 	bl	d4ad0 <HAL_USB_USART_Available_Data_For_Write>
   d595e:	2800      	cmp	r0, #0
   d5960:	dc01      	bgt.n	d5966 <_ZN9USBSerial5writeEh+0x14>
   d5962:	7c60      	ldrb	r0, [r4, #17]
   d5964:	b120      	cbz	r0, d5970 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5966:	4629      	mov	r1, r5
   d5968:	7c20      	ldrb	r0, [r4, #16]
   d596a:	f7ff f8c1 	bl	d4af0 <HAL_USB_USART_Send_Data>
    return 1;
   d596e:	2001      	movs	r0, #1
  }
  return 0;
}
   d5970:	bd38      	pop	{r3, r4, r5, pc}

000d5972 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5972:	7c00      	ldrb	r0, [r0, #16]
   d5974:	f7ff b8c4 	b.w	d4b00 <HAL_USB_USART_Flush_Data>

000d5978 <_ZN9USBSerialD0Ev>:
   d5978:	b510      	push	{r4, lr}
   d597a:	4604      	mov	r4, r0
   d597c:	f7fe fb8f 	bl	d409e <_ZdlPv>
   d5980:	4620      	mov	r0, r4
   d5982:	bd10      	pop	{r4, pc}

000d5984 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5984:	b510      	push	{r4, lr}
   d5986:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5988:	2300      	movs	r3, #0
   d598a:	6063      	str	r3, [r4, #4]
   d598c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5990:	60a3      	str	r3, [r4, #8]
   d5992:	4b05      	ldr	r3, [pc, #20]	; (d59a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5994:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5996:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5998:	4608      	mov	r0, r1
{
  _serial = serial;
   d599a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d599c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d599e:	4611      	mov	r1, r2
   d59a0:	f7ff f87e 	bl	d4aa0 <HAL_USB_USART_Init>
}
   d59a4:	4620      	mov	r0, r4
   d59a6:	bd10      	pop	{r4, pc}
   d59a8:	000d6e50 	.word	0x000d6e50

000d59ac <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d59ac:	2200      	movs	r2, #0
   d59ae:	7c00      	ldrb	r0, [r0, #16]
   d59b0:	f7ff b87e 	b.w	d4ab0 <HAL_USB_USART_Begin>

000d59b4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d59b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d59b6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d59b8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d59ba:	2100      	movs	r1, #0
   d59bc:	f001 f8ce 	bl	d6b5c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d59c0:	4620      	mov	r0, r4
   d59c2:	bd10      	pop	{r4, pc}

000d59c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d59c4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d59c6:	4d0e      	ldr	r5, [pc, #56]	; (d5a00 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d59c8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d59ca:	a801      	add	r0, sp, #4
   d59cc:	f7ff fff2 	bl	d59b4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d59d0:	6829      	ldr	r1, [r5, #0]
   d59d2:	f011 0401 	ands.w	r4, r1, #1
   d59d6:	d110      	bne.n	d59fa <_Z16_fetch_usbserialv+0x36>
   d59d8:	4628      	mov	r0, r5
   d59da:	f7fe fb64 	bl	d40a6 <__cxa_guard_acquire>
   d59de:	b160      	cbz	r0, d59fa <_Z16_fetch_usbserialv+0x36>
   d59e0:	aa01      	add	r2, sp, #4
   d59e2:	4621      	mov	r1, r4
   d59e4:	4807      	ldr	r0, [pc, #28]	; (d5a04 <_Z16_fetch_usbserialv+0x40>)
   d59e6:	f7ff ffcd 	bl	d5984 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d59ea:	4628      	mov	r0, r5
   d59ec:	f7fe fb60 	bl	d40b0 <__cxa_guard_release>
   d59f0:	4a05      	ldr	r2, [pc, #20]	; (d5a08 <_Z16_fetch_usbserialv+0x44>)
   d59f2:	4906      	ldr	r1, [pc, #24]	; (d5a0c <_Z16_fetch_usbserialv+0x48>)
   d59f4:	4803      	ldr	r0, [pc, #12]	; (d5a04 <_Z16_fetch_usbserialv+0x40>)
   d59f6:	f000 ff1f 	bl	d6838 <__aeabi_atexit>
	return _usbserial;
}
   d59fa:	4802      	ldr	r0, [pc, #8]	; (d5a04 <_Z16_fetch_usbserialv+0x40>)
   d59fc:	b007      	add	sp, #28
   d59fe:	bd30      	pop	{r4, r5, pc}
   d5a00:	2003e410 	.word	0x2003e410
   d5a04:	2003e414 	.word	0x2003e414
   d5a08:	2003e370 	.word	0x2003e370
   d5a0c:	000d5935 	.word	0x000d5935

000d5a10 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a10:	4770      	bx	lr

000d5a12 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a12:	7441      	strb	r1, [r0, #17]
   d5a14:	4770      	bx	lr

000d5a16 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5a16:	7c00      	ldrb	r0, [r0, #16]
   d5a18:	f7fe bff2 	b.w	d4a00 <HAL_USART_Available_Data_For_Write>

000d5a1c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5a1c:	7c00      	ldrb	r0, [r0, #16]
   d5a1e:	f7fe bfcf 	b.w	d49c0 <HAL_USART_Available_Data>

000d5a22 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5a22:	7c00      	ldrb	r0, [r0, #16]
   d5a24:	f7fe bfdc 	b.w	d49e0 <HAL_USART_Peek_Data>

000d5a28 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5a28:	7c00      	ldrb	r0, [r0, #16]
   d5a2a:	f7fe bfd1 	b.w	d49d0 <HAL_USART_Read_Data>

000d5a2e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5a2e:	7c00      	ldrb	r0, [r0, #16]
   d5a30:	f7fe bfde 	b.w	d49f0 <HAL_USART_Flush_Data>

000d5a34 <_ZN11USARTSerialD0Ev>:
   d5a34:	b510      	push	{r4, lr}
   d5a36:	4604      	mov	r4, r0
   d5a38:	f7fe fb31 	bl	d409e <_ZdlPv>
   d5a3c:	4620      	mov	r0, r4
   d5a3e:	bd10      	pop	{r4, pc}

000d5a40 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a40:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a42:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5a44:	4604      	mov	r4, r0
   d5a46:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a48:	b925      	cbnz	r5, d5a54 <_ZN11USARTSerial5writeEh+0x14>
   d5a4a:	7c00      	ldrb	r0, [r0, #16]
   d5a4c:	f7fe ffd8 	bl	d4a00 <HAL_USART_Available_Data_For_Write>
   d5a50:	2800      	cmp	r0, #0
   d5a52:	dd05      	ble.n	d5a60 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a54:	4631      	mov	r1, r6
   d5a56:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a5c:	f7fe bfa8 	b.w	d49b0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5a60:	4628      	mov	r0, r5
   d5a62:	bd70      	pop	{r4, r5, r6, pc}

000d5a64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5a64:	b510      	push	{r4, lr}
   d5a66:	4604      	mov	r4, r0
   d5a68:	4608      	mov	r0, r1
   d5a6a:	4611      	mov	r1, r2
   d5a6c:	2200      	movs	r2, #0
   d5a6e:	6062      	str	r2, [r4, #4]
   d5a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a74:	60a2      	str	r2, [r4, #8]
   d5a76:	4a05      	ldr	r2, [pc, #20]	; (d5a8c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5a78:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5a7a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5a7c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5a7e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5a80:	461a      	mov	r2, r3
   d5a82:	f7fe ff8d 	bl	d49a0 <HAL_USART_Init>
}
   d5a86:	4620      	mov	r0, r4
   d5a88:	bd10      	pop	{r4, pc}
   d5a8a:	bf00      	nop
   d5a8c:	000d6e80 	.word	0x000d6e80

000d5a90 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5a90:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5a92:	4d0c      	ldr	r5, [pc, #48]	; (d5ac4 <_Z22__fetch_global_Serial1v+0x34>)
   d5a94:	6829      	ldr	r1, [r5, #0]
   d5a96:	f011 0401 	ands.w	r4, r1, #1
   d5a9a:	d111      	bne.n	d5ac0 <_Z22__fetch_global_Serial1v+0x30>
   d5a9c:	4628      	mov	r0, r5
   d5a9e:	f7fe fb02 	bl	d40a6 <__cxa_guard_acquire>
   d5aa2:	b168      	cbz	r0, d5ac0 <_Z22__fetch_global_Serial1v+0x30>
   d5aa4:	4a08      	ldr	r2, [pc, #32]	; (d5ac8 <_Z22__fetch_global_Serial1v+0x38>)
   d5aa6:	4b09      	ldr	r3, [pc, #36]	; (d5acc <_Z22__fetch_global_Serial1v+0x3c>)
   d5aa8:	4809      	ldr	r0, [pc, #36]	; (d5ad0 <_Z22__fetch_global_Serial1v+0x40>)
   d5aaa:	4621      	mov	r1, r4
   d5aac:	f7ff ffda 	bl	d5a64 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5ab0:	4628      	mov	r0, r5
   d5ab2:	f7fe fafd 	bl	d40b0 <__cxa_guard_release>
   d5ab6:	4a07      	ldr	r2, [pc, #28]	; (d5ad4 <_Z22__fetch_global_Serial1v+0x44>)
   d5ab8:	4907      	ldr	r1, [pc, #28]	; (d5ad8 <_Z22__fetch_global_Serial1v+0x48>)
   d5aba:	4805      	ldr	r0, [pc, #20]	; (d5ad0 <_Z22__fetch_global_Serial1v+0x40>)
   d5abc:	f000 febc 	bl	d6838 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5ac0:	4803      	ldr	r0, [pc, #12]	; (d5ad0 <_Z22__fetch_global_Serial1v+0x40>)
   d5ac2:	bd38      	pop	{r3, r4, r5, pc}
   d5ac4:	2003e4c0 	.word	0x2003e4c0
   d5ac8:	2003e4c4 	.word	0x2003e4c4
   d5acc:	2003e43c 	.word	0x2003e43c
   d5ad0:	2003e428 	.word	0x2003e428
   d5ad4:	2003e370 	.word	0x2003e370
   d5ad8:	000d5a11 	.word	0x000d5a11

000d5adc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5adc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5ade:	2301      	movs	r3, #1
   d5ae0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5ae2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5ae4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d5ae6:	b10b      	cbz	r3, d5aec <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d5ae8:	68c0      	ldr	r0, [r0, #12]
   d5aea:	e006      	b.n	d5afa <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5aec:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5aee:	b128      	cbz	r0, d5afc <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5af0:	6883      	ldr	r3, [r0, #8]
   d5af2:	b90b      	cbnz	r3, d5af8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d5af4:	f000 febf 	bl	d6876 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5af8:	68c3      	ldr	r3, [r0, #12]
   d5afa:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d5afc:	2301      	movs	r3, #1
   d5afe:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5b00:	2000      	movs	r0, #0
    }
   d5b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d5b06:	f7fe bf1b 	b.w	d4940 <os_thread_exit>

000d5b0a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b0a:	2200      	movs	r2, #0
   d5b0c:	4611      	mov	r1, r2
   d5b0e:	6840      	ldr	r0, [r0, #4]
   d5b10:	f7ff b874 	b.w	d4bfc <network_listening>

000d5b14 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b14:	2200      	movs	r2, #0
   d5b16:	4611      	mov	r1, r2
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	f7ff b87f 	b.w	d4c1c <network_get_listen_timeout>

000d5b1e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b1e:	2200      	movs	r2, #0
   d5b20:	6840      	ldr	r0, [r0, #4]
   d5b22:	f7ff b873 	b.w	d4c0c <network_set_listen_timeout>

000d5b26 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b26:	2200      	movs	r2, #0
   d5b28:	f081 0101 	eor.w	r1, r1, #1
   d5b2c:	6840      	ldr	r0, [r0, #4]
   d5b2e:	f7ff b85d 	b.w	d4bec <network_listen>

000d5b32 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5b32:	2300      	movs	r3, #0
   d5b34:	461a      	mov	r2, r3
   d5b36:	4619      	mov	r1, r3
   d5b38:	6840      	ldr	r0, [r0, #4]
   d5b3a:	f7ff b84f 	b.w	d4bdc <network_off>

000d5b3e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5b3e:	2300      	movs	r3, #0
   d5b40:	461a      	mov	r2, r3
   d5b42:	4619      	mov	r1, r3
   d5b44:	6840      	ldr	r0, [r0, #4]
   d5b46:	f7ff b841 	b.w	d4bcc <network_on>

000d5b4a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b4a:	2200      	movs	r2, #0
   d5b4c:	4611      	mov	r1, r2
   d5b4e:	6840      	ldr	r0, [r0, #4]
   d5b50:	f7ff b834 	b.w	d4bbc <network_ready>

000d5b54 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b54:	2200      	movs	r2, #0
   d5b56:	4611      	mov	r1, r2
   d5b58:	6840      	ldr	r0, [r0, #4]
   d5b5a:	f7ff b81f 	b.w	d4b9c <network_connecting>

000d5b5e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b5e:	2200      	movs	r2, #0
   d5b60:	2102      	movs	r1, #2
   d5b62:	6840      	ldr	r0, [r0, #4]
   d5b64:	f7ff b822 	b.w	d4bac <network_disconnect>

000d5b68 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b68:	2300      	movs	r3, #0
   d5b6a:	461a      	mov	r2, r3
   d5b6c:	6840      	ldr	r0, [r0, #4]
   d5b6e:	f7ff b80d 	b.w	d4b8c <network_connect>

000d5b72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5b72:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b74:	4605      	mov	r5, r0
   d5b76:	b178      	cbz	r0, d5b98 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b78:	6804      	ldr	r4, [r0, #0]
   d5b7a:	b144      	cbz	r4, d5b8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5b7c:	68a3      	ldr	r3, [r4, #8]
   d5b7e:	b11b      	cbz	r3, d5b88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b80:	2203      	movs	r2, #3
   d5b82:	4621      	mov	r1, r4
   d5b84:	4620      	mov	r0, r4
   d5b86:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b88:	4620      	mov	r0, r4
   d5b8a:	f7fe fa88 	bl	d409e <_ZdlPv>
   d5b8e:	4628      	mov	r0, r5
      }
   d5b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b94:	f7fe ba83 	b.w	d409e <_ZdlPv>
   d5b98:	bd38      	pop	{r3, r4, r5, pc}

000d5b9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5b9a:	b110      	cbz	r0, d5ba2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5b9c:	6803      	ldr	r3, [r0, #0]
   d5b9e:	685b      	ldr	r3, [r3, #4]
   d5ba0:	4718      	bx	r3
   d5ba2:	4770      	bx	lr

000d5ba4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5ba4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5ba6:	6803      	ldr	r3, [r0, #0]
   d5ba8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5baa:	b1bb      	cbz	r3, d5bdc <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5bac:	6858      	ldr	r0, [r3, #4]
   d5bae:	f7fe fe87 	bl	d48c0 <os_thread_is_current>
   d5bb2:	b978      	cbnz	r0, d5bd4 <_ZN6ThreadD1Ev+0x30>
   d5bb4:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5bb6:	7c5a      	ldrb	r2, [r3, #17]
   d5bb8:	b912      	cbnz	r2, d5bc0 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5bba:	6858      	ldr	r0, [r3, #4]
   d5bbc:	f7fe fe90 	bl	d48e0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5bc0:	6823      	ldr	r3, [r4, #0]
   d5bc2:	6858      	ldr	r0, [r3, #4]
   d5bc4:	f7fe fe94 	bl	d48f0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bc8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5bca:	2300      	movs	r3, #0
   d5bcc:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5bce:	b128      	cbz	r0, d5bdc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5bd0:	f7ff ffcf 	bl	d5b72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bd4:	6820      	ldr	r0, [r4, #0]
   d5bd6:	b108      	cbz	r0, d5bdc <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5bd8:	f7ff ffcb 	bl	d5b72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5bdc:	4620      	mov	r0, r4
   d5bde:	bd10      	pop	{r4, pc}

000d5be0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5be0:	b538      	push	{r3, r4, r5, lr}
   d5be2:	4b0b      	ldr	r3, [pc, #44]	; (d5c10 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5be4:	6003      	str	r3, [r0, #0]
   d5be6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5be8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5bec:	b108      	cbz	r0, d5bf2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5bee:	f7fe fa58 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bf2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5bf6:	b12d      	cbz	r5, d5c04 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bf8:	4628      	mov	r0, r5
   d5bfa:	f7ff ffd3 	bl	d5ba4 <_ZN6ThreadD1Ev>
   d5bfe:	4628      	mov	r0, r5
   d5c00:	f7fe fa4d 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c04:	68a0      	ldr	r0, [r4, #8]
   d5c06:	b108      	cbz	r0, d5c0c <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5c08:	f7ff ffc7 	bl	d5b9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5c0c:	4620      	mov	r0, r4
   d5c0e:	bd38      	pop	{r3, r4, r5, pc}
   d5c10:	000d6eb0 	.word	0x000d6eb0

000d5c14 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c18:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d5c1a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d5c1e:	4606      	mov	r6, r0
   d5c20:	4688      	mov	r8, r1
   d5c22:	4691      	mov	r9, r2
   d5c24:	469a      	mov	sl, r3
   d5c26:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5c28:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d5c2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5c2c:	454b      	cmp	r3, r9
   d5c2e:	d129      	bne.n	d5c84 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d5c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d5c32:	4553      	cmp	r3, sl
   d5c34:	d126      	bne.n	d5c84 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d5c36:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d5c3a:	455b      	cmp	r3, fp
   d5c3c:	d122      	bne.n	d5c84 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5c3e:	2140      	movs	r1, #64	; 0x40
   d5c40:	4640      	mov	r0, r8
   d5c42:	f000 ffd8 	bl	d6bf6 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d5c46:	4641      	mov	r1, r8
   d5c48:	4602      	mov	r2, r0
   d5c4a:	4620      	mov	r0, r4
   d5c4c:	f000 ffbe 	bl	d6bcc <strncmp>
   d5c50:	b9c0      	cbnz	r0, d5c84 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5c52:	b16f      	cbz	r7, d5c70 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d5c54:	210c      	movs	r1, #12
   d5c56:	4638      	mov	r0, r7
   d5c58:	f000 ffcd 	bl	d6bf6 <strnlen>
                if (id_len)
   d5c5c:	4602      	mov	r2, r0
   d5c5e:	b138      	cbz	r0, d5c70 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d5c60:	2358      	movs	r3, #88	; 0x58
   d5c62:	fb03 6005 	mla	r0, r3, r5, r6
   d5c66:	4639      	mov	r1, r7
   d5c68:	3049      	adds	r0, #73	; 0x49
   d5c6a:	f000 ffaf 	bl	d6bcc <strncmp>
   d5c6e:	e004      	b.n	d5c7a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d5c70:	2058      	movs	r0, #88	; 0x58
   d5c72:	fb00 6505 	mla	r5, r0, r5, r6
   d5c76:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d5c7a:	fab0 f080 	clz	r0, r0
   d5c7e:	0940      	lsrs	r0, r0, #5
   d5c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5c84:	3501      	adds	r5, #1
   d5c86:	2d05      	cmp	r5, #5
   d5c88:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d5c8c:	d1cd      	bne.n	d5c2a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d5c8e:	2000      	movs	r0, #0
}
   d5c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5c94 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5c98:	b085      	sub	sp, #20
   d5c9a:	4607      	mov	r7, r0
   d5c9c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5ca0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5ca2:	9601      	str	r6, [sp, #4]
   d5ca4:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5ca8:	4689      	mov	r9, r1
   d5caa:	9202      	str	r2, [sp, #8]
   d5cac:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5cae:	f7ff ffb1 	bl	d5c14 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d5cb2:	2800      	cmp	r0, #0
   d5cb4:	d13c      	bne.n	d5d30 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d5cb6:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5cb8:	2358      	movs	r3, #88	; 0x58
   d5cba:	fb03 7504 	mla	r5, r3, r4, r7
   d5cbe:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d5cc2:	f1b8 0f00 	cmp.w	r8, #0
   d5cc6:	d12e      	bne.n	d5d26 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5cc8:	2140      	movs	r1, #64	; 0x40
   d5cca:	4648      	mov	r0, r9
   d5ccc:	f000 ff93 	bl	d6bf6 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5cd0:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5cd2:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5cd4:	4602      	mov	r2, r0
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	f000 ff35 	bl	d6b46 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d5cdc:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d5ce0:	4641      	mov	r1, r8
   d5ce2:	eb05 000b 	add.w	r0, r5, fp
   d5ce6:	f000 ff39 	bl	d6b5c <memset>
            event_handlers[i].handler = handler;
   d5cea:	9b02      	ldr	r3, [sp, #8]
   d5cec:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d5cee:	9b03      	ldr	r3, [sp, #12]
   d5cf0:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d5cf2:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5cf6:	b12e      	cbz	r6, d5d04 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d5cf8:	210c      	movs	r1, #12
   d5cfa:	4630      	mov	r0, r6
   d5cfc:	f000 ff7b 	bl	d6bf6 <strnlen>
   d5d00:	4605      	mov	r5, r0
   d5d02:	e000      	b.n	d5d06 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d5d04:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d5d06:	2058      	movs	r0, #88	; 0x58
   d5d08:	4344      	muls	r4, r0
   d5d0a:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d5d0c:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d5d0e:	462a      	mov	r2, r5
   d5d10:	4631      	mov	r1, r6
   d5d12:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d5d14:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d5d16:	f000 ff16 	bl	d6b46 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d5d1a:	2000      	movs	r0, #0
   d5d1c:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d5d20:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d5d24:	e005      	b.n	d5d32 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5d26:	3401      	adds	r4, #1
   d5d28:	2c05      	cmp	r4, #5
   d5d2a:	d1c6      	bne.n	d5cba <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d5d2c:	4802      	ldr	r0, [pc, #8]	; (d5d38 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d5d2e:	e000      	b.n	d5d32 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d5d30:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d5d32:	b005      	add	sp, #20
   d5d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5d38:	fffffefc 	.word	0xfffffefc

000d5d3c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d5d3c:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d5d3e:	2300      	movs	r3, #0
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	9300      	str	r3, [sp, #0]
   d5d44:	f7ff ffa6 	bl	d5c94 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d5d48:	b003      	add	sp, #12
   d5d4a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d4e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5d4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5d52:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d5d54:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5d56:	460d      	mov	r5, r1
   d5d58:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d5d5a:	f000 ff2f 	bl	d6bbc <strlen>
   d5d5e:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d5d62:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5d66:	b1ab      	cbz	r3, d5d94 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5d68:	2140      	movs	r1, #64	; 0x40
   d5d6a:	4620      	mov	r0, r4
   d5d6c:	f000 ff43 	bl	d6bf6 <strnlen>

        if (event_name_length < filter_length)
   d5d70:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5d72:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d5d74:	d30b      	bcc.n	d5d8e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d5d76:	4629      	mov	r1, r5
   d5d78:	4620      	mov	r0, r4
   d5d7a:	f000 fed5 	bl	d6b28 <memcmp>
        if (0 == cmp)
   d5d7e:	b930      	cbnz	r0, d5d8e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d5d80:	9000      	str	r0, [sp, #0]
   d5d82:	4643      	mov	r3, r8
   d5d84:	462a      	mov	r2, r5
   d5d86:	4621      	mov	r1, r4
   d5d88:	2058      	movs	r0, #88	; 0x58
   d5d8a:	f7fe feed 	bl	d4b68 <system_invoke_event_handler>
   d5d8e:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5d90:	42b4      	cmp	r4, r6
   d5d92:	d1e7      	bne.n	d5d64 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5d94:	b002      	add	sp, #8
   d5d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5d9c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5d9c:	b530      	push	{r4, r5, lr}
   d5d9e:	b08d      	sub	sp, #52	; 0x34
   d5da0:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5da2:	2211      	movs	r2, #17
   d5da4:	2100      	movs	r1, #0
   d5da6:	a801      	add	r0, sp, #4
   d5da8:	f000 fed8 	bl	d6b5c <memset>
    addr.v = 6;
   d5dac:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5dae:	aa01      	add	r2, sp, #4
   d5db0:	4909      	ldr	r1, [pc, #36]	; (d5dd8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5db2:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5db6:	200a      	movs	r0, #10
   d5db8:	f7fe fdd2 	bl	d4960 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5dbc:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5dbe:	a901      	add	r1, sp, #4
   d5dc0:	a806      	add	r0, sp, #24
   d5dc2:	f7ff fd6b 	bl	d589c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dc8:	3404      	adds	r4, #4
   d5dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5dcc:	682b      	ldr	r3, [r5, #0]
   d5dce:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5dd0:	2000      	movs	r0, #0
   d5dd2:	b00d      	add	sp, #52	; 0x34
   d5dd4:	bd30      	pop	{r4, r5, pc}
   d5dd6:	bf00      	nop
   d5dd8:	000d6edc 	.word	0x000d6edc

000d5ddc <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5ddc:	b530      	push	{r4, r5, lr}
   d5dde:	4604      	mov	r4, r0
   d5de0:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5de2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5de6:	f7ff fc55 	bl	d5694 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d5dea:	6823      	ldr	r3, [r4, #0]
   d5dec:	bb83      	cbnz	r3, d5e50 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5dee:	204c      	movs	r0, #76	; 0x4c
   d5df0:	f7fe f951 	bl	d4096 <_Znwj>
   d5df4:	4605      	mov	r5, r0
   d5df6:	b108      	cbz	r0, d5dfc <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5df8:	f7ff fa80 	bl	d52fc <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dfc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5dfe:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e00:	b108      	cbz	r0, d5e06 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5e02:	f7ff feca 	bl	d5b9a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e06:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d5e08:	b320      	cbz	r0, d5e54 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d5e0a:	2200      	movs	r2, #0
   d5e0c:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5e10:	f7ff faa3 	bl	d535a <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5e14:	a908      	add	r1, sp, #32
   d5e16:	2500      	movs	r5, #0
   d5e18:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5e1c:	4811      	ldr	r0, [pc, #68]	; (d5e64 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d5e1e:	f7fe fd07 	bl	d4830 <if_name_to_index>
   d5e22:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5e24:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5e28:	6803      	ldr	r3, [r0, #0]
   d5e2a:	f249 0169 	movw	r1, #36969	; 0x9069
   d5e2e:	6a1b      	ldr	r3, [r3, #32]
   d5e30:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5e32:	a802      	add	r0, sp, #8
   d5e34:	f7ff fd24 	bl	d5880 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5e38:	a802      	add	r0, sp, #8
   d5e3a:	f7ff ffaf 	bl	d5d9c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5e3e:	2800      	cmp	r0, #0
   d5e40:	db04      	blt.n	d5e4c <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d5e42:	a902      	add	r1, sp, #8
   d5e44:	6820      	ldr	r0, [r4, #0]
   d5e46:	f7ff faf2 	bl	d542e <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d5e4a:	e004      	b.n	d5e56 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d5e4c:	4605      	mov	r5, r0
   d5e4e:	e002      	b.n	d5e56 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d5e50:	2500      	movs	r5, #0
   d5e52:	e000      	b.n	d5e56 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5e54:	4d04      	ldr	r5, [pc, #16]	; (d5e68 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5e56:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5e5a:	f7fe fd69 	bl	d4930 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d5e5e:	4628      	mov	r0, r5
   d5e60:	b009      	add	sp, #36	; 0x24
   d5e62:	bd30      	pop	{r4, r5, pc}
   d5e64:	000d6ee9 	.word	0x000d6ee9
   d5e68:	fffffefc 	.word	0xfffffefc

000d5e6c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d5e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5e70:	4604      	mov	r4, r0
   d5e72:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5e76:	460f      	mov	r7, r1
   d5e78:	4690      	mov	r8, r2
   d5e7a:	f7ff fc0b 	bl	d5694 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d5e7e:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d5e82:	2e00      	cmp	r6, #0
   d5e84:	d139      	bne.n	d5efa <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5e86:	4928      	ldr	r1, [pc, #160]	; (d5f28 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d5e88:	2004      	movs	r0, #4
   d5e8a:	f000 fce5 	bl	d6858 <_ZnwjRKSt9nothrow_t>
   d5e8e:	4605      	mov	r5, r0
   d5e90:	b340      	cbz	r0, d5ee4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d5e92:	4925      	ldr	r1, [pc, #148]	; (d5f28 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d5e94:	2014      	movs	r0, #20
   d5e96:	f000 fcdf 	bl	d6858 <_ZnwjRKSt9nothrow_t>
   d5e9a:	b128      	cbz	r0, d5ea8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x3c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d5e9c:	7406      	strb	r6, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e9e:	6006      	str	r6, [r0, #0]
   d5ea0:	6046      	str	r6, [r0, #4]
   d5ea2:	6086      	str	r6, [r0, #8]
   d5ea4:	60c6      	str	r6, [r0, #12]
   d5ea6:	7446      	strb	r6, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5ea8:	6028      	str	r0, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d5eaa:	b1a8      	cbz	r0, d5ed8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
            goto error;
        }
        d_->func = function;
   d5eac:	4b1f      	ldr	r3, [pc, #124]	; (d5f2c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc0>)
   d5eae:	6083      	str	r3, [r0, #8]
   d5eb0:	682b      	ldr	r3, [r5, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5eb2:	491f      	ldr	r1, [pc, #124]	; (d5f30 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d5eb4:	60dc      	str	r4, [r3, #12]
   d5eb6:	6828      	ldr	r0, [r5, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5eb8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5ebc:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5ec0:	2203      	movs	r2, #3
   d5ec2:	4b1c      	ldr	r3, [pc, #112]	; (d5f34 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc8>)
   d5ec4:	3004      	adds	r0, #4
   d5ec6:	f7fe fcf3 	bl	d48b0 <os_thread_create>
   d5eca:	b928      	cbnz	r0, d5ed8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
   d5ecc:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d5ece:	7c1b      	ldrb	r3, [r3, #16]
   d5ed0:	b943      	cbnz	r3, d5ee4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
            os_thread_yield();
   d5ed2:	f7fe fcfd 	bl	d48d0 <os_thread_yield>
   d5ed6:	e7f9      	b.n	d5ecc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x60>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ed8:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5eda:	2300      	movs	r3, #0
   d5edc:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5ede:	b108      	cbz	r0, d5ee4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
	  get_deleter()(__p);
   d5ee0:	f7ff fe47 	bl	d5b72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ee4:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d5ee8:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5eec:	b12e      	cbz	r6, d5efa <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5eee:	4630      	mov	r0, r6
   d5ef0:	f7ff fe58 	bl	d5ba4 <_ZN6ThreadD1Ev>
   d5ef4:	4630      	mov	r0, r6
   d5ef6:	f7fe f8d2 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5efa:	4620      	mov	r0, r4
   d5efc:	f7ff ff6e 	bl	d5ddc <_ZN5spark11MeshPublish14initialize_udpEv>
   d5f00:	2800      	cmp	r0, #0
   d5f02:	db07      	blt.n	d5f14 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xa8>
    CHECK(subscriptions.add(prefix, handler));
   d5f04:	4642      	mov	r2, r8
   d5f06:	4639      	mov	r1, r7
   d5f08:	1d20      	adds	r0, r4, #4
   d5f0a:	f7ff ff17 	bl	d5d3c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5f0e:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d5f12:	e000      	b.n	d5f16 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xaa>
   d5f14:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5f16:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5f1a:	f7fe fd09 	bl	d4930 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5f1e:	4628      	mov	r0, r5
   d5f20:	b002      	add	sp, #8
   d5f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f26:	bf00      	nop
   d5f28:	000d6fec 	.word	0x000d6fec
   d5f2c:	000d6049 	.word	0x000d6049
   d5f30:	000d6eed 	.word	0x000d6eed
   d5f34:	000d5add 	.word	0x000d5add

000d5f38 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f3c:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d5f3e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5f42:	b08a      	sub	sp, #40	; 0x28
   d5f44:	4630      	mov	r0, r6
   d5f46:	f7ff fba5 	bl	d5694 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f4a:	682c      	ldr	r4, [r5, #0]
   d5f4c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5f50:	f7fe fcee 	bl	d4930 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d5f54:	2c00      	cmp	r4, #0
   d5f56:	d063      	beq.n	d6020 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d5f58:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5f5c:	b163      	cbz	r3, d5f78 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d5f5e:	6823      	ldr	r3, [r4, #0]
   d5f60:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d5f64:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d5f66:	4620      	mov	r0, r4
   d5f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f6c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d5f70:	47b8      	blx	r7
        if (len > 0) {
   d5f72:	1e04      	subs	r4, r0, #0
   d5f74:	dc13      	bgt.n	d5f9e <_ZN5spark11MeshPublish4pollEv+0x66>
   d5f76:	e056      	b.n	d6026 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d5f78:	492d      	ldr	r1, [pc, #180]	; (d6030 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d5f7a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d5f7e:	f000 fc69 	bl	d6854 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f82:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d5f86:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d5f8a:	b113      	cbz	r3, d5f92 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5f8c:	4618      	mov	r0, r3
   d5f8e:	f7fe f888 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d5f92:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5f96:	2b00      	cmp	r3, #0
   d5f98:	d1e1      	bne.n	d5f5e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5f9a:	4826      	ldr	r0, [pc, #152]	; (d6034 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5f9c:	e044      	b.n	d6028 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5f9e:	2320      	movs	r3, #32
   d5fa0:	4a25      	ldr	r2, [pc, #148]	; (d6038 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5fa2:	9302      	str	r3, [sp, #8]
   d5fa4:	9200      	str	r2, [sp, #0]
   d5fa6:	2300      	movs	r3, #0
   d5fa8:	9401      	str	r4, [sp, #4]
   d5faa:	aa02      	add	r2, sp, #8
   d5fac:	4923      	ldr	r1, [pc, #140]	; (d603c <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5fae:	9303      	str	r3, [sp, #12]
   d5fb0:	2001      	movs	r0, #1
   d5fb2:	f7fe fdad 	bl	d4b10 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5fb6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5fba:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5fbc:	781b      	ldrb	r3, [r3, #0]
   d5fbe:	bb6b      	cbnz	r3, d601c <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5fc0:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5fc2:	4621      	mov	r1, r4
   d5fc4:	4638      	mov	r0, r7
   d5fc6:	f000 fe16 	bl	d6bf6 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5fca:	b338      	cbz	r0, d601c <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5fcc:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5fce:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5fd0:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5fd4:	dd22      	ble.n	d601c <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5fd6:	5c3b      	ldrb	r3, [r7, r0]
   d5fd8:	bb03      	cbnz	r3, d601c <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5fda:	3c01      	subs	r4, #1
   d5fdc:	d00e      	beq.n	d5ffc <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5fde:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5fe2:	4621      	mov	r1, r4
   d5fe4:	4640      	mov	r0, r8
   d5fe6:	f000 fe06 	bl	d6bf6 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5fea:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5fec:	2c00      	cmp	r4, #0
   d5fee:	dd15      	ble.n	d601c <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5ff0:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5ff4:	b993      	cbnz	r3, d601c <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5ff6:	2c01      	cmp	r4, #1
   d5ff8:	d002      	beq.n	d6000 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5ffa:	e00f      	b.n	d601c <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5ffc:	f8df 8044 	ldr.w	r8, [pc, #68]	; d6044 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d6000:	4630      	mov	r0, r6
   d6002:	f7ff fb47 	bl	d5694 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d6006:	4642      	mov	r2, r8
   d6008:	4639      	mov	r1, r7
   d600a:	1d28      	adds	r0, r5, #4
   d600c:	f7ff fe9f 	bl	d5d4e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d6010:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6014:	f7fe fc8c 	bl	d4930 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6018:	2000      	movs	r0, #0
   d601a:	e005      	b.n	d6028 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d601c:	4808      	ldr	r0, [pc, #32]	; (d6040 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d601e:	e003      	b.n	d6028 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d6020:	2064      	movs	r0, #100	; 0x64
   d6022:	f7fe fc35 	bl	d4890 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d6026:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d6028:	b00a      	add	sp, #40	; 0x28
   d602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d602e:	bf00      	nop
   d6030:	000d6fec 	.word	0x000d6fec
   d6034:	fffffefc 	.word	0xfffffefc
   d6038:	000d6efc 	.word	0x000d6efc
   d603c:	000d6ef5 	.word	0x000d6ef5
   d6040:	fffffee8 	.word	0xfffffee8
   d6044:	000d6d42 	.word	0x000d6d42

000d6048 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d6048:	b508      	push	{r3, lr}
   d604a:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d604c:	4620      	mov	r0, r4
   d604e:	f7ff ff73 	bl	d5f38 <_ZN5spark11MeshPublish4pollEv>
   d6052:	e7fb      	b.n	d604c <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d6054 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6054:	b538      	push	{r3, r4, r5, lr}
   d6056:	4c0d      	ldr	r4, [pc, #52]	; (d608c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6058:	4b0d      	ldr	r3, [pc, #52]	; (d6090 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d605a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d605c:	2500      	movs	r5, #0
   d605e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6060:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6064:	6063      	str	r3, [r4, #4]
   d6066:	60a5      	str	r5, [r4, #8]
   d6068:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d606c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6070:	f7fe fc4e 	bl	d4910 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6074:	4b07      	ldr	r3, [pc, #28]	; (d6094 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6076:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d607a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d607c:	4620      	mov	r0, r4
   d607e:	4a06      	ldr	r2, [pc, #24]	; (d6098 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6080:	4906      	ldr	r1, [pc, #24]	; (d609c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6086:	f000 bbd7 	b.w	d6838 <__aeabi_atexit>
   d608a:	bf00      	nop
   d608c:	2003e548 	.word	0x2003e548
   d6090:	000d6fc0 	.word	0x000d6fc0
   d6094:	000d6eb0 	.word	0x000d6eb0
   d6098:	2003e370 	.word	0x2003e370
   d609c:	000d5be1 	.word	0x000d5be1

000d60a0 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d60a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60a2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d60a4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d60a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d60aa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d60ac:	2201      	movs	r2, #1
   d60ae:	f04f 33ff 	mov.w	r3, #4294967295
   d60b2:	4621      	mov	r1, r4
   d60b4:	47a8      	blx	r5
}
   d60b6:	b003      	add	sp, #12
   d60b8:	bd30      	pop	{r4, r5, pc}

000d60ba <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d60ba:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d60bc:	6803      	ldr	r3, [r0, #0]
   d60be:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d60c0:	f04f 33ff 	mov.w	r3, #4294967295
   d60c4:	46a4      	mov	ip, r4
}
   d60c6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d60ca:	4760      	bx	ip

000d60cc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d60cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60ce:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d60d0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d60d2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d60d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d60d8:	4621      	mov	r1, r4
   d60da:	4613      	mov	r3, r2
   d60dc:	2201      	movs	r2, #1
   d60de:	47a8      	blx	r5
}
   d60e0:	b003      	add	sp, #12
   d60e2:	bd30      	pop	{r4, r5, pc}

000d60e4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d60e4:	4770      	bx	lr

000d60e6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d60e6:	b538      	push	{r3, r4, r5, lr}
   d60e8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d60ea:	681a      	ldr	r2, [r3, #0]
   d60ec:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d60ee:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d60f0:	da05      	bge.n	d60fe <_ZN9TCPClient9connectedEv+0x18>
   d60f2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d60f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d60fa:	429a      	cmp	r2, r3
   d60fc:	d001      	beq.n	d6102 <_ZN9TCPClient9connectedEv+0x1c>
   d60fe:	2501      	movs	r5, #1
   d6100:	e00b      	b.n	d611a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6102:	6803      	ldr	r3, [r0, #0]
   d6104:	691b      	ldr	r3, [r3, #16]
   d6106:	4798      	blx	r3
   d6108:	2800      	cmp	r0, #0
   d610a:	bf14      	ite	ne
   d610c:	2501      	movne	r5, #1
   d610e:	2500      	moveq	r5, #0
        if (!rv) {
   d6110:	d103      	bne.n	d611a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6112:	6823      	ldr	r3, [r4, #0]
   d6114:	4620      	mov	r0, r4
   d6116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6118:	4798      	blx	r3
        }
    }
    return rv;
}
   d611a:	4628      	mov	r0, r5
   d611c:	bd38      	pop	{r3, r4, r5, pc}

000d611e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d611e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6120:	6818      	ldr	r0, [r3, #0]
}
   d6122:	43c0      	mvns	r0, r0
   d6124:	0fc0      	lsrs	r0, r0, #31
   d6126:	4770      	bx	lr

000d6128 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6128:	4770      	bx	lr

000d612a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d612a:	2000      	movs	r0, #0
   d612c:	4770      	bx	lr

000d612e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d612e:	b510      	push	{r4, lr}
   d6130:	4604      	mov	r4, r0
   d6132:	f7fd ffb4 	bl	d409e <_ZdlPv>
   d6136:	4620      	mov	r0, r4
   d6138:	bd10      	pop	{r4, pc}

000d613a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d613a:	f7fd bfb0 	b.w	d409e <_ZdlPv>
	...

000d6140 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6144:	4698      	mov	r8, r3
    stop();
   d6146:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6148:	b093      	sub	sp, #76	; 0x4c
    stop();
   d614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d614c:	460c      	mov	r4, r1
   d614e:	4606      	mov	r6, r0
   d6150:	4617      	mov	r7, r2
    stop();
   d6152:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6154:	ab12      	add	r3, sp, #72	; 0x48
   d6156:	2500      	movs	r5, #0
   d6158:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d615c:	462a      	mov	r2, r5
   d615e:	4629      	mov	r1, r5
   d6160:	4620      	mov	r0, r4
   d6162:	f7fe fb4d 	bl	d4800 <netdb_getaddrinfo>
   d6166:	2800      	cmp	r0, #0
   d6168:	db3a      	blt.n	d61e0 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d616a:	9b00      	ldr	r3, [sp, #0]
   d616c:	2b00      	cmp	r3, #0
   d616e:	d039      	beq.n	d61e4 <_ZN9TCPClient7connectEPKctm+0xa4>
   d6170:	695b      	ldr	r3, [r3, #20]
   d6172:	2b00      	cmp	r3, #0
   d6174:	d036      	beq.n	d61e4 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6176:	a806      	add	r0, sp, #24
   d6178:	f7ff fb82 	bl	d5880 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d617c:	9b00      	ldr	r3, [sp, #0]
   d617e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6180:	7863      	ldrb	r3, [r4, #1]
   d6182:	2b02      	cmp	r3, #2
   d6184:	d101      	bne.n	d618a <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6186:	1d21      	adds	r1, r4, #4
   d6188:	e013      	b.n	d61b2 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d618a:	2b0a      	cmp	r3, #10
   d618c:	d114      	bne.n	d61b8 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d618e:	2211      	movs	r2, #17
   d6190:	4629      	mov	r1, r5
   d6192:	a801      	add	r0, sp, #4
   d6194:	f000 fce2 	bl	d6b5c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6198:	68a3      	ldr	r3, [r4, #8]
   d619a:	bb33      	cbnz	r3, d61ea <_ZN9TCPClient7connectEPKctm+0xaa>
   d619c:	68e3      	ldr	r3, [r4, #12]
   d619e:	bb23      	cbnz	r3, d61ea <_ZN9TCPClient7connectEPKctm+0xaa>
   d61a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d61a4:	6925      	ldr	r5, [r4, #16]
   d61a6:	f7fe fbe3 	bl	d4970 <inet_htonl>
   d61aa:	4285      	cmp	r5, r0
   d61ac:	d11d      	bne.n	d61ea <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d61ae:	f104 0114 	add.w	r1, r4, #20
   d61b2:	a806      	add	r0, sp, #24
   d61b4:	f7ff fba7 	bl	d5906 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d61b8:	a806      	add	r0, sp, #24
   d61ba:	f7ff fb81 	bl	d58c0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d61be:	b188      	cbz	r0, d61e4 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d61c0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d61c2:	ad07      	add	r5, sp, #28
   d61c4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d61c8:	4b18      	ldr	r3, [pc, #96]	; (d622c <_ZN9TCPClient7connectEPKctm+0xec>)
   d61ca:	930c      	str	r3, [sp, #48]	; 0x30
   d61cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61ce:	ac0d      	add	r4, sp, #52	; 0x34
   d61d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61d2:	682b      	ldr	r3, [r5, #0]
   d61d4:	7023      	strb	r3, [r4, #0]
   d61d6:	463a      	mov	r2, r7
   d61d8:	4643      	mov	r3, r8
   d61da:	a90c      	add	r1, sp, #48	; 0x30
   d61dc:	4630      	mov	r0, r6
   d61de:	47c8      	blx	r9
   d61e0:	4604      	mov	r4, r0
   d61e2:	e01c      	b.n	d621e <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d61e4:	f04f 34ff 	mov.w	r4, #4294967295
   d61e8:	e019      	b.n	d621e <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d61ea:	f104 0308 	add.w	r3, r4, #8
   d61ee:	ad01      	add	r5, sp, #4
   d61f0:	3418      	adds	r4, #24
   d61f2:	6818      	ldr	r0, [r3, #0]
   d61f4:	6859      	ldr	r1, [r3, #4]
   d61f6:	462a      	mov	r2, r5
   d61f8:	c203      	stmia	r2!, {r0, r1}
   d61fa:	3308      	adds	r3, #8
   d61fc:	42a3      	cmp	r3, r4
   d61fe:	4615      	mov	r5, r2
   d6200:	d1f7      	bne.n	d61f2 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d6202:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6204:	a901      	add	r1, sp, #4
   d6206:	a80c      	add	r0, sp, #48	; 0x30
   d6208:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d620a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d620e:	f7ff fb45 	bl	d589c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6214:	ac07      	add	r4, sp, #28
   d6216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6218:	682b      	ldr	r3, [r5, #0]
   d621a:	7023      	strb	r3, [r4, #0]
   d621c:	e7cc      	b.n	d61b8 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d621e:	9800      	ldr	r0, [sp, #0]
   d6220:	f7fe fae6 	bl	d47f0 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6224:	4620      	mov	r0, r4
   d6226:	b013      	add	sp, #76	; 0x4c
   d6228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d622c:	000d6e3c 	.word	0x000d6e3c

000d6230 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6232:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6234:	2200      	movs	r2, #0
   d6236:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6238:	9202      	str	r2, [sp, #8]
   d623a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d623c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d623e:	4604      	mov	r4, r0
   d6240:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6242:	d008      	beq.n	d6256 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6248:	fbb3 f1f2 	udiv	r1, r3, r2
   d624c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d624e:	fb02 3111 	mls	r1, r2, r1, r3
   d6252:	434a      	muls	r2, r1
   d6254:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6256:	6960      	ldr	r0, [r4, #20]
   d6258:	2308      	movs	r3, #8
   d625a:	9300      	str	r3, [sp, #0]
   d625c:	f241 0205 	movw	r2, #4101	; 0x1005
   d6260:	446b      	add	r3, sp
   d6262:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6266:	6800      	ldr	r0, [r0, #0]
   d6268:	f7fe fbda 	bl	d4a20 <sock_setsockopt>
    if (ret < 0) {
   d626c:	2800      	cmp	r0, #0
   d626e:	db08      	blt.n	d6282 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6270:	6960      	ldr	r0, [r4, #20]
   d6272:	2300      	movs	r3, #0
   d6274:	4632      	mov	r2, r6
   d6276:	4629      	mov	r1, r5
   d6278:	6800      	ldr	r0, [r0, #0]
   d627a:	f7fe fbf9 	bl	d4a70 <sock_send>
    if (ret < 0) {
   d627e:	2800      	cmp	r0, #0
   d6280:	da04      	bge.n	d628c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6282:	f7fe fd2b 	bl	d4cdc <__errno>
   d6286:	6803      	ldr	r3, [r0, #0]
   d6288:	6063      	str	r3, [r4, #4]
   d628a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d628c:	b004      	add	sp, #16
   d628e:	bd70      	pop	{r4, r5, r6, pc}

000d6290 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6290:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6292:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6294:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6296:	689b      	ldr	r3, [r3, #8]
   d6298:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d629a:	68a3      	ldr	r3, [r4, #8]
   d629c:	3b01      	subs	r3, #1
   d629e:	60a3      	str	r3, [r4, #8]
   d62a0:	b92b      	cbnz	r3, d62ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d62a2:	6823      	ldr	r3, [r4, #0]
   d62a4:	4620      	mov	r0, r4
   d62a6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d62a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d62ac:	4718      	bx	r3
   d62ae:	bd10      	pop	{r4, pc}

000d62b0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d62b0:	b570      	push	{r4, r5, r6, lr}
   d62b2:	4604      	mov	r4, r0
   d62b4:	694d      	ldr	r5, [r1, #20]
   d62b6:	4b05      	ldr	r3, [pc, #20]	; (d62cc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d62b8:	f844 3b04 	str.w	r3, [r4], #4
   d62bc:	358c      	adds	r5, #140	; 0x8c
   d62be:	4606      	mov	r6, r0
   d62c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62c4:	682b      	ldr	r3, [r5, #0]
   d62c6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d62c8:	4630      	mov	r0, r6
   d62ca:	bd70      	pop	{r4, r5, r6, pc}
   d62cc:	000d6e3c 	.word	0x000d6e3c

000d62d0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d62d0:	b510      	push	{r4, lr}
   d62d2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d62d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d62d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d62dc:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d62de:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d62e0:	d005      	beq.n	d62ee <_ZN9TCPClient4peekEv+0x1e>
   d62e2:	6962      	ldr	r2, [r4, #20]
   d62e4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d62e8:	4413      	add	r3, r2
   d62ea:	7918      	ldrb	r0, [r3, #4]
   d62ec:	bd10      	pop	{r4, pc}
   d62ee:	6803      	ldr	r3, [r0, #0]
   d62f0:	691b      	ldr	r3, [r3, #16]
   d62f2:	4798      	blx	r3
   d62f4:	2800      	cmp	r0, #0
   d62f6:	d1f4      	bne.n	d62e2 <_ZN9TCPClient4peekEv+0x12>
   d62f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d62fc:	bd10      	pop	{r4, pc}

000d62fe <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d62fe:	b510      	push	{r4, lr}
   d6300:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6302:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6306:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d630a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d630c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d630e:	d008      	beq.n	d6322 <_ZN9TCPClient4readEv+0x24>
   d6310:	6962      	ldr	r2, [r4, #20]
   d6312:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6316:	1c59      	adds	r1, r3, #1
   d6318:	4413      	add	r3, r2
   d631a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d631e:	7918      	ldrb	r0, [r3, #4]
   d6320:	bd10      	pop	{r4, pc}
   d6322:	6803      	ldr	r3, [r0, #0]
   d6324:	691b      	ldr	r3, [r3, #16]
   d6326:	4798      	blx	r3
   d6328:	2800      	cmp	r0, #0
   d632a:	d1f1      	bne.n	d6310 <_ZN9TCPClient4readEv+0x12>
   d632c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6330:	bd10      	pop	{r4, pc}

000d6332 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6334:	6943      	ldr	r3, [r0, #20]
   d6336:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6338:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d633c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6340:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6342:	4605      	mov	r5, r0
   d6344:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6346:	d106      	bne.n	d6356 <_ZN9TCPClient4readEPhj+0x24>
   d6348:	6803      	ldr	r3, [r0, #0]
   d634a:	691b      	ldr	r3, [r3, #16]
   d634c:	4798      	blx	r3
   d634e:	b910      	cbnz	r0, d6356 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6350:	f04f 34ff 	mov.w	r4, #4294967295
   d6354:	e014      	b.n	d6380 <_ZN9TCPClient4readEPhj+0x4e>
   d6356:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6358:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d635c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6360:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6362:	42bc      	cmp	r4, r7
   d6364:	bf28      	it	cs
   d6366:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6368:	4419      	add	r1, r3
   d636a:	4622      	mov	r2, r4
   d636c:	3104      	adds	r1, #4
   d636e:	4630      	mov	r0, r6
   d6370:	f000 fbe9 	bl	d6b46 <memcpy>
   d6374:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6376:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d637a:	4423      	add	r3, r4
   d637c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6380:	4620      	mov	r0, r4
   d6382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6384 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6384:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6386:	2300      	movs	r3, #0
   d6388:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d638c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d638e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6392:	4770      	bx	lr

000d6394 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6398:	4698      	mov	r8, r3
    stop();
   d639a:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d639c:	460d      	mov	r5, r1
   d639e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d63a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d63a2:	4606      	mov	r6, r0
   d63a4:	4617      	mov	r7, r2
    stop();
   d63a6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d63a8:	7d2b      	ldrb	r3, [r5, #20]
   d63aa:	6974      	ldr	r4, [r6, #20]
   d63ac:	2b04      	cmp	r3, #4
   d63ae:	bf0c      	ite	eq
   d63b0:	2002      	moveq	r0, #2
   d63b2:	200a      	movne	r0, #10
   d63b4:	2206      	movs	r2, #6
   d63b6:	2101      	movs	r1, #1
   d63b8:	f7fe fb6a 	bl	d4a90 <sock_socket>
   d63bc:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d63be:	6973      	ldr	r3, [r6, #20]
   d63c0:	681c      	ldr	r4, [r3, #0]
   d63c2:	2c00      	cmp	r4, #0
   d63c4:	db5b      	blt.n	d647e <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d63c6:	4630      	mov	r0, r6
   d63c8:	f7ff ffdc 	bl	d6384 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d63cc:	f1b8 0f00 	cmp.w	r8, #0
   d63d0:	d017      	beq.n	d6402 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d63d2:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d63d4:	a903      	add	r1, sp, #12
   d63d6:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d63da:	9303      	str	r3, [sp, #12]
   d63dc:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d63e0:	f7fe fa2e 	bl	d4840 <if_index_to_name>
   d63e4:	2800      	cmp	r0, #0
   d63e6:	db49      	blt.n	d647c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d63e8:	6970      	ldr	r0, [r6, #20]
   d63ea:	2306      	movs	r3, #6
   d63ec:	9300      	str	r3, [sp, #0]
   d63ee:	f241 020b 	movw	r2, #4107	; 0x100b
   d63f2:	ab03      	add	r3, sp, #12
   d63f4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d63f8:	6800      	ldr	r0, [r0, #0]
   d63fa:	f7fe fb11 	bl	d4a20 <sock_setsockopt>
   d63fe:	2800      	cmp	r0, #0
   d6400:	db3c      	blt.n	d647c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6402:	241c      	movs	r4, #28
   d6404:	4622      	mov	r2, r4
   d6406:	2100      	movs	r1, #0
   d6408:	a803      	add	r0, sp, #12
   d640a:	f000 fba7 	bl	d6b5c <memset>
    if (ip.version() == 4) {
   d640e:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6410:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6414:	2b04      	cmp	r3, #4
   d6416:	d10c      	bne.n	d6432 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6418:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d641a:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d641c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6420:	f7fe fab6 	bl	d4990 <inet_htons>
   d6424:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6428:	6868      	ldr	r0, [r5, #4]
   d642a:	f7fe faa1 	bl	d4970 <inet_htonl>
   d642e:	9004      	str	r0, [sp, #16]
   d6430:	e013      	b.n	d645a <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6432:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6434:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6436:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d643a:	f7fe faa9 	bl	d4990 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d643e:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6440:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6444:	1d2b      	adds	r3, r5, #4
   d6446:	f105 0714 	add.w	r7, r5, #20
   d644a:	6818      	ldr	r0, [r3, #0]
   d644c:	6859      	ldr	r1, [r3, #4]
   d644e:	4622      	mov	r2, r4
   d6450:	c203      	stmia	r2!, {r0, r1}
   d6452:	3308      	adds	r3, #8
   d6454:	42bb      	cmp	r3, r7
   d6456:	4614      	mov	r4, r2
   d6458:	d1f7      	bne.n	d644a <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d645a:	6973      	ldr	r3, [r6, #20]
   d645c:	221c      	movs	r2, #28
   d645e:	a903      	add	r1, sp, #12
   d6460:	6818      	ldr	r0, [r3, #0]
   d6462:	f7fe faed 	bl	d4a40 <sock_connect>
   d6466:	2800      	cmp	r0, #0
   d6468:	db08      	blt.n	d647c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d646a:	1d2c      	adds	r4, r5, #4
   d646c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d646e:	6976      	ldr	r6, [r6, #20]
   d6470:	368c      	adds	r6, #140	; 0x8c
   d6472:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6474:	6823      	ldr	r3, [r4, #0]
   d6476:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6478:	2401      	movs	r4, #1
   d647a:	e004      	b.n	d6486 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d647c:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d647e:	6833      	ldr	r3, [r6, #0]
   d6480:	4630      	mov	r0, r6
   d6482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6484:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d6486:	4620      	mov	r0, r4
   d6488:	b00a      	add	sp, #40	; 0x28
   d648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d648e <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d648e:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6490:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6492:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6494:	6818      	ldr	r0, [r3, #0]
   d6496:	2800      	cmp	r0, #0
   d6498:	db01      	blt.n	d649e <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d649a:	f7fe fac9 	bl	d4a30 <sock_close>
   d649e:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d64a0:	f04f 32ff 	mov.w	r2, #4294967295
   d64a4:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d64a6:	6960      	ldr	r0, [r4, #20]
   d64a8:	2211      	movs	r2, #17
   d64aa:	2100      	movs	r1, #0
   d64ac:	308c      	adds	r0, #140	; 0x8c
   d64ae:	f000 fb55 	bl	d6b5c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d64b2:	4620      	mov	r0, r4
}
   d64b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d64b8:	f7ff bf64 	b.w	d6384 <_ZN9TCPClient12flush_bufferEv>

000d64bc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d64bc:	b530      	push	{r4, r5, lr}
   d64be:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d64c0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d64c4:	b08b      	sub	sp, #44	; 0x2c
   d64c6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d64c8:	b11b      	cbz	r3, d64d2 <_ZN9TCPClient9availableEv+0x16>
   d64ca:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d64ce:	429a      	cmp	r2, r3
   d64d0:	d040      	beq.n	d6554 <_ZN9TCPClient9availableEv+0x98>
   d64d2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d64d4:	6818      	ldr	r0, [r3, #0]
   d64d6:	2800      	cmp	r0, #0
   d64d8:	db3f      	blt.n	d655a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d64da:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d64de:	2d7f      	cmp	r5, #127	; 0x7f
   d64e0:	d83b      	bhi.n	d655a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d64e2:	1d19      	adds	r1, r3, #4
   d64e4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d64e8:	2308      	movs	r3, #8
   d64ea:	4429      	add	r1, r5
   d64ec:	f7fe fab0 	bl	d4a50 <sock_recv>
            if (ret > 0) {
   d64f0:	2800      	cmp	r0, #0
   d64f2:	dd0c      	ble.n	d650e <_ZN9TCPClient9availableEv+0x52>
   d64f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d64f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d64fa:	b90a      	cbnz	r2, d6500 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d64fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6500:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6502:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6506:	4418      	add	r0, r3
   d6508:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d650c:	e025      	b.n	d655a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d650e:	f7fe fbe5 	bl	d4cdc <__errno>
   d6512:	6803      	ldr	r3, [r0, #0]
   d6514:	2b0b      	cmp	r3, #11
   d6516:	d020      	beq.n	d655a <_ZN9TCPClient9availableEv+0x9e>
   d6518:	f7fe fbe0 	bl	d4cdc <__errno>
   d651c:	6803      	ldr	r3, [r0, #0]
   d651e:	2b0b      	cmp	r3, #11
   d6520:	d01b      	beq.n	d655a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6522:	2320      	movs	r3, #32
   d6524:	2500      	movs	r5, #0
   d6526:	9302      	str	r3, [sp, #8]
   d6528:	9503      	str	r5, [sp, #12]
   d652a:	f7fe fbd7 	bl	d4cdc <__errno>
   d652e:	6803      	ldr	r3, [r0, #0]
   d6530:	9301      	str	r3, [sp, #4]
   d6532:	4b0e      	ldr	r3, [pc, #56]	; (d656c <_ZN9TCPClient9availableEv+0xb0>)
   d6534:	9300      	str	r3, [sp, #0]
   d6536:	aa02      	add	r2, sp, #8
   d6538:	462b      	mov	r3, r5
   d653a:	490d      	ldr	r1, [pc, #52]	; (d6570 <_ZN9TCPClient9availableEv+0xb4>)
   d653c:	2032      	movs	r0, #50	; 0x32
   d653e:	f7fe fae7 	bl	d4b10 <log_message>
                    sock_close(d_->sock);
   d6542:	6963      	ldr	r3, [r4, #20]
   d6544:	6818      	ldr	r0, [r3, #0]
   d6546:	f7fe fa73 	bl	d4a30 <sock_close>
   d654a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d654c:	f04f 32ff 	mov.w	r2, #4294967295
   d6550:	601a      	str	r2, [r3, #0]
   d6552:	e002      	b.n	d655a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6554:	f7ff ff16 	bl	d6384 <_ZN9TCPClient12flush_bufferEv>
   d6558:	e7bb      	b.n	d64d2 <_ZN9TCPClient9availableEv+0x16>
   d655a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d655c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6560:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6564:	1a18      	subs	r0, r3, r0
}
   d6566:	b00b      	add	sp, #44	; 0x2c
   d6568:	bd30      	pop	{r4, r5, pc}
   d656a:	bf00      	nop
   d656c:	000d6f74 	.word	0x000d6f74
   d6570:	000d6ef5 	.word	0x000d6ef5

000d6574 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6574:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6576:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6578:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d657a:	6001      	str	r1, [r0, #0]
   d657c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6580:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6584:	3088      	adds	r0, #136	; 0x88
   d6586:	f7ff f97b 	bl	d5880 <_ZN9IPAddressC1Ev>
}
   d658a:	4620      	mov	r0, r4
   d658c:	bd10      	pop	{r4, pc}
	...

000d6590 <_ZN9TCPClientC1Ei>:
   d6590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6594:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6596:	2300      	movs	r3, #0
   d6598:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d659a:	4a14      	ldr	r2, [pc, #80]	; (d65ec <_ZN9TCPClientC1Ei+0x5c>)
   d659c:	6043      	str	r3, [r0, #4]
   d659e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d65a0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d65a2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d65a4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65a6:	20a0      	movs	r0, #160	; 0xa0
   d65a8:	460e      	mov	r6, r1
   d65aa:	f7fd fd74 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d65ae:	4605      	mov	r5, r0
   d65b0:	b110      	cbz	r0, d65b8 <_ZN9TCPClientC1Ei+0x28>
   d65b2:	4631      	mov	r1, r6
   d65b4:	f7ff ffde 	bl	d6574 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65b8:	2014      	movs	r0, #20
   d65ba:	f7fd fd6c 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d65be:	4603      	mov	r3, r0
   d65c0:	b128      	cbz	r0, d65ce <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d65c2:	2201      	movs	r2, #1
   d65c4:	6042      	str	r2, [r0, #4]
   d65c6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d65c8:	4a09      	ldr	r2, [pc, #36]	; (d65f0 <_ZN9TCPClientC1Ei+0x60>)
   d65ca:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d65cc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d65ce:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d65d0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d65d2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d65d4:	b128      	cbz	r0, d65e2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d65d6:	6843      	ldr	r3, [r0, #4]
   d65d8:	3b01      	subs	r3, #1
   d65da:	6043      	str	r3, [r0, #4]
   d65dc:	b90b      	cbnz	r3, d65e2 <_ZN9TCPClientC1Ei+0x52>
   d65de:	f7ff fe57 	bl	d6290 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d65e2:	4620      	mov	r0, r4
   d65e4:	f7ff fece 	bl	d6384 <_ZN9TCPClient12flush_bufferEv>
}
   d65e8:	4620      	mov	r0, r4
   d65ea:	bd70      	pop	{r4, r5, r6, pc}
   d65ec:	000d6f30 	.word	0x000d6f30
   d65f0:	000d6f14 	.word	0x000d6f14

000d65f4 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d65f4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d65f6:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d65fa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d65fc:	f7ff ffc8 	bl	d6590 <_ZN9TCPClientC1Ei>
}
   d6600:	4620      	mov	r0, r4
   d6602:	bd10      	pop	{r4, pc}

000d6604 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6604:	b510      	push	{r4, lr}
   d6606:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6608:	6800      	ldr	r0, [r0, #0]
   d660a:	2800      	cmp	r0, #0
   d660c:	db01      	blt.n	d6612 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d660e:	f7fe fa0f 	bl	d4a30 <sock_close>
    }
}
   d6612:	4620      	mov	r0, r4
   d6614:	bd10      	pop	{r4, pc}

000d6616 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6616:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6618:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d661a:	4620      	mov	r0, r4
   d661c:	f7ff fff2 	bl	d6604 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6620:	b124      	cbz	r4, d662c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6622:	4620      	mov	r0, r4
   d6624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6628:	f7fd bd39 	b.w	d409e <_ZdlPv>
   d662c:	bd10      	pop	{r4, pc}

000d662e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d662e:	2200      	movs	r2, #0
   d6630:	4611      	mov	r1, r2
   d6632:	6840      	ldr	r0, [r0, #4]
   d6634:	f7fe bac2 	b.w	d4bbc <network_ready>

000d6638 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6638:	2200      	movs	r2, #0
   d663a:	4611      	mov	r1, r2
   d663c:	6840      	ldr	r0, [r0, #4]
   d663e:	f7fe badd 	b.w	d4bfc <network_listening>

000d6642 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6642:	2200      	movs	r2, #0
   d6644:	4611      	mov	r1, r2
   d6646:	6840      	ldr	r0, [r0, #4]
   d6648:	f7fe bae8 	b.w	d4c1c <network_get_listen_timeout>

000d664c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d664c:	2200      	movs	r2, #0
   d664e:	6840      	ldr	r0, [r0, #4]
   d6650:	f7fe badc 	b.w	d4c0c <network_set_listen_timeout>

000d6654 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6654:	2200      	movs	r2, #0
   d6656:	f081 0101 	eor.w	r1, r1, #1
   d665a:	6840      	ldr	r0, [r0, #4]
   d665c:	f7fe bac6 	b.w	d4bec <network_listen>

000d6660 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6660:	2300      	movs	r3, #0
   d6662:	461a      	mov	r2, r3
   d6664:	4619      	mov	r1, r3
   d6666:	6840      	ldr	r0, [r0, #4]
   d6668:	f7fe bab8 	b.w	d4bdc <network_off>

000d666c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d666c:	2300      	movs	r3, #0
   d666e:	461a      	mov	r2, r3
   d6670:	4619      	mov	r1, r3
   d6672:	6840      	ldr	r0, [r0, #4]
   d6674:	f7fe baaa 	b.w	d4bcc <network_on>

000d6678 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6678:	2200      	movs	r2, #0
   d667a:	4611      	mov	r1, r2
   d667c:	6840      	ldr	r0, [r0, #4]
   d667e:	f7fe ba8d 	b.w	d4b9c <network_connecting>

000d6682 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6682:	2200      	movs	r2, #0
   d6684:	2102      	movs	r1, #2
   d6686:	6840      	ldr	r0, [r0, #4]
   d6688:	f7fe ba90 	b.w	d4bac <network_disconnect>

000d668c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d668c:	2300      	movs	r3, #0
   d668e:	461a      	mov	r2, r3
   d6690:	6840      	ldr	r0, [r0, #4]
   d6692:	f7fe ba7b 	b.w	d4b8c <network_connect>
	...

000d6698 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6698:	4b02      	ldr	r3, [pc, #8]	; (d66a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d669a:	2204      	movs	r2, #4
   d669c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d669e:	4a02      	ldr	r2, [pc, #8]	; (d66a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d66a0:	601a      	str	r2, [r3, #0]
   d66a2:	4770      	bx	lr
   d66a4:	2003e718 	.word	0x2003e718
   d66a8:	000d6f8c 	.word	0x000d6f8c

000d66ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d66ac:	2300      	movs	r3, #0
   d66ae:	461a      	mov	r2, r3
   d66b0:	6840      	ldr	r0, [r0, #4]
   d66b2:	f7fe ba6b 	b.w	d4b8c <network_connect>

000d66b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d66b6:	2200      	movs	r2, #0
   d66b8:	2102      	movs	r1, #2
   d66ba:	6840      	ldr	r0, [r0, #4]
   d66bc:	f7fe ba76 	b.w	d4bac <network_disconnect>

000d66c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d66c0:	2200      	movs	r2, #0
   d66c2:	4611      	mov	r1, r2
   d66c4:	6840      	ldr	r0, [r0, #4]
   d66c6:	f7fe ba69 	b.w	d4b9c <network_connecting>

000d66ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d66ca:	2200      	movs	r2, #0
   d66cc:	4611      	mov	r1, r2
   d66ce:	6840      	ldr	r0, [r0, #4]
   d66d0:	f7fe ba74 	b.w	d4bbc <network_ready>

000d66d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d66d4:	2300      	movs	r3, #0
   d66d6:	461a      	mov	r2, r3
   d66d8:	4619      	mov	r1, r3
   d66da:	6840      	ldr	r0, [r0, #4]
   d66dc:	f7fe ba76 	b.w	d4bcc <network_on>

000d66e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d66e0:	2300      	movs	r3, #0
   d66e2:	461a      	mov	r2, r3
   d66e4:	4619      	mov	r1, r3
   d66e6:	6840      	ldr	r0, [r0, #4]
   d66e8:	f7fe ba78 	b.w	d4bdc <network_off>

000d66ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d66ec:	2200      	movs	r2, #0
   d66ee:	f081 0101 	eor.w	r1, r1, #1
   d66f2:	6840      	ldr	r0, [r0, #4]
   d66f4:	f7fe ba7a 	b.w	d4bec <network_listen>

000d66f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d66f8:	2200      	movs	r2, #0
   d66fa:	6840      	ldr	r0, [r0, #4]
   d66fc:	f7fe ba86 	b.w	d4c0c <network_set_listen_timeout>

000d6700 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6700:	2200      	movs	r2, #0
   d6702:	4611      	mov	r1, r2
   d6704:	6840      	ldr	r0, [r0, #4]
   d6706:	f7fe ba89 	b.w	d4c1c <network_get_listen_timeout>

000d670a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d670a:	2200      	movs	r2, #0
   d670c:	4611      	mov	r1, r2
   d670e:	6840      	ldr	r0, [r0, #4]
   d6710:	f7fe ba74 	b.w	d4bfc <network_listening>

000d6714 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6718:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d671a:	b095      	sub	sp, #84	; 0x54
   d671c:	4616      	mov	r6, r2
   d671e:	460d      	mov	r5, r1
   d6720:	4607      	mov	r7, r0
    IPAddress addr;
   d6722:	f7ff f8ad 	bl	d5880 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6726:	4621      	mov	r1, r4
   d6728:	2220      	movs	r2, #32
   d672a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d672c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d672e:	f000 fa15 	bl	d6b5c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6732:	2340      	movs	r3, #64	; 0x40
   d6734:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6736:	4621      	mov	r1, r4
   d6738:	466b      	mov	r3, sp
   d673a:	aa0c      	add	r2, sp, #48	; 0x30
   d673c:	4630      	mov	r0, r6
   d673e:	f7fe f85f 	bl	d4800 <netdb_getaddrinfo>
    if (!r) {
   d6742:	4604      	mov	r4, r0
   d6744:	2800      	cmp	r0, #0
   d6746:	d144      	bne.n	d67d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6748:	4602      	mov	r2, r0
   d674a:	2101      	movs	r1, #1
   d674c:	6868      	ldr	r0, [r5, #4]
   d674e:	f7fe fa35 	bl	d4bbc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6752:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6754:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6756:	4622      	mov	r2, r4
   d6758:	6868      	ldr	r0, [r5, #4]
   d675a:	f7fe fa2f 	bl	d4bbc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d675e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6760:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6762:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6764:	2e00      	cmp	r6, #0
   d6766:	d034      	beq.n	d67d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6768:	2900      	cmp	r1, #0
   d676a:	d132      	bne.n	d67d2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d676c:	6873      	ldr	r3, [r6, #4]
   d676e:	2b02      	cmp	r3, #2
   d6770:	d002      	beq.n	d6778 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6772:	2b0a      	cmp	r3, #10
   d6774:	d009      	beq.n	d678a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6776:	e02a      	b.n	d67ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6778:	f1b8 0f00 	cmp.w	r8, #0
   d677c:	d027      	beq.n	d67ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d677e:	6971      	ldr	r1, [r6, #20]
   d6780:	4638      	mov	r0, r7
   d6782:	3104      	adds	r1, #4
   d6784:	f7ff f8bf 	bl	d5906 <_ZN9IPAddressaSEPKh>
   d6788:	e020      	b.n	d67cc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d678a:	f1b9 0f00 	cmp.w	r9, #0
   d678e:	d01e      	beq.n	d67ce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6790:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6792:	2211      	movs	r2, #17
   d6794:	a801      	add	r0, sp, #4
   d6796:	f000 f9e1 	bl	d6b5c <memset>
                    a.v = 6;
   d679a:	2306      	movs	r3, #6
   d679c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67a0:	ad01      	add	r5, sp, #4
   d67a2:	f104 0308 	add.w	r3, r4, #8
   d67a6:	3418      	adds	r4, #24
   d67a8:	6818      	ldr	r0, [r3, #0]
   d67aa:	6859      	ldr	r1, [r3, #4]
   d67ac:	462a      	mov	r2, r5
   d67ae:	c203      	stmia	r2!, {r0, r1}
   d67b0:	3308      	adds	r3, #8
   d67b2:	42a3      	cmp	r3, r4
   d67b4:	4615      	mov	r5, r2
   d67b6:	d1f7      	bne.n	d67a8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d67b8:	a901      	add	r1, sp, #4
   d67ba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d67bc:	ad07      	add	r5, sp, #28
   d67be:	f7ff f86d 	bl	d589c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d67c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67c4:	1d3c      	adds	r4, r7, #4
   d67c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67c8:	682b      	ldr	r3, [r5, #0]
   d67ca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d67cc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d67ce:	69f6      	ldr	r6, [r6, #28]
   d67d0:	e7c8      	b.n	d6764 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d67d2:	9800      	ldr	r0, [sp, #0]
   d67d4:	f7fe f80c 	bl	d47f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d67d8:	4638      	mov	r0, r7
   d67da:	b015      	add	sp, #84	; 0x54
   d67dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d67e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d67e0:	4b02      	ldr	r3, [pc, #8]	; (d67ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d67e2:	4a03      	ldr	r2, [pc, #12]	; (d67f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d67e4:	601a      	str	r2, [r3, #0]
   d67e6:	2200      	movs	r2, #0
   d67e8:	605a      	str	r2, [r3, #4]
   d67ea:	4770      	bx	lr
   d67ec:	2003e720 	.word	0x2003e720
   d67f0:	000d6fc0 	.word	0x000d6fc0

000d67f4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d67f4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d67f6:	4c0c      	ldr	r4, [pc, #48]	; (d6828 <_GLOBAL__sub_I_SPI+0x34>)
   d67f8:	4e0c      	ldr	r6, [pc, #48]	; (d682c <_GLOBAL__sub_I_SPI+0x38>)
   d67fa:	4d0d      	ldr	r5, [pc, #52]	; (d6830 <_GLOBAL__sub_I_SPI+0x3c>)
   d67fc:	2100      	movs	r1, #0
   d67fe:	4620      	mov	r0, r4
   d6800:	f7fe faba 	bl	d4d78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6804:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6806:	4c0b      	ldr	r4, [pc, #44]	; (d6834 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6808:	4632      	mov	r2, r6
   d680a:	4629      	mov	r1, r5
   d680c:	f000 f814 	bl	d6838 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6810:	2101      	movs	r1, #1
   d6812:	4620      	mov	r0, r4
   d6814:	f7fe fab0 	bl	d4d78 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6818:	4632      	mov	r2, r6
   d681a:	4629      	mov	r1, r5
   d681c:	4620      	mov	r0, r4
   d681e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6822:	f000 b809 	b.w	d6838 <__aeabi_atexit>
   d6826:	bf00      	nop
   d6828:	2003e728 	.word	0x2003e728
   d682c:	2003e370 	.word	0x2003e370
   d6830:	000d4d69 	.word	0x000d4d69
   d6834:	2003e738 	.word	0x2003e738

000d6838 <__aeabi_atexit>:
   d6838:	460b      	mov	r3, r1
   d683a:	4601      	mov	r1, r0
   d683c:	4618      	mov	r0, r3
   d683e:	f000 b965 	b.w	d6b0c <__cxa_atexit>
	...

000d6844 <_ZSt15get_new_handlerv>:
   d6844:	4b02      	ldr	r3, [pc, #8]	; (d6850 <_ZSt15get_new_handlerv+0xc>)
   d6846:	6818      	ldr	r0, [r3, #0]
   d6848:	f3bf 8f5f 	dmb	sy
   d684c:	4770      	bx	lr
   d684e:	bf00      	nop
   d6850:	2003e74c 	.word	0x2003e74c

000d6854 <_ZnajRKSt9nothrow_t>:
   d6854:	f000 b800 	b.w	d6858 <_ZnwjRKSt9nothrow_t>

000d6858 <_ZnwjRKSt9nothrow_t>:
   d6858:	b510      	push	{r4, lr}
   d685a:	2800      	cmp	r0, #0
   d685c:	bf14      	ite	ne
   d685e:	4604      	movne	r4, r0
   d6860:	2401      	moveq	r4, #1
   d6862:	4620      	mov	r0, r4
   d6864:	f7fe fa12 	bl	d4c8c <malloc>
   d6868:	b920      	cbnz	r0, d6874 <_ZnwjRKSt9nothrow_t+0x1c>
   d686a:	f7ff ffeb 	bl	d6844 <_ZSt15get_new_handlerv>
   d686e:	b108      	cbz	r0, d6874 <_ZnwjRKSt9nothrow_t+0x1c>
   d6870:	4780      	blx	r0
   d6872:	e7f6      	b.n	d6862 <_ZnwjRKSt9nothrow_t+0xa>
   d6874:	bd10      	pop	{r4, pc}

000d6876 <_ZSt25__throw_bad_function_callv>:
   d6876:	b508      	push	{r3, lr}
   d6878:	f7fe fa28 	bl	d4ccc <abort>

000d687c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d687c:	4b18      	ldr	r3, [pc, #96]	; (d68e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d687e:	681a      	ldr	r2, [r3, #0]
   d6880:	07d1      	lsls	r1, r2, #31
   d6882:	bf5c      	itt	pl
   d6884:	2201      	movpl	r2, #1
   d6886:	601a      	strpl	r2, [r3, #0]
   d6888:	4b16      	ldr	r3, [pc, #88]	; (d68e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d688a:	681a      	ldr	r2, [r3, #0]
   d688c:	07d2      	lsls	r2, r2, #31
   d688e:	bf5c      	itt	pl
   d6890:	2201      	movpl	r2, #1
   d6892:	601a      	strpl	r2, [r3, #0]
   d6894:	4b14      	ldr	r3, [pc, #80]	; (d68e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6896:	681a      	ldr	r2, [r3, #0]
   d6898:	07d0      	lsls	r0, r2, #31
   d689a:	bf5c      	itt	pl
   d689c:	2201      	movpl	r2, #1
   d689e:	601a      	strpl	r2, [r3, #0]
   d68a0:	4b12      	ldr	r3, [pc, #72]	; (d68ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d68a2:	681a      	ldr	r2, [r3, #0]
   d68a4:	07d1      	lsls	r1, r2, #31
   d68a6:	bf5c      	itt	pl
   d68a8:	2201      	movpl	r2, #1
   d68aa:	601a      	strpl	r2, [r3, #0]
   d68ac:	4b10      	ldr	r3, [pc, #64]	; (d68f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d68ae:	681a      	ldr	r2, [r3, #0]
   d68b0:	07d2      	lsls	r2, r2, #31
   d68b2:	bf5c      	itt	pl
   d68b4:	2201      	movpl	r2, #1
   d68b6:	601a      	strpl	r2, [r3, #0]
   d68b8:	4b0e      	ldr	r3, [pc, #56]	; (d68f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d68ba:	681a      	ldr	r2, [r3, #0]
   d68bc:	07d0      	lsls	r0, r2, #31
   d68be:	bf5c      	itt	pl
   d68c0:	2201      	movpl	r2, #1
   d68c2:	601a      	strpl	r2, [r3, #0]
   d68c4:	4b0c      	ldr	r3, [pc, #48]	; (d68f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d68c6:	681a      	ldr	r2, [r3, #0]
   d68c8:	07d1      	lsls	r1, r2, #31
   d68ca:	bf5c      	itt	pl
   d68cc:	2201      	movpl	r2, #1
   d68ce:	601a      	strpl	r2, [r3, #0]
   d68d0:	4b0a      	ldr	r3, [pc, #40]	; (d68fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d68d2:	681a      	ldr	r2, [r3, #0]
   d68d4:	07d2      	lsls	r2, r2, #31
   d68d6:	bf5c      	itt	pl
   d68d8:	2201      	movpl	r2, #1
   d68da:	601a      	strpl	r2, [r3, #0]
   d68dc:	4770      	bx	lr
   d68de:	bf00      	nop
   d68e0:	2003e76c 	.word	0x2003e76c
   d68e4:	2003e768 	.word	0x2003e768
   d68e8:	2003e764 	.word	0x2003e764
   d68ec:	2003e760 	.word	0x2003e760
   d68f0:	2003e75c 	.word	0x2003e75c
   d68f4:	2003e758 	.word	0x2003e758
   d68f8:	2003e754 	.word	0x2003e754
   d68fc:	2003e750 	.word	0x2003e750

000d6900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6900:	4b24      	ldr	r3, [pc, #144]	; (d6994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6902:	681a      	ldr	r2, [r3, #0]
   d6904:	07d0      	lsls	r0, r2, #31
   d6906:	bf5c      	itt	pl
   d6908:	2201      	movpl	r2, #1
   d690a:	601a      	strpl	r2, [r3, #0]
   d690c:	4b22      	ldr	r3, [pc, #136]	; (d6998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d690e:	681a      	ldr	r2, [r3, #0]
   d6910:	07d1      	lsls	r1, r2, #31
   d6912:	bf5c      	itt	pl
   d6914:	2201      	movpl	r2, #1
   d6916:	601a      	strpl	r2, [r3, #0]
   d6918:	4b20      	ldr	r3, [pc, #128]	; (d699c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d691a:	681a      	ldr	r2, [r3, #0]
   d691c:	07d2      	lsls	r2, r2, #31
   d691e:	bf5c      	itt	pl
   d6920:	2201      	movpl	r2, #1
   d6922:	601a      	strpl	r2, [r3, #0]
   d6924:	4b1e      	ldr	r3, [pc, #120]	; (d69a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6926:	681a      	ldr	r2, [r3, #0]
   d6928:	07d0      	lsls	r0, r2, #31
   d692a:	bf5c      	itt	pl
   d692c:	2201      	movpl	r2, #1
   d692e:	601a      	strpl	r2, [r3, #0]
   d6930:	4b1c      	ldr	r3, [pc, #112]	; (d69a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6932:	681a      	ldr	r2, [r3, #0]
   d6934:	07d1      	lsls	r1, r2, #31
   d6936:	bf5c      	itt	pl
   d6938:	2201      	movpl	r2, #1
   d693a:	601a      	strpl	r2, [r3, #0]
   d693c:	4b1a      	ldr	r3, [pc, #104]	; (d69a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d693e:	681a      	ldr	r2, [r3, #0]
   d6940:	07d2      	lsls	r2, r2, #31
   d6942:	bf5c      	itt	pl
   d6944:	2201      	movpl	r2, #1
   d6946:	601a      	strpl	r2, [r3, #0]
   d6948:	4b18      	ldr	r3, [pc, #96]	; (d69ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d694a:	681a      	ldr	r2, [r3, #0]
   d694c:	07d0      	lsls	r0, r2, #31
   d694e:	bf5c      	itt	pl
   d6950:	2201      	movpl	r2, #1
   d6952:	601a      	strpl	r2, [r3, #0]
   d6954:	4b16      	ldr	r3, [pc, #88]	; (d69b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6956:	681a      	ldr	r2, [r3, #0]
   d6958:	07d1      	lsls	r1, r2, #31
   d695a:	bf5c      	itt	pl
   d695c:	2201      	movpl	r2, #1
   d695e:	601a      	strpl	r2, [r3, #0]
   d6960:	4b14      	ldr	r3, [pc, #80]	; (d69b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6962:	681a      	ldr	r2, [r3, #0]
   d6964:	07d2      	lsls	r2, r2, #31
   d6966:	bf5c      	itt	pl
   d6968:	2201      	movpl	r2, #1
   d696a:	601a      	strpl	r2, [r3, #0]
   d696c:	4b12      	ldr	r3, [pc, #72]	; (d69b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d696e:	681a      	ldr	r2, [r3, #0]
   d6970:	07d0      	lsls	r0, r2, #31
   d6972:	bf5c      	itt	pl
   d6974:	2201      	movpl	r2, #1
   d6976:	601a      	strpl	r2, [r3, #0]
   d6978:	4b10      	ldr	r3, [pc, #64]	; (d69bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d697a:	681a      	ldr	r2, [r3, #0]
   d697c:	07d1      	lsls	r1, r2, #31
   d697e:	bf5c      	itt	pl
   d6980:	2201      	movpl	r2, #1
   d6982:	601a      	strpl	r2, [r3, #0]
   d6984:	4b0e      	ldr	r3, [pc, #56]	; (d69c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6986:	681a      	ldr	r2, [r3, #0]
   d6988:	07d2      	lsls	r2, r2, #31
   d698a:	bf5c      	itt	pl
   d698c:	2201      	movpl	r2, #1
   d698e:	601a      	strpl	r2, [r3, #0]
   d6990:	4770      	bx	lr
   d6992:	bf00      	nop
   d6994:	2003e79c 	.word	0x2003e79c
   d6998:	2003e798 	.word	0x2003e798
   d699c:	2003e794 	.word	0x2003e794
   d69a0:	2003e790 	.word	0x2003e790
   d69a4:	2003e78c 	.word	0x2003e78c
   d69a8:	2003e788 	.word	0x2003e788
   d69ac:	2003e784 	.word	0x2003e784
   d69b0:	2003e780 	.word	0x2003e780
   d69b4:	2003e77c 	.word	0x2003e77c
   d69b8:	2003e778 	.word	0x2003e778
   d69bc:	2003e774 	.word	0x2003e774
   d69c0:	2003e770 	.word	0x2003e770

000d69c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d69c4:	4b24      	ldr	r3, [pc, #144]	; (d6a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d69c6:	681a      	ldr	r2, [r3, #0]
   d69c8:	07d0      	lsls	r0, r2, #31
   d69ca:	bf5c      	itt	pl
   d69cc:	2201      	movpl	r2, #1
   d69ce:	601a      	strpl	r2, [r3, #0]
   d69d0:	4b22      	ldr	r3, [pc, #136]	; (d6a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d69d2:	681a      	ldr	r2, [r3, #0]
   d69d4:	07d1      	lsls	r1, r2, #31
   d69d6:	bf5c      	itt	pl
   d69d8:	2201      	movpl	r2, #1
   d69da:	601a      	strpl	r2, [r3, #0]
   d69dc:	4b20      	ldr	r3, [pc, #128]	; (d6a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d69de:	681a      	ldr	r2, [r3, #0]
   d69e0:	07d2      	lsls	r2, r2, #31
   d69e2:	bf5c      	itt	pl
   d69e4:	2201      	movpl	r2, #1
   d69e6:	601a      	strpl	r2, [r3, #0]
   d69e8:	4b1e      	ldr	r3, [pc, #120]	; (d6a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d69ea:	681a      	ldr	r2, [r3, #0]
   d69ec:	07d0      	lsls	r0, r2, #31
   d69ee:	bf5c      	itt	pl
   d69f0:	2201      	movpl	r2, #1
   d69f2:	601a      	strpl	r2, [r3, #0]
   d69f4:	4b1c      	ldr	r3, [pc, #112]	; (d6a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d69f6:	681a      	ldr	r2, [r3, #0]
   d69f8:	07d1      	lsls	r1, r2, #31
   d69fa:	bf5c      	itt	pl
   d69fc:	2201      	movpl	r2, #1
   d69fe:	601a      	strpl	r2, [r3, #0]
   d6a00:	4b1a      	ldr	r3, [pc, #104]	; (d6a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6a02:	681a      	ldr	r2, [r3, #0]
   d6a04:	07d2      	lsls	r2, r2, #31
   d6a06:	bf5c      	itt	pl
   d6a08:	2201      	movpl	r2, #1
   d6a0a:	601a      	strpl	r2, [r3, #0]
   d6a0c:	4b18      	ldr	r3, [pc, #96]	; (d6a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6a0e:	681a      	ldr	r2, [r3, #0]
   d6a10:	07d0      	lsls	r0, r2, #31
   d6a12:	bf5c      	itt	pl
   d6a14:	2201      	movpl	r2, #1
   d6a16:	601a      	strpl	r2, [r3, #0]
   d6a18:	4b16      	ldr	r3, [pc, #88]	; (d6a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6a1a:	681a      	ldr	r2, [r3, #0]
   d6a1c:	07d1      	lsls	r1, r2, #31
   d6a1e:	bf5c      	itt	pl
   d6a20:	2201      	movpl	r2, #1
   d6a22:	601a      	strpl	r2, [r3, #0]
   d6a24:	4b14      	ldr	r3, [pc, #80]	; (d6a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6a26:	681a      	ldr	r2, [r3, #0]
   d6a28:	07d2      	lsls	r2, r2, #31
   d6a2a:	bf5c      	itt	pl
   d6a2c:	2201      	movpl	r2, #1
   d6a2e:	601a      	strpl	r2, [r3, #0]
   d6a30:	4b12      	ldr	r3, [pc, #72]	; (d6a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6a32:	681a      	ldr	r2, [r3, #0]
   d6a34:	07d0      	lsls	r0, r2, #31
   d6a36:	bf5c      	itt	pl
   d6a38:	2201      	movpl	r2, #1
   d6a3a:	601a      	strpl	r2, [r3, #0]
   d6a3c:	4b10      	ldr	r3, [pc, #64]	; (d6a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6a3e:	681a      	ldr	r2, [r3, #0]
   d6a40:	07d1      	lsls	r1, r2, #31
   d6a42:	bf5c      	itt	pl
   d6a44:	2201      	movpl	r2, #1
   d6a46:	601a      	strpl	r2, [r3, #0]
   d6a48:	4b0e      	ldr	r3, [pc, #56]	; (d6a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6a4a:	681a      	ldr	r2, [r3, #0]
   d6a4c:	07d2      	lsls	r2, r2, #31
   d6a4e:	bf5c      	itt	pl
   d6a50:	2201      	movpl	r2, #1
   d6a52:	601a      	strpl	r2, [r3, #0]
   d6a54:	4770      	bx	lr
   d6a56:	bf00      	nop
   d6a58:	2003e7cc 	.word	0x2003e7cc
   d6a5c:	2003e7c8 	.word	0x2003e7c8
   d6a60:	2003e7c4 	.word	0x2003e7c4
   d6a64:	2003e7c0 	.word	0x2003e7c0
   d6a68:	2003e7bc 	.word	0x2003e7bc
   d6a6c:	2003e7b8 	.word	0x2003e7b8
   d6a70:	2003e7b4 	.word	0x2003e7b4
   d6a74:	2003e7b0 	.word	0x2003e7b0
   d6a78:	2003e7ac 	.word	0x2003e7ac
   d6a7c:	2003e7a8 	.word	0x2003e7a8
   d6a80:	2003e7a4 	.word	0x2003e7a4
   d6a84:	2003e7a0 	.word	0x2003e7a0

000d6a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a88:	4b18      	ldr	r3, [pc, #96]	; (d6aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a8a:	681a      	ldr	r2, [r3, #0]
   d6a8c:	07d1      	lsls	r1, r2, #31
   d6a8e:	bf5c      	itt	pl
   d6a90:	2201      	movpl	r2, #1
   d6a92:	601a      	strpl	r2, [r3, #0]
   d6a94:	4b16      	ldr	r3, [pc, #88]	; (d6af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	07d2      	lsls	r2, r2, #31
   d6a9a:	bf5c      	itt	pl
   d6a9c:	2201      	movpl	r2, #1
   d6a9e:	601a      	strpl	r2, [r3, #0]
   d6aa0:	4b14      	ldr	r3, [pc, #80]	; (d6af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d0      	lsls	r0, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b12      	ldr	r3, [pc, #72]	; (d6af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d1      	lsls	r1, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b10      	ldr	r3, [pc, #64]	; (d6afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d2      	lsls	r2, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b0e      	ldr	r3, [pc, #56]	; (d6b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d0      	lsls	r0, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b0c      	ldr	r3, [pc, #48]	; (d6b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d1      	lsls	r1, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b0a      	ldr	r3, [pc, #40]	; (d6b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d2      	lsls	r2, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4770      	bx	lr
   d6aea:	bf00      	nop
   d6aec:	2003e7ec 	.word	0x2003e7ec
   d6af0:	2003e7e8 	.word	0x2003e7e8
   d6af4:	2003e7e4 	.word	0x2003e7e4
   d6af8:	2003e7e0 	.word	0x2003e7e0
   d6afc:	2003e7dc 	.word	0x2003e7dc
   d6b00:	2003e7d8 	.word	0x2003e7d8
   d6b04:	2003e7d4 	.word	0x2003e7d4
   d6b08:	2003e7d0 	.word	0x2003e7d0

000d6b0c <__cxa_atexit>:
   d6b0c:	b510      	push	{r4, lr}
   d6b0e:	4c05      	ldr	r4, [pc, #20]	; (d6b24 <__cxa_atexit+0x18>)
   d6b10:	4613      	mov	r3, r2
   d6b12:	b12c      	cbz	r4, d6b20 <__cxa_atexit+0x14>
   d6b14:	460a      	mov	r2, r1
   d6b16:	4601      	mov	r1, r0
   d6b18:	2002      	movs	r0, #2
   d6b1a:	f3af 8000 	nop.w
   d6b1e:	bd10      	pop	{r4, pc}
   d6b20:	4620      	mov	r0, r4
   d6b22:	bd10      	pop	{r4, pc}
   d6b24:	00000000 	.word	0x00000000

000d6b28 <memcmp>:
   d6b28:	b510      	push	{r4, lr}
   d6b2a:	3901      	subs	r1, #1
   d6b2c:	4402      	add	r2, r0
   d6b2e:	4290      	cmp	r0, r2
   d6b30:	d007      	beq.n	d6b42 <memcmp+0x1a>
   d6b32:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6b3a:	42a3      	cmp	r3, r4
   d6b3c:	d0f7      	beq.n	d6b2e <memcmp+0x6>
   d6b3e:	1b18      	subs	r0, r3, r4
   d6b40:	bd10      	pop	{r4, pc}
   d6b42:	2000      	movs	r0, #0
   d6b44:	bd10      	pop	{r4, pc}

000d6b46 <memcpy>:
   d6b46:	b510      	push	{r4, lr}
   d6b48:	1e43      	subs	r3, r0, #1
   d6b4a:	440a      	add	r2, r1
   d6b4c:	4291      	cmp	r1, r2
   d6b4e:	d004      	beq.n	d6b5a <memcpy+0x14>
   d6b50:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6b54:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6b58:	e7f8      	b.n	d6b4c <memcpy+0x6>
   d6b5a:	bd10      	pop	{r4, pc}

000d6b5c <memset>:
   d6b5c:	4402      	add	r2, r0
   d6b5e:	4603      	mov	r3, r0
   d6b60:	4293      	cmp	r3, r2
   d6b62:	d002      	beq.n	d6b6a <memset+0xe>
   d6b64:	f803 1b01 	strb.w	r1, [r3], #1
   d6b68:	e7fa      	b.n	d6b60 <memset+0x4>
   d6b6a:	4770      	bx	lr

000d6b6c <srand>:
   d6b6c:	b538      	push	{r3, r4, r5, lr}
   d6b6e:	4b12      	ldr	r3, [pc, #72]	; (d6bb8 <srand+0x4c>)
   d6b70:	681c      	ldr	r4, [r3, #0]
   d6b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b74:	4605      	mov	r5, r0
   d6b76:	b9d3      	cbnz	r3, d6bae <srand+0x42>
   d6b78:	2018      	movs	r0, #24
   d6b7a:	f7fe f887 	bl	d4c8c <malloc>
   d6b7e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6b82:	63a0      	str	r0, [r4, #56]	; 0x38
   d6b84:	8003      	strh	r3, [r0, #0]
   d6b86:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6b8a:	8043      	strh	r3, [r0, #2]
   d6b8c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6b90:	8083      	strh	r3, [r0, #4]
   d6b92:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6b96:	80c3      	strh	r3, [r0, #6]
   d6b98:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6b9c:	8103      	strh	r3, [r0, #8]
   d6b9e:	2305      	movs	r3, #5
   d6ba0:	8143      	strh	r3, [r0, #10]
   d6ba2:	230b      	movs	r3, #11
   d6ba4:	8183      	strh	r3, [r0, #12]
   d6ba6:	2201      	movs	r2, #1
   d6ba8:	2300      	movs	r3, #0
   d6baa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6bb0:	2200      	movs	r2, #0
   d6bb2:	611d      	str	r5, [r3, #16]
   d6bb4:	615a      	str	r2, [r3, #20]
   d6bb6:	bd38      	pop	{r3, r4, r5, pc}
   d6bb8:	2003e36c 	.word	0x2003e36c

000d6bbc <strlen>:
   d6bbc:	4603      	mov	r3, r0
   d6bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6bc2:	2a00      	cmp	r2, #0
   d6bc4:	d1fb      	bne.n	d6bbe <strlen+0x2>
   d6bc6:	1a18      	subs	r0, r3, r0
   d6bc8:	3801      	subs	r0, #1
   d6bca:	4770      	bx	lr

000d6bcc <strncmp>:
   d6bcc:	b530      	push	{r4, r5, lr}
   d6bce:	b182      	cbz	r2, d6bf2 <strncmp+0x26>
   d6bd0:	1e45      	subs	r5, r0, #1
   d6bd2:	3901      	subs	r1, #1
   d6bd4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6bd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6bdc:	42a3      	cmp	r3, r4
   d6bde:	d106      	bne.n	d6bee <strncmp+0x22>
   d6be0:	43ec      	mvns	r4, r5
   d6be2:	4414      	add	r4, r2
   d6be4:	42e0      	cmn	r0, r4
   d6be6:	d001      	beq.n	d6bec <strncmp+0x20>
   d6be8:	2b00      	cmp	r3, #0
   d6bea:	d1f3      	bne.n	d6bd4 <strncmp+0x8>
   d6bec:	461c      	mov	r4, r3
   d6bee:	1b18      	subs	r0, r3, r4
   d6bf0:	bd30      	pop	{r4, r5, pc}
   d6bf2:	4610      	mov	r0, r2
   d6bf4:	bd30      	pop	{r4, r5, pc}

000d6bf6 <strnlen>:
   d6bf6:	b510      	push	{r4, lr}
   d6bf8:	4603      	mov	r3, r0
   d6bfa:	4401      	add	r1, r0
   d6bfc:	428b      	cmp	r3, r1
   d6bfe:	d004      	beq.n	d6c0a <strnlen+0x14>
   d6c00:	781a      	ldrb	r2, [r3, #0]
   d6c02:	1c5c      	adds	r4, r3, #1
   d6c04:	b10a      	cbz	r2, d6c0a <strnlen+0x14>
   d6c06:	4623      	mov	r3, r4
   d6c08:	e7f8      	b.n	d6bfc <strnlen+0x6>
   d6c0a:	1a18      	subs	r0, r3, r0
   d6c0c:	bd10      	pop	{r4, pc}

000d6c0e <link_code_end>:
	...

000d6c10 <dynalib_user>:
   d6c10:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6c20:	0000 0000 6143 6c6c 6162 6b63 4400 7461     ....Callback.Dat
   d6c30:	2061 7245 6f72 0072 6553 7672 7265 6e20     a Error.Server n
   d6c40:	746f 6620 756f 646e 6400 7461 0061 7570     ot found.data.pu
   d6c50:	6c62 7369 6568 0064 7069 203a 7300 6e65     blished.ip: .sen
   d6c60:	6f73 4472 7461 0061 0400 514d 5454 0004     sorData...MQTT..
   d6c70:	4d06 4951 6473 0370                         .MQIsdp.

000d6c78 <_ZTVN5spark13EthernetClassE>:
	...
   d6c80:	4d4b 000d 4d41 000d 4d37 000d 4d2d 000d     KM..AM..7M..-M..
   d6c90:	4d21 000d 4d15 000d 4d09 000d 4d01 000d     !M...M...M...M..
   d6ca0:	4cf7 000d 4ced 000d 6715 000d               .L...L...g..

000d6cac <_ZTV8SPIClass>:
	...
   d6cb4:	4d69 000d 4d6b 000d                         iM..kM..

000d6cbc <_ZTV3UDP>:
	...
   d6cc4:	53f9 000d 541d 000d 4dd9 000d 4f03 000d     .S...T...M...O..
   d6cd4:	4dd1 000d 4def 000d 4e0d 000d 4e27 000d     .M...M...N..'N..
   d6ce4:	4e4b 000d 4ee7 000d 51e9 000d 4f89 000d     KN...N...Q...O..
   d6cf4:	5109 000d 4db9 000d 538f 000d 508d 000d     .Q...M...S...P..
   d6d04:	4fc1 000d 53bd 000d 4f2d 000d 4dc7 000d     .O...S..-O...M..
   d6d14:	4f69 000d 4dcd 000d 4e29 000d fff0 ffff     iO...M..)N......
   d6d24:	0000 0000 4e43 000d 0066 6e6c 6600 006e     ....CN..f.ln.fn.
   d6d34:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
   d6d44:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d6d54:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d6d64:	7465 6961 736c 3d20 0020 6162 6475 5300     etails = .baud.S
   d6d74:	7265 6169 006c 6553 6972 6c61 0031 7974     erial.Serial1.ty
   d6d84:	6570 7000 7261 6d61 6300 646d 6900 0064     pe.param.cmd.id.
   d6d94:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d6da4:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d6db4:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d6dc4:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d6dd4:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d6de4:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d6df4:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d6e04:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
   d6e14:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d6e24:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d6e34 <_ZTV9IPAddress>:
	...
   d6e3c:	581b 000d 580d 000d 580f 000d               .X...X...X..

000d6e48 <_ZTV9USBSerial>:
	...
   d6e50:	5935 000d 5979 000d 5953 000d 551d 000d     5Y..yY..SY...U..
   d6e60:	594d 000d 5937 000d 593f 000d 5973 000d     MY..7Y..?Y..sY..
   d6e70:	5947 000d 5931 000d                         GY..1Y..

000d6e78 <_ZTV11USARTSerial>:
	...
   d6e80:	5a11 000d 5a35 000d 5a41 000d 551d 000d     .Z..5Z..AZ...U..
   d6e90:	5a1d 000d 5a29 000d 5a23 000d 5a2f 000d     .Z..)Z..#Z../Z..
   d6ea0:	5a13 000d 5a17 000d                         .Z...Z..

000d6ea8 <_ZTVN5spark9MeshClassE>:
	...
   d6eb0:	5b69 000d 5b5f 000d 5b55 000d 5b4b 000d     i[.._[..U[..K[..
   d6ec0:	5b3f 000d 5b33 000d 5b27 000d 5b1f 000d     ?[..3[..'[...[..
   d6ed0:	5b15 000d 5b0b 000d 6715 000d 6666 3330     .[...[...g..ff03
   d6ee0:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d6ef0:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d6f00:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d6f0c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6f14:	6129 000d 612f 000d 6617 000d 613b 000d     )a../a...f..;a..
   d6f24:	612b 000d                                   +a..

000d6f28 <_ZTV9TCPClient>:
	...
   d6f30:	4265 000d 4299 000d 60a1 000d 60bb 000d     eB...B...`...`..
   d6f40:	64bd 000d 62ff 000d 62d1 000d 60e5 000d     .d...b...b...`..
   d6f50:	6395 000d 6141 000d 6333 000d 648f 000d     .c..Aa..3c...d..
   d6f60:	60e7 000d 611f 000d 60cd 000d 6231 000d     .`...a...`..1b..
   d6f70:	62b1 000d 6572 7663 6520 7272 726f 3d20     .b..recv error =
   d6f80:	2520 0064                                    %d.

000d6f84 <_ZTVN5spark9WiFiClassE>:
	...
   d6f8c:	668d 000d 6683 000d 6679 000d 662f 000d     .f...f..yf../f..
   d6f9c:	666d 000d 6661 000d 6655 000d 664d 000d     mf..af..Uf..Mf..
   d6fac:	6643 000d 6639 000d 6715 000d               Cf..9f...g..

000d6fb8 <_ZTVN5spark12NetworkClassE>:
	...
   d6fc0:	66ad 000d 66b7 000d 66c1 000d 66cb 000d     .f...f...f...f..
   d6fd0:	66d5 000d 66e1 000d 66ed 000d 66f9 000d     .f...f...f...f..
   d6fe0:	6701 000d 670b 000d 6715 000d               .g...g...g..

000d6fec <_ZSt7nothrow>:
   d6fec:	0000 0000                                   ....

000d6ff0 <__sf_fake_stdin>:
	...

000d7010 <__sf_fake_stdout>:
	...

000d7030 <__sf_fake_stderr>:
	...
   d7050:	0043                                        C.

000d7052 <link_const_variable_data_end>:
	...

000d7054 <link_constructors_location>:
   d7054:	000d4211 	.word	0x000d4211
   d7058:	000d47d9 	.word	0x000d47d9
   d705c:	000d47dd 	.word	0x000d47dd
   d7060:	000d47ed 	.word	0x000d47ed
   d7064:	000d4d55 	.word	0x000d4d55
   d7068:	000d4da1 	.word	0x000d4da1
   d706c:	000d569d 	.word	0x000d569d
   d7070:	000d56e5 	.word	0x000d56e5
   d7074:	000d571d 	.word	0x000d571d
   d7078:	000d6055 	.word	0x000d6055
   d707c:	000d6699 	.word	0x000d6699
   d7080:	000d67e1 	.word	0x000d67e1
   d7084:	000d67f5 	.word	0x000d67f5
   d7088:	000d687d 	.word	0x000d687d
   d708c:	000d6901 	.word	0x000d6901
   d7090:	000d69c5 	.word	0x000d69c5
   d7094:	000d6a89 	.word	0x000d6a89

000d7098 <link_constructors_end>:
	...
