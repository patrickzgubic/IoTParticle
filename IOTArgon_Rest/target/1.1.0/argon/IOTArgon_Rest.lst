
c:/projects/IOTArgon_Rest/target/1.1.0/argon/IOTArgon_Rest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003118  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000171e0  2**0
                  CONTENTS
  3 .data         00000084  2003dee0  000d7130  0000dee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000088c  2003df64  2003df64  0001df64  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d71b4  000d71b4  000171b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d71dc  000d71dc  000171dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a898c  00000000  00000000  000171e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ee27  00000000  00000000  000bfb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00013af2  00000000  00000000  000ce993  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001f90  00000000  00000000  000e2485  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003350  00000000  00000000  000e4415  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003121d  00000000  00000000  000e7765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00023262  00000000  00000000  00118982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d744f  00000000  00000000  0013bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bb04  00000000  00000000  00213034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	48 6b 0d 00                                         Hk..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc6a 	bl	d6906 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc6f 	bl	d691c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dee0 	.word	0x2003dee0
   d4048:	000d7130 	.word	0x000d7130
   d404c:	2003df64 	.word	0x2003df64
   d4050:	2003df64 	.word	0x2003df64
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fa95 	bl	d5588 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7128 	.word	0x000d7128
   d4080:	000d70ec 	.word	0x000d70ec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b886 	b.w	d4194 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8d1 	bl	d4230 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 ba47 	b.w	d5524 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bc95 	b.w	d49c4 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bc93 	b.w	d49c4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bc99 	b.w	d49d4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bc97 	b.w	d49d4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z12meshcallbackPKcS0_>:
		{ "Content-Type", "application/vnd.kafka.avro.v2+json"},
		{ NULL, NULL } //terminate the header
	};

void meshcallback(const char *event, const char *data)
{
   d40b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	request.body=data;
   d40ba:	4c10      	ldr	r4, [pc, #64]	; (d40fc <_Z12meshcallbackPKcS0_+0x44>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d40bc:	4d10      	ldr	r5, [pc, #64]	; (d4100 <_Z12meshcallbackPKcS0_+0x48>)
   d40be:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d40c2:	f001 f8ae 	bl	d5222 <_ZN6StringaSEPKc>
   d40c6:	4b0f      	ldr	r3, [pc, #60]	; (d4104 <_Z12meshcallbackPKcS0_+0x4c>)
   d40c8:	9300      	str	r3, [sp, #0]
   d40ca:	462a      	mov	r2, r5
   d40cc:	4b0e      	ldr	r3, [pc, #56]	; (d4108 <_Z12meshcallbackPKcS0_+0x50>)
   d40ce:	480f      	ldr	r0, [pc, #60]	; (d410c <_Z12meshcallbackPKcS0_+0x54>)
   d40d0:	4621      	mov	r1, r4
   d40d2:	f000 f92d 	bl	d4330 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
	http.post(request,response,headers);
	Serial.println("send");
   d40d6:	f001 fb51 	bl	d577c <_Z16_fetch_usbserialv>
   d40da:	490d      	ldr	r1, [pc, #52]	; (d4110 <_Z12meshcallbackPKcS0_+0x58>)
   d40dc:	f001 f960 	bl	d53a0 <_ZN5Print7printlnEPKc>
	Serial.println(response.status);
   d40e0:	f001 fb4c 	bl	d577c <_Z16_fetch_usbserialv>
   d40e4:	6829      	ldr	r1, [r5, #0]
   d40e6:	220a      	movs	r2, #10
   d40e8:	f001 f9bf 	bl	d546a <_ZN5Print7printlnEii>
	Serial.println(request.body); 
   d40ec:	f001 fb46 	bl	d577c <_Z16_fetch_usbserialv>
   d40f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
}
   d40f2:	b003      	add	sp, #12
   d40f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
{
	request.body=data;
	http.post(request,response,headers);
	Serial.println("send");
	Serial.println(response.status);
	Serial.println(request.body); 
   d40f8:	f001 b952 	b.w	d53a0 <_ZN5Print7printlnEPKc>
   d40fc:	2003e398 	.word	0x2003e398
   d4100:	2003e384 	.word	0x2003e384
   d4104:	000d6b5c 	.word	0x000d6b5c
   d4108:	2003dee0 	.word	0x2003dee0
   d410c:	2003df68 	.word	0x2003df68
   d4110:	000d6b61 	.word	0x000d6b61

000d4114 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d4114:	b510      	push	{r4, lr}
   d4116:	4604      	mov	r4, r0
   d4118:	3004      	adds	r0, #4
   d411a:	f001 f828 	bl	d516e <_ZN6StringD1Ev>
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}

000d4122 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   d4122:	b510      	push	{r4, lr}
   d4124:	4604      	mov	r4, r0
   d4126:	303c      	adds	r0, #60	; 0x3c
   d4128:	f001 f821 	bl	d516e <_ZN6StringD1Ev>
   d412c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4130:	f001 f81d 	bl	d516e <_ZN6StringD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	f001 f81a 	bl	d516e <_ZN6StringD1Ev>
   d413a:	4620      	mov	r0, r4
   d413c:	bd10      	pop	{r4, pc}
	...

000d4140 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4140:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4142:	6984      	ldr	r4, [r0, #24]
   d4144:	4b0a      	ldr	r3, [pc, #40]	; (d4170 <_ZN9TCPClientD1Ev+0x30>)
   d4146:	6003      	str	r3, [r0, #0]
   d4148:	4605      	mov	r5, r0
   d414a:	b17c      	cbz	r4, d416c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d414c:	6863      	ldr	r3, [r4, #4]
   d414e:	3b01      	subs	r3, #1
   d4150:	6063      	str	r3, [r4, #4]
   d4152:	b95b      	cbnz	r3, d416c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4154:	6823      	ldr	r3, [r4, #0]
   d4156:	4620      	mov	r0, r4
   d4158:	689b      	ldr	r3, [r3, #8]
   d415a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	3b01      	subs	r3, #1
   d4160:	60a3      	str	r3, [r4, #8]
   d4162:	b91b      	cbnz	r3, d416c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4164:	6823      	ldr	r3, [r4, #0]
   d4166:	4620      	mov	r0, r4
   d4168:	68db      	ldr	r3, [r3, #12]
   d416a:	4798      	blx	r3
   d416c:	4628      	mov	r0, r5
   d416e:	bd38      	pop	{r3, r4, r5, pc}
   d4170:	000d6ec8 	.word	0x000d6ec8

000d4174 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4174:	b510      	push	{r4, lr}
   d4176:	4604      	mov	r4, r0
   d4178:	f7ff ffe2 	bl	d4140 <_ZN9TCPClientD1Ev>
   d417c:	4620      	mov	r0, r4
   d417e:	bd10      	pop	{r4, pc}

000d4180 <_ZN9TCPClientD0Ev>:
   d4180:	b510      	push	{r4, lr}
   d4182:	4604      	mov	r4, r0
   d4184:	f7ff ffdc 	bl	d4140 <_ZN9TCPClientD1Ev>
   d4188:	4620      	mov	r0, r4
   d418a:	f7ff ff88 	bl	d409e <_ZdlPv>
   d418e:	4620      	mov	r0, r4
   d4190:	bd10      	pop	{r4, pc}
	...

000d4194 <setup>:
}

void setup()
{
   d4194:	b570      	push	{r4, r5, r6, lr}
   d4196:	b088      	sub	sp, #32
	Serial.begin(9600);
   d4198:	f001 faf0 	bl	d577c <_Z16_fetch_usbserialv>
   d419c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41a0:	f001 fae0 	bl	d5764 <_ZN9USBSerial5beginEl>
	Serial.println(System.deviceID());
   d41a4:	f001 faea 	bl	d577c <_Z16_fetch_usbserialv>
   d41a8:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d41aa:	a802      	add	r0, sp, #8
   d41ac:	f000 fbfa 	bl	d49a4 <spark_deviceID>
   d41b0:	9902      	ldr	r1, [sp, #8]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d41b2:	4e1b      	ldr	r6, [pc, #108]	; (d4220 <setup+0x8c>)
   d41b4:	4620      	mov	r0, r4
   d41b6:	f001 f8f3 	bl	d53a0 <_ZN5Print7printlnEPKc>
   d41ba:	a802      	add	r0, sp, #8
   d41bc:	f000 ffd7 	bl	d516e <_ZN6StringD1Ev>
	Serial.print("ip: ");
   d41c0:	f001 fadc 	bl	d577c <_Z16_fetch_usbserialv>
   d41c4:	4917      	ldr	r1, [pc, #92]	; (d4224 <setup+0x90>)
   d41c6:	f001 f8d2 	bl	d536e <_ZN5Print5printEPKc>
	Serial.println(WiFi.localIP());
   d41ca:	f001 fad7 	bl	d577c <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d41ce:	4b16      	ldr	r3, [pc, #88]	; (d4228 <setup+0x94>)
   d41d0:	2200      	movs	r2, #0
   d41d2:	4611      	mov	r1, r2
   d41d4:	4604      	mov	r4, r0
   d41d6:	6858      	ldr	r0, [r3, #4]
   d41d8:	f000 fb8c 	bl	d48f4 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d41dc:	1c81      	adds	r1, r0, #2
   d41de:	a802      	add	r0, sp, #8
   d41e0:	f001 fa34 	bl	d564c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d41e4:	a902      	add	r1, sp, #8
   d41e6:	4620      	mov	r0, r4
   d41e8:	f001 f8e4 	bl	d53b4 <_ZN5Print7printlnERK9Printable>
	request.ip = IPAddress(192,168,7,31);
   d41ec:	231f      	movs	r3, #31
   d41ee:	9300      	str	r3, [sp, #0]
   d41f0:	22a8      	movs	r2, #168	; 0xa8
   d41f2:	2307      	movs	r3, #7
   d41f4:	21c0      	movs	r1, #192	; 0xc0
   d41f6:	a802      	add	r0, sp, #8
   d41f8:	ad03      	add	r5, sp, #12
   d41fa:	f001 fa5d 	bl	d56b8 <_ZN9IPAddressC1Ehhhh>
   d41fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4200:	f106 0414 	add.w	r4, r6, #20
   d4204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4206:	682b      	ldr	r3, [r5, #0]
   d4208:	7023      	strb	r3, [r4, #0]
	request.port = 8082;
	request.path="/topics/dataavro";
   d420a:	4908      	ldr	r1, [pc, #32]	; (d422c <setup+0x98>)
	Serial.begin(9600);
	Serial.println(System.deviceID());
	Serial.print("ip: ");
	Serial.println(WiFi.localIP());
	request.ip = IPAddress(192,168,7,31);
	request.port = 8082;
   d420c:	f641 7392 	movw	r3, #8082	; 0x1f92
	request.path="/topics/dataavro";
   d4210:	f106 0028 	add.w	r0, r6, #40	; 0x28
	Serial.begin(9600);
	Serial.println(System.deviceID());
	Serial.print("ip: ");
	Serial.println(WiFi.localIP());
	request.ip = IPAddress(192,168,7,31);
	request.port = 8082;
   d4214:	63b3      	str	r3, [r6, #56]	; 0x38
	request.path="/topics/dataavro";
   d4216:	f001 f804 	bl	d5222 <_ZN6StringaSEPKc>
}
   d421a:	b008      	add	sp, #32
   d421c:	bd70      	pop	{r4, r5, r6, pc}
   d421e:	bf00      	nop
   d4220:	2003e398 	.word	0x2003e398
   d4224:	000d6b66 	.word	0x000d6b66
   d4228:	2003e718 	.word	0x2003e718
   d422c:	000d6b6b 	.word	0x000d6b6b

000d4230 <loop>:

void loop()
{
   d4230:	b508      	push	{r3, lr}
 	Mesh.subscribe("sensorData", meshcallback);
   d4232:	4a05      	ldr	r2, [pc, #20]	; (d4248 <loop+0x18>)
   d4234:	4905      	ldr	r1, [pc, #20]	; (d424c <loop+0x1c>)
   d4236:	4806      	ldr	r0, [pc, #24]	; (d4250 <loop+0x20>)
   d4238:	f001 fcf4 	bl	d5c24 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
	//char *data= "{\"deviceID\":\"1\",\"timestamp\":\"2020-01-28T20:47:34+01:00\"}";
	//data[strlen(data)]=0; //delete last character ->}
	//data++; //delete first character -> {}
	//char* message = strtok(data, ",");
	//request.body = "{\"value_schema\": \"{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}\", \"records\": [{\"value\": {\"name\": \"testUser\"}}]}";
	delay(500);
   d423c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	//char *data= "{\"deviceID\":\"1\",\"timestamp\":\"2020-01-28T20:47:34+01:00\"}";
	//data[strlen(data)]=0; //delete last character ->}
	//data++; //delete first character -> {}
	//char* message = strtok(data, ",");
	//request.body = "{\"value_schema\": \"{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}\", \"records\": [{\"value\": {\"name\": \"testUser\"}}]}";
	delay(500);
   d4244:	f001 b930 	b.w	d54a8 <delay>
   d4248:	000d40b9 	.word	0x000d40b9
   d424c:	000d6b7c 	.word	0x000d6b7c
   d4250:	2003e550 	.word	0x2003e550

000d4254 <_GLOBAL__sub_I_http>:
   d4254:	b570      	push	{r4, r5, r6, lr}
 */

#include <time.h>
#include "HttpClient.h"

	HttpClient http;
   d4256:	4c18      	ldr	r4, [pc, #96]	; (d42b8 <_GLOBAL__sub_I_http+0x64>)
   d4258:	4e18      	ldr	r6, [pc, #96]	; (d42bc <_GLOBAL__sub_I_http+0x68>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d425a:	4d19      	ldr	r5, [pc, #100]	; (d42c0 <_GLOBAL__sub_I_http+0x6c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d425c:	f000 f994 	bl	d4588 <HAL_Pin_Map>
   d4260:	4620      	mov	r0, r4
   d4262:	f000 f839 	bl	d42d8 <_ZN10HttpClientC1Ev>
   d4266:	4620      	mov	r0, r4
   d4268:	4c16      	ldr	r4, [pc, #88]	; (d42c4 <_GLOBAL__sub_I_http+0x70>)
   d426a:	4917      	ldr	r1, [pc, #92]	; (d42c8 <_GLOBAL__sub_I_http+0x74>)
   d426c:	4632      	mov	r2, r6
   d426e:	f002 f9bf 	bl	d65f0 <__aeabi_atexit>
   d4272:	4629      	mov	r1, r5
   d4274:	4620      	mov	r0, r4
   d4276:	f000 ffc1 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>
   d427a:	f104 0010 	add.w	r0, r4, #16
   d427e:	f001 f9d7 	bl	d5630 <_ZN9IPAddressC1Ev>
   d4282:	4629      	mov	r1, r5
   d4284:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4288:	f000 ffb8 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>
   d428c:	4629      	mov	r1, r5
   d428e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4292:	f000 ffb3 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>
	http_request_t request;
   d4296:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4298:	4c0c      	ldr	r4, [pc, #48]	; (d42cc <_GLOBAL__sub_I_http+0x78>)
   d429a:	490d      	ldr	r1, [pc, #52]	; (d42d0 <_GLOBAL__sub_I_http+0x7c>)
   d429c:	4632      	mov	r2, r6
   d429e:	f002 f9a7 	bl	d65f0 <__aeabi_atexit>
   d42a2:	4629      	mov	r1, r5
   d42a4:	1d20      	adds	r0, r4, #4
   d42a6:	f000 ffa9 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>
	http_response_t response;
   d42aa:	4632      	mov	r2, r6
   d42ac:	4620      	mov	r0, r4
   d42ae:	4909      	ldr	r1, [pc, #36]	; (d42d4 <_GLOBAL__sub_I_http+0x80>)
	//data[strlen(data)]=0; //delete last character ->}
	//data++; //delete first character -> {}
	//char* message = strtok(data, ",");
	//request.body = "{\"value_schema\": \"{\"type\": \"record\", \"name\": \"User\", \"fields\": [{\"name\": \"name\", \"type\": \"string\"}]}\", \"records\": [{\"value\": {\"name\": \"testUser\"}}]}";
	delay(500);
   d42b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include <time.h>
#include "HttpClient.h"

	HttpClient http;
	http_request_t request;
	http_response_t response;
   d42b4:	f002 b99c 	b.w	d65f0 <__aeabi_atexit>
   d42b8:	2003df68 	.word	0x2003df68
   d42bc:	2003df64 	.word	0x2003df64
   d42c0:	000d6c11 	.word	0x000d6c11
   d42c4:	2003e398 	.word	0x2003e398
   d42c8:	000d4175 	.word	0x000d4175
   d42cc:	2003e384 	.word	0x2003e384
   d42d0:	000d4123 	.word	0x000d4123
   d42d4:	000d4115 	.word	0x000d4115

000d42d8 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d42d8:	b510      	push	{r4, lr}
   d42da:	4604      	mov	r4, r0
   d42dc:	f002 f866 	bl	d63ac <_ZN9TCPClientC1Ev>
{

}
   d42e0:	4620      	mov	r0, r4
   d42e2:	bd10      	pop	{r4, pc}

000d42e4 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d42e4:	b538      	push	{r3, r4, r5, lr}
   d42e6:	4604      	mov	r4, r0
   d42e8:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d42ea:	f001 f840 	bl	d536e <_ZN5Print5printEPKc>
    client.print(": ");
   d42ee:	4905      	ldr	r1, [pc, #20]	; (d4304 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d42f0:	4620      	mov	r0, r4
   d42f2:	f001 f83c 	bl	d536e <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d42f6:	4629      	mov	r1, r5
   d42f8:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d42fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d42fe:	f001 b84f 	b.w	d53a0 <_ZN5Print7printlnEPKc>
   d4302:	bf00      	nop
   d4304:	000d6ceb 	.word	0x000d6ceb

000d4308 <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d4308:	b538      	push	{r3, r4, r5, lr}
   d430a:	4604      	mov	r4, r0
   d430c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d430e:	f001 f82e 	bl	d536e <_ZN5Print5printEPKc>
    client.print(": ");
   d4312:	4905      	ldr	r1, [pc, #20]	; (d4328 <_ZN10HttpClient10sendHeaderEPKci+0x20>)
   d4314:	4620      	mov	r0, r4
   d4316:	f001 f82a 	bl	d536e <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d431a:	4629      	mov	r1, r5
   d431c:	4620      	mov	r0, r4
   d431e:	220a      	movs	r2, #10
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d4324:	f001 b8a1 	b.w	d546a <_ZN5Print7printlnEii>
   d4328:	000d6ceb 	.word	0x000d6ceb

000d432c <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d432c:	f000 b92c 	b.w	d4588 <HAL_Pin_Map>

000d4330 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4334:	460d      	mov	r5, r1
   d4336:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4338:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d433c:	b08f      	sub	sp, #60	; 0x3c
   d433e:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4340:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4342:	2100      	movs	r1, #0
   d4344:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4346:	4617      	mov	r7, r2
   d4348:	f000 ff97 	bl	d527a <_ZNK6String6equalsEPKc>
   d434c:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4350:	b960      	cbnz	r0, d436c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d4352:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4354:	f1b8 0f00 	cmp.w	r8, #0
   d4358:	d002      	beq.n	d4360 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d435a:	fa1f f288 	uxth.w	r2, r8
   d435e:	e000      	b.n	d4362 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d4360:	2250      	movs	r2, #80	; 0x50
   d4362:	2300      	movs	r3, #0
   d4364:	4620      	mov	r0, r4
   d4366:	f001 fdc7 	bl	d5ef8 <_ZN9TCPClient7connectEPKctm>
   d436a:	e014      	b.n	d4396 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>
   d436c:	4b74      	ldr	r3, [pc, #464]	; (d4540 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d436e:	9308      	str	r3, [sp, #32]
   d4370:	f105 0c14 	add.w	ip, r5, #20
   d4374:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4378:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   d437c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d4380:	f8dc 3000 	ldr.w	r3, [ip]
   d4384:	f88e 3000 	strb.w	r3, [lr]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4388:	fa1f f288 	uxth.w	r2, r8
   d438c:	2300      	movs	r3, #0
   d438e:	a908      	add	r1, sp, #32
   d4390:	4620      	mov	r0, r4
   d4392:	f001 fedb 	bl	d614c <_ZN9TCPClient7connectE9IPAddresstm>
   d4396:	3000      	adds	r0, #0
   d4398:	bf18      	it	ne
   d439a:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d439c:	b918      	cbnz	r0, d43a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d439e:	4620      	mov	r0, r4
   d43a0:	f001 ff51 	bl	d6246 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d43a4:	e0c8      	b.n	d4538 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d43a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d43a8:	4620      	mov	r0, r4
   d43aa:	f000 ffe0 	bl	d536e <_ZN5Print5printEPKc>
    client.print(" ");
   d43ae:	4965      	ldr	r1, [pc, #404]	; (d4544 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d43b0:	4620      	mov	r0, r4
   d43b2:	f000 ffdc 	bl	d536e <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d43b6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d43b8:	4620      	mov	r0, r4
   d43ba:	f000 ffd8 	bl	d536e <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d43be:	4962      	ldr	r1, [pc, #392]	; (d4548 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d43c0:	4620      	mov	r0, r4
   d43c2:	f000 ffd4 	bl	d536e <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d43c6:	4961      	ldr	r1, [pc, #388]	; (d454c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d43c8:	4a61      	ldr	r2, [pc, #388]	; (d4550 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
   d43ca:	4620      	mov	r0, r4
   d43cc:	f7ff ff8a 	bl	d42e4 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d43d0:	2100      	movs	r1, #0
   d43d2:	4628      	mov	r0, r5
   d43d4:	f000 ff51 	bl	d527a <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d43d8:	b920      	cbnz	r0, d43e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d43da:	682a      	ldr	r2, [r5, #0]
   d43dc:	495d      	ldr	r1, [pc, #372]	; (d4554 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
   d43de:	4620      	mov	r0, r4
   d43e0:	f7ff ff80 	bl	d42e4 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d43e4:	f105 083c 	add.w	r8, r5, #60	; 0x3c
   d43e8:	2100      	movs	r1, #0
   d43ea:	4640      	mov	r0, r8
   d43ec:	f000 ff45 	bl	d527a <_ZNK6String6equalsEPKc>
   d43f0:	b908      	cbnz	r0, d43f6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
   d43f2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d43f4:	e005      	b.n	d4402 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d43f6:	4958      	ldr	r1, [pc, #352]	; (d4558 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   d43f8:	9818      	ldr	r0, [sp, #96]	; 0x60
   d43fa:	f002 fabf 	bl	d697c <strcmp>
   d43fe:	4602      	mov	r2, r0
   d4400:	b918      	cbnz	r0, d440a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
   d4402:	4956      	ldr	r1, [pc, #344]	; (d455c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   d4404:	4620      	mov	r0, r4
   d4406:	f7ff ff7f 	bl	d4308 <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d440a:	b15e      	cbz	r6, d4424 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d440c:	6831      	ldr	r1, [r6, #0]
   d440e:	b149      	cbz	r1, d4424 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
   d4410:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4412:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d4414:	b112      	cbz	r2, d441c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
   d4416:	f7ff ff65 	bl	d42e4 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d441a:	e001      	b.n	d4420 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d441c:	f000 ffc0 	bl	d53a0 <_ZN5Print7printlnEPKc>
   d4420:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d4422:	e7f3      	b.n	d440c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d4424:	4620      	mov	r0, r4
   d4426:	f000 ffaf 	bl	d5388 <_ZN5Print7printlnEv>
    client.flush();
   d442a:	4620      	mov	r0, r4
   d442c:	f001 fd36 	bl	d5e9c <_ZN9TCPClient5flushEv>
   d4430:	2100      	movs	r1, #0
   d4432:	4640      	mov	r0, r8
   d4434:	f000 ff21 	bl	d527a <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d4438:	b918      	cbnz	r0, d4442 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
   d443a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d443c:	4620      	mov	r0, r4
   d443e:	f000 ffaf 	bl	d53a0 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d4442:	f104 081c 	add.w	r8, r4, #28
   d4446:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d444a:	2100      	movs	r1, #0
   d444c:	4640      	mov	r0, r8
   d444e:	f002 fa65 	bl	d691c <memset>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4452:	f000 f8e1 	bl	d4618 <HAL_Timer_Get_Milli_Seconds>
   d4456:	4681      	mov	r9, r0
   d4458:	f000 f8de 	bl	d4618 <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
   d445c:	2600      	movs	r6, #0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d445e:	4635      	mov	r5, r6
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
   d4460:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d4464:	4620      	mov	r0, r4
   d4466:	f001 ff05 	bl	d6274 <_ZN9TCPClient9availableEv>
   d446a:	b1d8      	cbz	r0, d44a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
   d446c:	4620      	mov	r0, r4
   d446e:	f001 fe22 	bl	d60b6 <_ZN9TCPClient4readEv>
   d4472:	4683      	mov	fp, r0
   d4474:	f000 f8d0 	bl	d4618 <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d4478:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d447c:	429d      	cmp	r5, r3
   d447e:	4681      	mov	r9, r0
   d4480:	d803      	bhi.n	d448a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
   d4482:	1963      	adds	r3, r4, r5
   d4484:	f883 b01c 	strb.w	fp, [r3, #28]
   d4488:	e00a      	b.n	d44a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d448a:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d448e:	429d      	cmp	r5, r3
   d4490:	d106      	bne.n	d44a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4492:	2300      	movs	r3, #0
   d4494:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d4498:	4620      	mov	r0, r4
   d449a:	f001 fed4 	bl	d6246 <_ZN9TCPClient4stopEv>
                error = true;
   d449e:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
   d44a0:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d44a2:	e7df      	b.n	d4464 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d44a4:	1963      	adds	r3, r4, r5
   d44a6:	7718      	strb	r0, [r3, #28]
   d44a8:	f000 f8b6 	bl	d4618 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
   d44ac:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d44b0:	b926      	cbnz	r6, d44bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d44b2:	45d3      	cmp	fp, sl
   d44b4:	d802      	bhi.n	d44bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
   d44b6:	20c8      	movs	r0, #200	; 0xc8
   d44b8:	f000 fff6 	bl	d54a8 <delay>
        }
    } while (client.connected() && !timeout && !error);
   d44bc:	4620      	mov	r0, r4
   d44be:	f001 fcee 	bl	d5e9e <_ZN9TCPClient9connectedEv>
   d44c2:	b118      	cbz	r0, d44cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d44c4:	45d3      	cmp	fp, sl
   d44c6:	d801      	bhi.n	d44cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d44c8:	2e00      	cmp	r6, #0
   d44ca:	d0cb      	beq.n	d4464 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d44cc:	4620      	mov	r0, r4
   d44ce:	f001 feba 	bl	d6246 <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
   d44d2:	4641      	mov	r1, r8
   d44d4:	4668      	mov	r0, sp
   d44d6:	f000 fe91 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
   d44da:	230c      	movs	r3, #12
   d44dc:	2209      	movs	r2, #9
   d44de:	4669      	mov	r1, sp
   d44e0:	a804      	add	r0, sp, #16
   d44e2:	f000 feef 	bl	d52c4 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d44e6:	491e      	ldr	r1, [pc, #120]	; (d4560 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d44e8:	a808      	add	r0, sp, #32
   d44ea:	f000 fe87 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>
   d44ee:	a908      	add	r1, sp, #32
   d44f0:	4668      	mov	r0, sp
   d44f2:	f000 fee3 	bl	d52bc <_ZNK6String7indexOfERKS_>
   d44f6:	4604      	mov	r4, r0
   d44f8:	a808      	add	r0, sp, #32
   d44fa:	f000 fe38 	bl	d516e <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d44fe:	1c63      	adds	r3, r4, #1
   d4500:	d014      	beq.n	d452c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
   d4502:	1d3d      	adds	r5, r7, #4
   d4504:	4917      	ldr	r1, [pc, #92]	; (d4564 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d4506:	4628      	mov	r0, r5
   d4508:	f000 fe8b 	bl	d5222 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d450c:	1d22      	adds	r2, r4, #4
   d450e:	4669      	mov	r1, sp
   d4510:	a808      	add	r0, sp, #32
   d4512:	f000 feff 	bl	d5314 <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4516:	a908      	add	r1, sp, #32
   d4518:	4628      	mov	r0, r5
   d451a:	f000 feaa 	bl	d5272 <_ZN6String6concatERKS_>
   d451e:	a808      	add	r0, sp, #32
   d4520:	f000 fe25 	bl	d516e <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d4524:	9804      	ldr	r0, [sp, #16]
   d4526:	f002 f9cd 	bl	d68c4 <atoi>
   d452a:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
   d452c:	a804      	add	r0, sp, #16
   d452e:	f000 fe1e 	bl	d516e <_ZN6StringD1Ev>
   d4532:	4668      	mov	r0, sp
   d4534:	f000 fe1b 	bl	d516e <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4538:	b00f      	add	sp, #60	; 0x3c
   d453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d453e:	bf00      	nop
   d4540:	000d6dd4 	.word	0x000d6dd4
   d4544:	000d6ce7 	.word	0x000d6ce7
   d4548:	000d6bdc 	.word	0x000d6bdc
   d454c:	000d6bee 	.word	0x000d6bee
   d4550:	000d6be8 	.word	0x000d6be8
   d4554:	000d6bf9 	.word	0x000d6bf9
   d4558:	000d6b5c 	.word	0x000d6b5c
   d455c:	000d6bfe 	.word	0x000d6bfe
   d4560:	000d6c0d 	.word	0x000d6c0d
   d4564:	000d6c11 	.word	0x000d6c11

000d4568 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <netdb_freeaddrinfo+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	689b      	ldr	r3, [r3, #8]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030268 	.word	0x00030268

000d4578 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <netdb_getaddrinfo+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	68db      	ldr	r3, [r3, #12]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030268 	.word	0x00030268

000d4588 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_Pin_Map+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	681b      	ldr	r3, [r3, #0]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	0003022c 	.word	0x0003022c

000d4598 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_SPI_Init+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	69db      	ldr	r3, [r3, #28]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030230 	.word	0x00030230

000d45a8 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <if_name_to_index+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	691b      	ldr	r3, [r3, #16]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	0003026c 	.word	0x0003026c

000d45b8 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <if_index_to_name+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	695b      	ldr	r3, [r3, #20]
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	0003026c 	.word	0x0003026c

000d45c8 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <if_get_by_index+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	699b      	ldr	r3, [r3, #24]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	0003026c 	.word	0x0003026c

000d45d8 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <if_get_addrs+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	0003026c 	.word	0x0003026c

000d45e8 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <if_free_if_addrs+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003026c 	.word	0x0003026c

000d45f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_RNG_GetRandomNumber+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	685b      	ldr	r3, [r3, #4]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	00030218 	.word	0x00030218

000d4608 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_Delay_Milliseconds+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	689b      	ldr	r3, [r3, #8]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	00030218 	.word	0x00030218

000d4618 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	695b      	ldr	r3, [r3, #20]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	00030218 	.word	0x00030218

000d4628 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <os_thread_create+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	685b      	ldr	r3, [r3, #4]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030248 	.word	0x00030248

000d4638 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <os_thread_is_current+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	689b      	ldr	r3, [r3, #8]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030248 	.word	0x00030248

000d4648 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <os_thread_yield+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	68db      	ldr	r3, [r3, #12]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030248 	.word	0x00030248

000d4658 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <os_thread_join+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	691b      	ldr	r3, [r3, #16]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030248 	.word	0x00030248

000d4668 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <os_thread_cleanup+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	695b      	ldr	r3, [r3, #20]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030248 	.word	0x00030248

000d4678 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <os_mutex_create+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030248 	.word	0x00030248

000d4688 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <os_mutex_recursive_create+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030248 	.word	0x00030248

000d4698 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <os_mutex_recursive_lock+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030248 	.word	0x00030248

000d46a8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <os_mutex_recursive_unlock+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030248 	.word	0x00030248

000d46b8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <os_thread_exit+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030248 	.word	0x00030248

000d46c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <inet_inet_ntop+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030264 	.word	0x00030264

000d46d8 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <inet_inet_pton+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	699b      	ldr	r3, [r3, #24]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030264 	.word	0x00030264

000d46e8 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <inet_htonl+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	6a1b      	ldr	r3, [r3, #32]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030264 	.word	0x00030264

000d46f8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <inet_ntohs+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030264 	.word	0x00030264

000d4708 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <inet_htons+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030264 	.word	0x00030264

000d4718 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <HAL_USART_Init+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	681b      	ldr	r3, [r3, #0]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003023c 	.word	0x0003023c

000d4728 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <HAL_USART_Write_Data+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	68db      	ldr	r3, [r3, #12]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003023c 	.word	0x0003023c

000d4738 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <HAL_USART_Available_Data+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	691b      	ldr	r3, [r3, #16]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003023c 	.word	0x0003023c

000d4748 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <HAL_USART_Read_Data+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	695b      	ldr	r3, [r3, #20]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003023c 	.word	0x0003023c

000d4758 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <HAL_USART_Peek_Data+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	699b      	ldr	r3, [r3, #24]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003023c 	.word	0x0003023c

000d4768 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <HAL_USART_Flush_Data+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	69db      	ldr	r3, [r3, #28]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003023c 	.word	0x0003023c

000d4778 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <HAL_USART_Available_Data_For_Write+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003023c 	.word	0x0003023c

000d4788 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <sock_bind+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	685b      	ldr	r3, [r3, #4]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	00030238 	.word	0x00030238

000d4798 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <sock_setsockopt+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	699b      	ldr	r3, [r3, #24]
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	00030238 	.word	0x00030238

000d47a8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <sock_close+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	69db      	ldr	r3, [r3, #28]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030238 	.word	0x00030238

000d47b8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <sock_connect+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	6a1b      	ldr	r3, [r3, #32]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030238 	.word	0x00030238

000d47c8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <sock_recv+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030238 	.word	0x00030238

000d47d8 <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <sock_recvfrom+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030238 	.word	0x00030238

000d47e8 <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <sock_send+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030238 	.word	0x00030238

000d47f8 <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <sock_sendto+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030238 	.word	0x00030238

000d4808 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <sock_socket+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030238 	.word	0x00030238

000d4818 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <HAL_USB_USART_Init+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	681b      	ldr	r3, [r3, #0]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	0003024c 	.word	0x0003024c

000d4828 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_USB_USART_Begin+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	685b      	ldr	r3, [r3, #4]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003024c 	.word	0x0003024c

000d4838 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_USB_USART_Available_Data+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	691b      	ldr	r3, [r3, #16]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003024c 	.word	0x0003024c

000d4848 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	695b      	ldr	r3, [r3, #20]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003024c 	.word	0x0003024c

000d4858 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USB_USART_Receive_Data+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	699b      	ldr	r3, [r3, #24]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003024c 	.word	0x0003024c

000d4868 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USB_USART_Send_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	69db      	ldr	r3, [r3, #28]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003024c 	.word	0x0003024c

000d4878 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USB_USART_Flush_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6a1b      	ldr	r3, [r3, #32]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003024c 	.word	0x0003024c

000d4888 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <log_message+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030260 	.word	0x00030260

000d4898 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <set_system_mode+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	685b      	ldr	r3, [r3, #4]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030220 	.word	0x00030220

000d48a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <system_delay_ms+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	695b      	ldr	r3, [r3, #20]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030220 	.word	0x00030220

000d48b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b03      	ldr	r3, [pc, #12]	; (d48c8 <system_ctrl_set_app_request_handler+0x10>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48c2:	9301      	str	r3, [sp, #4]
   d48c4:	bd08      	pop	{r3, pc}
   d48c6:	0000      	.short	0x0000
   d48c8:	00030220 	.word	0x00030220

000d48cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b03      	ldr	r3, [pc, #12]	; (d48dc <system_ctrl_set_result+0x10>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d48d6:	9301      	str	r3, [sp, #4]
   d48d8:	bd08      	pop	{r3, pc}
   d48da:	0000      	.short	0x0000
   d48dc:	00030220 	.word	0x00030220

000d48e0 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b03      	ldr	r3, [pc, #12]	; (d48f0 <system_invoke_event_handler+0x10>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d48ea:	9301      	str	r3, [sp, #4]
   d48ec:	bd08      	pop	{r3, pc}
   d48ee:	0000      	.short	0x0000
   d48f0:	00030220 	.word	0x00030220

000d48f4 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <network_config+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	681b      	ldr	r3, [r3, #0]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030240 	.word	0x00030240

000d4904 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <network_connect+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	685b      	ldr	r3, [r3, #4]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030240 	.word	0x00030240

000d4914 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <network_connecting+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	689b      	ldr	r3, [r3, #8]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030240 	.word	0x00030240

000d4924 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_disconnect+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	68db      	ldr	r3, [r3, #12]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_ready+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	691b      	ldr	r3, [r3, #16]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_on+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	695b      	ldr	r3, [r3, #20]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_off+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	699b      	ldr	r3, [r3, #24]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_listen+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	69db      	ldr	r3, [r3, #28]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_listening+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6a1b      	ldr	r3, [r3, #32]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_set_listen_timeout+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_get_listen_timeout+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <spark_deviceID+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	69db      	ldr	r3, [r3, #28]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030244 	.word	0x00030244

000d49b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030244 	.word	0x00030244

000d49c4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <malloc+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	681b      	ldr	r3, [r3, #0]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	0003021c 	.word	0x0003021c

000d49d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <free+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	685b      	ldr	r3, [r3, #4]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	0003021c 	.word	0x0003021c

000d49e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <realloc+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	689b      	ldr	r3, [r3, #8]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	0003021c 	.word	0x0003021c

000d49f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <abort+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	0003021c 	.word	0x0003021c

000d4a04 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <__errno+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	0003021c 	.word	0x0003021c

000d4a14 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a14:	2200      	movs	r2, #0
   d4a16:	4611      	mov	r1, r2
   d4a18:	6840      	ldr	r0, [r0, #4]
   d4a1a:	f7ff bfab 	b.w	d4974 <network_listening>

000d4a1e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4a1e:	2200      	movs	r2, #0
   d4a20:	4611      	mov	r1, r2
   d4a22:	6840      	ldr	r0, [r0, #4]
   d4a24:	f7ff bfb6 	b.w	d4994 <network_get_listen_timeout>

000d4a28 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4a28:	2200      	movs	r2, #0
   d4a2a:	6840      	ldr	r0, [r0, #4]
   d4a2c:	f7ff bfaa 	b.w	d4984 <network_set_listen_timeout>

000d4a30 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4a30:	2200      	movs	r2, #0
   d4a32:	f081 0101 	eor.w	r1, r1, #1
   d4a36:	6840      	ldr	r0, [r0, #4]
   d4a38:	f7ff bf94 	b.w	d4964 <network_listen>

000d4a3c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4a3c:	2300      	movs	r3, #0
   d4a3e:	461a      	mov	r2, r3
   d4a40:	4619      	mov	r1, r3
   d4a42:	6840      	ldr	r0, [r0, #4]
   d4a44:	f7ff bf86 	b.w	d4954 <network_off>

000d4a48 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4a48:	2300      	movs	r3, #0
   d4a4a:	461a      	mov	r2, r3
   d4a4c:	4619      	mov	r1, r3
   d4a4e:	6840      	ldr	r0, [r0, #4]
   d4a50:	f7ff bf78 	b.w	d4944 <network_on>

000d4a54 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4a54:	2200      	movs	r2, #0
   d4a56:	4611      	mov	r1, r2
   d4a58:	6840      	ldr	r0, [r0, #4]
   d4a5a:	f7ff bf6b 	b.w	d4934 <network_ready>

000d4a5e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4a5e:	2200      	movs	r2, #0
   d4a60:	4611      	mov	r1, r2
   d4a62:	6840      	ldr	r0, [r0, #4]
   d4a64:	f7ff bf56 	b.w	d4914 <network_connecting>

000d4a68 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4a68:	2200      	movs	r2, #0
   d4a6a:	2102      	movs	r1, #2
   d4a6c:	6840      	ldr	r0, [r0, #4]
   d4a6e:	f7ff bf59 	b.w	d4924 <network_disconnect>

000d4a72 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4a72:	2300      	movs	r3, #0
   d4a74:	461a      	mov	r2, r3
   d4a76:	6840      	ldr	r0, [r0, #4]
   d4a78:	f7ff bf44 	b.w	d4904 <network_connect>

000d4a7c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a7c:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a7e:	2203      	movs	r2, #3
   d4a80:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a82:	4a02      	ldr	r2, [pc, #8]	; (d4a8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a84:	601a      	str	r2, [r3, #0]
   d4a86:	4770      	bx	lr
   d4a88:	2003e3e4 	.word	0x2003e3e4
   d4a8c:	000d6c1c 	.word	0x000d6c1c

000d4a90 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4a90:	4770      	bx	lr

000d4a92 <_ZN8SPIClassD0Ev>:
   d4a92:	b510      	push	{r4, lr}
   d4a94:	4604      	mov	r4, r0
   d4a96:	f7ff fb02 	bl	d409e <_ZdlPv>
   d4a9a:	4620      	mov	r0, r4
   d4a9c:	bd10      	pop	{r4, pc}
	...

000d4aa0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4aa0:	b570      	push	{r4, r5, r6, lr}
   d4aa2:	4b08      	ldr	r3, [pc, #32]	; (d4ac4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4aa4:	6003      	str	r3, [r0, #0]
   d4aa6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4aa8:	2500      	movs	r5, #0
   d4aaa:	460e      	mov	r6, r1
   d4aac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4ab0:	f7ff fde2 	bl	d4678 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4ab4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4ab6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4ab8:	f7ff fd6e 	bl	d4598 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4abc:	60a5      	str	r5, [r4, #8]
}
   d4abe:	4620      	mov	r0, r4
   d4ac0:	bd70      	pop	{r4, r5, r6, pc}
   d4ac2:	bf00      	nop
   d4ac4:	000d6c50 	.word	0x000d6c50

000d4ac8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4ac8:	4b04      	ldr	r3, [pc, #16]	; (d4adc <_GLOBAL__sub_I_System+0x14>)
   d4aca:	2000      	movs	r0, #0
   d4acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4ad0:	7018      	strb	r0, [r3, #0]
   d4ad2:	8058      	strh	r0, [r3, #2]
   d4ad4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ad6:	f7ff bedf 	b.w	d4898 <set_system_mode>
   d4ada:	bf00      	nop
   d4adc:	2003e3ec 	.word	0x2003e3ec

000d4ae0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4ae0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4ae2:	6804      	ldr	r4, [r0, #0]
   d4ae4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4ae6:	46a4      	mov	ip, r4
    }
   d4ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4aec:	4760      	bx	ip

000d4aee <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4aee:	6803      	ldr	r3, [r0, #0]
   d4af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4af2:	4718      	bx	r3

000d4af4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4af4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4af6:	4770      	bx	lr

000d4af8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4af8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4afa:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4afc:	1a10      	subs	r0, r2, r0
   d4afe:	4770      	bx	lr

000d4b00 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4b00:	b513      	push	{r0, r1, r4, lr}
   d4b02:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4b04:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4b06:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4b0a:	68d4      	ldr	r4, [r2, #12]
   d4b0c:	4619      	mov	r1, r3
   d4b0e:	2201      	movs	r2, #1
   d4b10:	47a0      	blx	r4
}
   d4b12:	b002      	add	sp, #8
   d4b14:	bd10      	pop	{r4, pc}

000d4b16 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4b16:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4b18:	6803      	ldr	r3, [r0, #0]
   d4b1a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4b1c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4b1e:	4798      	blx	r3
   d4b20:	b128      	cbz	r0, d4b2e <_ZN3UDP4readEv+0x18>
   d4b22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4b24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4b26:	1c59      	adds	r1, r3, #1
   d4b28:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4b2a:	5cd0      	ldrb	r0, [r2, r3]
   d4b2c:	bd10      	pop	{r4, pc}
   d4b2e:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4b32:	bd10      	pop	{r4, pc}

000d4b34 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4b34:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4b36:	6803      	ldr	r3, [r0, #0]
   d4b38:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4b3a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4b3c:	4798      	blx	r3
   d4b3e:	b118      	cbz	r0, d4b48 <_ZN3UDP4peekEv+0x14>
   d4b40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4b42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4b44:	5cd0      	ldrb	r0, [r2, r3]
   d4b46:	bd10      	pop	{r4, pc}
   d4b48:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4b4c:	bd10      	pop	{r4, pc}

000d4b4e <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4b4e:	4770      	bx	lr

000d4b50 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4b50:	b410      	push	{r4}
   d4b52:	4603      	mov	r3, r0
   d4b54:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4b56:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4b58:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4b5a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4b5c:	6803      	ldr	r3, [r0, #0]
   d4b5e:	1a52      	subs	r2, r2, r1
   d4b60:	68db      	ldr	r3, [r3, #12]
   d4b62:	4421      	add	r1, r4
}
   d4b64:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4b68:	4718      	bx	r3

000d4b6a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4b6a:	f1a0 0010 	sub.w	r0, r0, #16
   d4b6e:	f7ff bfef 	b.w	d4b50 <_ZNK3UDP7printToER5Print>

000d4b72 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4b72:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4b74:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4b76:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4b78:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4b7c:	4604      	mov	r4, r0
   d4b7e:	460f      	mov	r7, r1
   d4b80:	4615      	mov	r5, r2
    stop();
   d4b82:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4b84:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4b86:	4632      	mov	r2, r6
   d4b88:	2100      	movs	r1, #0
   d4b8a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4b8c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4b8e:	f001 fec5 	bl	d691c <memset>
    saddr.sin6_len = sizeof(saddr);
   d4b92:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4b96:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4b98:	260a      	movs	r6, #10
   d4b9a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4b9e:	f7ff fdb3 	bl	d4708 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4ba2:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4ba4:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4ba8:	2102      	movs	r1, #2
   d4baa:	4630      	mov	r0, r6
   d4bac:	f7ff fe2c 	bl	d4808 <sock_socket>

    if (_sock < 0) {
   d4bb0:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4bb2:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4bb4:	db24      	blt.n	d4c00 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4bb6:	2204      	movs	r2, #4
   d4bb8:	9200      	str	r2, [sp, #0]
   d4bba:	ab02      	add	r3, sp, #8
   d4bbc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4bc0:	f7ff fdea 	bl	d4798 <sock_setsockopt>
   d4bc4:	b9e0      	cbnz	r0, d4c00 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4bc6:	b195      	cbz	r5, d4bee <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4bc8:	9003      	str	r0, [sp, #12]
   d4bca:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4bce:	a903      	add	r1, sp, #12
   d4bd0:	b2e8      	uxtb	r0, r5
   d4bd2:	f7ff fcf1 	bl	d45b8 <if_index_to_name>
   d4bd6:	b998      	cbnz	r0, d4c00 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4bd8:	2306      	movs	r3, #6
   d4bda:	9300      	str	r3, [sp, #0]
   d4bdc:	f241 020b 	movw	r2, #4107	; 0x100b
   d4be0:	ab03      	add	r3, sp, #12
   d4be2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4be6:	6960      	ldr	r0, [r4, #20]
   d4be8:	f7ff fdd6 	bl	d4798 <sock_setsockopt>
   d4bec:	b940      	cbnz	r0, d4c00 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4bee:	221c      	movs	r2, #28
   d4bf0:	a905      	add	r1, sp, #20
   d4bf2:	6960      	ldr	r0, [r4, #20]
   d4bf4:	f7ff fdc8 	bl	d4788 <sock_bind>
   d4bf8:	b910      	cbnz	r0, d4c00 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4bfa:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4bfc:	2001      	movs	r0, #1
   d4bfe:	e004      	b.n	d4c0a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4c00:	6823      	ldr	r3, [r4, #0]
   d4c02:	4620      	mov	r0, r4
   d4c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c06:	4798      	blx	r3
   d4c08:	2000      	movs	r0, #0
    }
    return bound;
}
   d4c0a:	b00d      	add	sp, #52	; 0x34
   d4c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c0e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4c0e:	b510      	push	{r4, lr}
   d4c10:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4c12:	6940      	ldr	r0, [r0, #20]
   d4c14:	2800      	cmp	r0, #0
   d4c16:	db01      	blt.n	d4c1c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4c18:	f7ff fdc6 	bl	d47a8 <sock_close>
    }

    _sock = -1;
   d4c1c:	f04f 33ff 	mov.w	r3, #4294967295
   d4c20:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4c22:	2300      	movs	r3, #0
   d4c24:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4c26:	8723      	strh	r3, [r4, #56]	; 0x38
   d4c28:	bd10      	pop	{r4, pc}

000d4c2a <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4c2a:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4c2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4c2e:	4605      	mov	r5, r0
   d4c30:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4c32:	b113      	cbz	r3, d4c3a <_ZN3UDP5writeEPKhj+0x10>
   d4c34:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4c36:	1a24      	subs	r4, r4, r0
   d4c38:	e000      	b.n	d4c3c <_ZN3UDP5writeEPKhj+0x12>
   d4c3a:	461c      	mov	r4, r3
   d4c3c:	4294      	cmp	r4, r2
   d4c3e:	bf28      	it	cs
   d4c40:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4c42:	4622      	mov	r2, r4
   d4c44:	4418      	add	r0, r3
   d4c46:	f001 fe5e 	bl	d6906 <memcpy>
    _offset += size;
   d4c4a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4c4c:	4423      	add	r3, r4
   d4c4e:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4c50:	4620      	mov	r0, r4
   d4c52:	bd38      	pop	{r3, r4, r5, pc}

000d4c54 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4c54:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4c56:	6803      	ldr	r3, [r0, #0]
   d4c58:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4c5a:	4604      	mov	r4, r0
   d4c5c:	460e      	mov	r6, r1
   d4c5e:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4c60:	4798      	blx	r3
   d4c62:	b188      	cbz	r0, d4c88 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4c64:	6823      	ldr	r3, [r4, #0]
   d4c66:	4620      	mov	r0, r4
   d4c68:	691b      	ldr	r3, [r3, #16]
   d4c6a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4c6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4c6e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4c70:	4285      	cmp	r5, r0
   d4c72:	bfa8      	it	ge
   d4c74:	4605      	movge	r5, r0
   d4c76:	4419      	add	r1, r3
   d4c78:	462a      	mov	r2, r5
   d4c7a:	4630      	mov	r0, r6
   d4c7c:	f001 fe43 	bl	d6906 <memcpy>
        _offset += read;
   d4c80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4c82:	442b      	add	r3, r5
   d4c84:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4c86:	e001      	b.n	d4c8c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4c88:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4c8c:	4628      	mov	r0, r5
   d4c8e:	bd70      	pop	{r4, r5, r6, pc}

000d4c90 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4c90:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4c92:	4604      	mov	r4, r0
   d4c94:	4b05      	ldr	r3, [pc, #20]	; (d4cac <_ZN3UDP8remoteIPEv+0x1c>)
   d4c96:	f844 3b04 	str.w	r3, [r4], #4
   d4c9a:	f101 0520 	add.w	r5, r1, #32
   d4c9e:	4606      	mov	r6, r0
   d4ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ca4:	682b      	ldr	r3, [r5, #0]
   d4ca6:	7023      	strb	r3, [r4, #0]
   d4ca8:	4630      	mov	r0, r6
   d4caa:	bd70      	pop	{r4, r5, r6, pc}
   d4cac:	000d6dd4 	.word	0x000d6dd4

000d4cb0 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cb2:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4cb4:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4cb6:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4cb8:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4cba:	4a0a      	ldr	r2, [pc, #40]	; (d4ce4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4cbc:	9202      	str	r2, [sp, #8]
   d4cbe:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4cc0:	468e      	mov	lr, r1
   d4cc2:	4606      	mov	r6, r0
   d4cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cc6:	ac03      	add	r4, sp, #12
   d4cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cca:	682b      	ldr	r3, [r5, #0]
   d4ccc:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4cce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4cd2:	9300      	str	r3, [sp, #0]
   d4cd4:	4662      	mov	r2, ip
   d4cd6:	ab02      	add	r3, sp, #8
   d4cd8:	4671      	mov	r1, lr
   d4cda:	4630      	mov	r0, r6
   d4cdc:	47b8      	blx	r7
    }
   d4cde:	b009      	add	sp, #36	; 0x24
   d4ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ce2:	bf00      	nop
   d4ce4:	000d6dd4 	.word	0x000d6dd4

000d4ce8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4cea:	6803      	ldr	r3, [r0, #0]
   d4cec:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4cf0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4cf2:	4b0d      	ldr	r3, [pc, #52]	; (d4d28 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4cf4:	b089      	sub	sp, #36	; 0x24
   d4cf6:	f100 0620 	add.w	r6, r0, #32
   d4cfa:	4604      	mov	r4, r0
   d4cfc:	9302      	str	r3, [sp, #8]
   d4cfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4d00:	ad03      	add	r5, sp, #12
   d4d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d04:	6833      	ldr	r3, [r6, #0]
   d4d06:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4d08:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4d0a:	9300      	str	r3, [sp, #0]
   d4d0c:	4672      	mov	r2, lr
   d4d0e:	ab02      	add	r3, sp, #8
   d4d10:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4d12:	4620      	mov	r0, r4
   d4d14:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4d16:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4d18:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4d1a:	69db      	ldr	r3, [r3, #28]
   d4d1c:	4620      	mov	r0, r4
   d4d1e:	4798      	blx	r3
    return result;
}
   d4d20:	4628      	mov	r0, r5
   d4d22:	b009      	add	sp, #36	; 0x24
   d4d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d26:	bf00      	nop
   d4d28:	000d6dd4 	.word	0x000d6dd4

000d4d2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d4d2e:	7843      	ldrb	r3, [r0, #1]
   d4d30:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4d32:	b08d      	sub	sp, #52	; 0x34
   d4d34:	4605      	mov	r5, r0
   d4d36:	460c      	mov	r4, r1
   d4d38:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d4d3a:	d101      	bne.n	d4d40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4d3c:	1d01      	adds	r1, r0, #4
   d4d3e:	e033      	b.n	d4da8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d4d40:	2b0a      	cmp	r3, #10
   d4d42:	d135      	bne.n	d4db0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d4d44:	2211      	movs	r2, #17
   d4d46:	2100      	movs	r1, #0
   d4d48:	a801      	add	r0, sp, #4
   d4d4a:	f001 fde7 	bl	d691c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d4d4e:	68ab      	ldr	r3, [r5, #8]
   d4d50:	b943      	cbnz	r3, d4d64 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4d52:	68eb      	ldr	r3, [r5, #12]
   d4d54:	b933      	cbnz	r3, d4d64 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4d56:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d4d5a:	692e      	ldr	r6, [r5, #16]
   d4d5c:	f7ff fcc4 	bl	d46e8 <inet_htonl>
   d4d60:	4286      	cmp	r6, r0
   d4d62:	d01f      	beq.n	d4da4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4d64:	f105 0308 	add.w	r3, r5, #8
   d4d68:	ae01      	add	r6, sp, #4
   d4d6a:	f105 0e18 	add.w	lr, r5, #24
   d4d6e:	6818      	ldr	r0, [r3, #0]
   d4d70:	6859      	ldr	r1, [r3, #4]
   d4d72:	4632      	mov	r2, r6
   d4d74:	c203      	stmia	r2!, {r0, r1}
   d4d76:	3308      	adds	r3, #8
   d4d78:	4573      	cmp	r3, lr
   d4d7a:	4616      	mov	r6, r2
   d4d7c:	d1f7      	bne.n	d4d6e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d4d7e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d4d80:	a901      	add	r1, sp, #4
   d4d82:	a806      	add	r0, sp, #24
   d4d84:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d4d86:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d4d8a:	f000 fc5f 	bl	d564c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4d8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4d90:	3404      	adds	r4, #4
   d4d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d94:	6833      	ldr	r3, [r6, #0]
   d4d96:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d4d98:	b157      	cbz	r7, d4db0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d4d9a:	8868      	ldrh	r0, [r5, #2]
   d4d9c:	f7ff fcac 	bl	d46f8 <inet_ntohs>
   d4da0:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d4da2:	e005      	b.n	d4db0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4da4:	f105 0114 	add.w	r1, r5, #20
   d4da8:	4620      	mov	r0, r4
   d4daa:	f000 fc91 	bl	d56d0 <_ZN9IPAddressaSEPKh>
   d4dae:	e7f3      	b.n	d4d98 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d4db0:	b00d      	add	sp, #52	; 0x34
   d4db2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4db4 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4db8:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d4dba:	ab0e      	add	r3, sp, #56	; 0x38
   d4dbc:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4dbe:	4606      	mov	r6, r0
   d4dc0:	4617      	mov	r7, r2
   d4dc2:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d4dc4:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d4dc8:	462a      	mov	r2, r5
   d4dca:	4629      	mov	r1, r5
   d4dcc:	f7ff fbd4 	bl	d4578 <netdb_getaddrinfo>
   d4dd0:	2800      	cmp	r0, #0
   d4dd2:	db1f      	blt.n	d4e14 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d4dd4:	9b01      	ldr	r3, [sp, #4]
   d4dd6:	b1fb      	cbz	r3, d4e18 <_ZN3UDP11beginPacketEPKct+0x64>
   d4dd8:	695b      	ldr	r3, [r3, #20]
   d4dda:	b1eb      	cbz	r3, d4e18 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d4ddc:	a802      	add	r0, sp, #8
   d4dde:	f000 fc27 	bl	d5630 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4de2:	9b01      	ldr	r3, [sp, #4]
   d4de4:	462a      	mov	r2, r5
   d4de6:	6958      	ldr	r0, [r3, #20]
   d4de8:	a902      	add	r1, sp, #8
   d4dea:	f7ff ff9f 	bl	d4d2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d4dee:	a802      	add	r0, sp, #8
   d4df0:	f000 fc3e 	bl	d5670 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d4df4:	b180      	cbz	r0, d4e18 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d4df6:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4df8:	ad03      	add	r5, sp, #12
   d4dfa:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4dfe:	4b0b      	ldr	r3, [pc, #44]	; (d4e2c <_ZN3UDP11beginPacketEPKct+0x78>)
   d4e00:	9308      	str	r3, [sp, #32]
   d4e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e04:	ac09      	add	r4, sp, #36	; 0x24
   d4e06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e08:	682b      	ldr	r3, [r5, #0]
   d4e0a:	7023      	strb	r3, [r4, #0]
   d4e0c:	463a      	mov	r2, r7
   d4e0e:	a908      	add	r1, sp, #32
   d4e10:	4630      	mov	r0, r6
   d4e12:	47c0      	blx	r8
   d4e14:	4604      	mov	r4, r0
   d4e16:	e001      	b.n	d4e1c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d4e18:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d4e1c:	9801      	ldr	r0, [sp, #4]
   d4e1e:	f7ff fba3 	bl	d4568 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d4e22:	4620      	mov	r0, r4
   d4e24:	b00e      	add	sp, #56	; 0x38
   d4e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e2a:	bf00      	nop
   d4e2c:	000d6dd4 	.word	0x000d6dd4

000d4e30 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4e34:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d4e38:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4e3c:	b08c      	sub	sp, #48	; 0x30
   d4e3e:	4605      	mov	r5, r0
   d4e40:	460c      	mov	r4, r1
   d4e42:	4617      	mov	r7, r2
   d4e44:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4e46:	db00      	blt.n	d4e4a <_ZN3UDP13receivePacketEPhjm+0x1a>
   d4e48:	b911      	cbnz	r1, d4e50 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d4e4a:	f04f 30ff 	mov.w	r0, #4294967295
   d4e4e:	e035      	b.n	d4ebc <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d4e50:	f04f 0a1c 	mov.w	sl, #28
   d4e54:	ae05      	add	r6, sp, #20
   d4e56:	4652      	mov	r2, sl
   d4e58:	2100      	movs	r1, #0
   d4e5a:	4630      	mov	r0, r6
   d4e5c:	f001 fd5e 	bl	d691c <memset>
        socklen_t slen = sizeof(saddr);
   d4e60:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d4e64:	f1b9 0f00 	cmp.w	r9, #0
   d4e68:	d014      	beq.n	d4e94 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d4e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4e6e:	fbb9 f1f2 	udiv	r1, r9, r2
   d4e72:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d4e74:	fb02 9111 	mls	r1, r2, r1, r9
   d4e78:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4e7a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d4e7c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4e7e:	9300      	str	r3, [sp, #0]
   d4e80:	f241 0206 	movw	r2, #4102	; 0x1006
   d4e84:	ab03      	add	r3, sp, #12
   d4e86:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4e8a:	4640      	mov	r0, r8
   d4e8c:	f7ff fc84 	bl	d4798 <sock_setsockopt>
            if (ret) {
   d4e90:	b108      	cbz	r0, d4e96 <_ZN3UDP13receivePacketEPhjm+0x66>
   d4e92:	e013      	b.n	d4ebc <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d4e94:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4e96:	ab02      	add	r3, sp, #8
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	4621      	mov	r1, r4
   d4e9c:	4603      	mov	r3, r0
   d4e9e:	9600      	str	r6, [sp, #0]
   d4ea0:	463a      	mov	r2, r7
   d4ea2:	6968      	ldr	r0, [r5, #20]
   d4ea4:	f7ff fc98 	bl	d47d8 <sock_recvfrom>
        if (ret >= 0) {
   d4ea8:	1e04      	subs	r4, r0, #0
   d4eaa:	db06      	blt.n	d4eba <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d4eac:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d4eb0:	f105 011c 	add.w	r1, r5, #28
   d4eb4:	4630      	mov	r0, r6
   d4eb6:	f7ff ff39 	bl	d4d2c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4eba:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d4ebc:	b00c      	add	sp, #48	; 0x30
   d4ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4ec2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4ec2:	b538      	push	{r3, r4, r5, lr}
   d4ec4:	4605      	mov	r5, r0
   d4ec6:	4614      	mov	r4, r2
   d4ec8:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d4eca:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4ecc:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d4ece:	d111      	bne.n	d4ef4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d4ed0:	231c      	movs	r3, #28
   d4ed2:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d4ed4:	230a      	movs	r3, #10
   d4ed6:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d4ed8:	f7ff fc16 	bl	d4708 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4edc:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d4ede:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4ee2:	1d2b      	adds	r3, r5, #4
   d4ee4:	3514      	adds	r5, #20
   d4ee6:	f853 2b04 	ldr.w	r2, [r3], #4
   d4eea:	f844 2b04 	str.w	r2, [r4], #4
   d4eee:	42ab      	cmp	r3, r5
   d4ef0:	d1f9      	bne.n	d4ee6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d4ef2:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d4ef4:	2b04      	cmp	r3, #4
   d4ef6:	d10a      	bne.n	d4f0e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d4ef8:	2310      	movs	r3, #16
   d4efa:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d4efc:	2302      	movs	r3, #2
   d4efe:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d4f00:	f7ff fc02 	bl	d4708 <inet_htons>
   d4f04:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d4f06:	6868      	ldr	r0, [r5, #4]
   d4f08:	f7ff fbee 	bl	d46e8 <inet_htonl>
   d4f0c:	6060      	str	r0, [r4, #4]
   d4f0e:	bd38      	pop	{r3, r4, r5, pc}

000d4f10 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4f14:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4f16:	ac03      	add	r4, sp, #12
   d4f18:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4f1a:	4699      	mov	r9, r3
   d4f1c:	4606      	mov	r6, r0
   d4f1e:	460f      	mov	r7, r1
   d4f20:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4f22:	2100      	movs	r1, #0
   d4f24:	462a      	mov	r2, r5
   d4f26:	4620      	mov	r0, r4
   d4f28:	f001 fcf8 	bl	d691c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d4f2c:	4622      	mov	r2, r4
   d4f2e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d4f32:	4648      	mov	r0, r9
   d4f34:	f7ff ffc5 	bl	d4ec2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d4f38:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4f3c:	b143      	cbz	r3, d4f50 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d4f3e:	e88d 0030 	stmia.w	sp, {r4, r5}
   d4f42:	2300      	movs	r3, #0
   d4f44:	4642      	mov	r2, r8
   d4f46:	4639      	mov	r1, r7
   d4f48:	6970      	ldr	r0, [r6, #20]
   d4f4a:	f7ff fc55 	bl	d47f8 <sock_sendto>
   d4f4e:	e001      	b.n	d4f54 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d4f50:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d4f54:	b00b      	add	sp, #44	; 0x2c
   d4f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f5a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f5c:	b091      	sub	sp, #68	; 0x44
   d4f5e:	460c      	mov	r4, r1
   d4f60:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d4f62:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4f64:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d4f66:	a809      	add	r0, sp, #36	; 0x24
   d4f68:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d4f6a:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d4f6c:	f001 fcd6 	bl	d691c <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d4f70:	aa09      	add	r2, sp, #36	; 0x24
   d4f72:	2100      	movs	r1, #0
   d4f74:	4620      	mov	r0, r4
   d4f76:	f7ff ffa4 	bl	d4ec2 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d4f7a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d4f7e:	2b02      	cmp	r3, #2
   d4f80:	d12e      	bne.n	d4fe0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d4f82:	2300      	movs	r3, #0
   d4f84:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d4f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4f88:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d4f8a:	b1dd      	cbz	r5, d4fc4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d4f8c:	a902      	add	r1, sp, #8
   d4f8e:	4628      	mov	r0, r5
   d4f90:	f7ff fb1a 	bl	d45c8 <if_get_by_index>
   d4f94:	b9b0      	cbnz	r0, d4fc4 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d4f96:	a910      	add	r1, sp, #64	; 0x40
   d4f98:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d4f9c:	9802      	ldr	r0, [sp, #8]
   d4f9e:	f7ff fb1b 	bl	d45d8 <if_get_addrs>
   d4fa2:	b960      	cbnz	r0, d4fbe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4fa4:	9b03      	ldr	r3, [sp, #12]
   d4fa6:	b153      	cbz	r3, d4fbe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d4fa8:	68da      	ldr	r2, [r3, #12]
   d4faa:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d4fac:	7851      	ldrb	r1, [r2, #1]
   d4fae:	2902      	cmp	r1, #2
   d4fb0:	d103      	bne.n	d4fba <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d4fb2:	6852      	ldr	r2, [r2, #4]
   d4fb4:	b10a      	cbz	r2, d4fba <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d4fb6:	9205      	str	r2, [sp, #20]
   d4fb8:	e001      	b.n	d4fbe <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d4fba:	681b      	ldr	r3, [r3, #0]
   d4fbc:	e7f3      	b.n	d4fa6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d4fbe:	9803      	ldr	r0, [sp, #12]
   d4fc0:	f7ff fb12 	bl	d45e8 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d4fc4:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d4fc6:	f04f 0308 	mov.w	r3, #8
   d4fca:	9300      	str	r3, [sp, #0]
   d4fcc:	bf18      	it	ne
   d4fce:	2203      	movne	r2, #3
   d4fd0:	ab04      	add	r3, sp, #16
   d4fd2:	bf08      	it	eq
   d4fd4:	2204      	moveq	r2, #4
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	4630      	mov	r0, r6
   d4fda:	f7ff fbdd 	bl	d4798 <sock_setsockopt>
   d4fde:	e01e      	b.n	d501e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d4fe0:	2b0a      	cmp	r3, #10
   d4fe2:	d11a      	bne.n	d501a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d4fe4:	ac04      	add	r4, sp, #16
   d4fe6:	2214      	movs	r2, #20
   d4fe8:	2100      	movs	r1, #0
   d4fea:	4620      	mov	r0, r4
   d4fec:	f001 fc96 	bl	d691c <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4ff0:	ab0b      	add	r3, sp, #44	; 0x2c
   d4ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4ff4:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d4ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d4ffa:	f04f 0314 	mov.w	r3, #20
   d4ffe:	9300      	str	r3, [sp, #0]
   d5000:	bf18      	it	ne
   d5002:	220c      	movne	r2, #12
   d5004:	4623      	mov	r3, r4
   d5006:	bf08      	it	eq
   d5008:	220d      	moveq	r2, #13
   d500a:	2129      	movs	r1, #41	; 0x29
   d500c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d500e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5010:	f7ff fbc2 	bl	d4798 <sock_setsockopt>
   d5014:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5018:	e001      	b.n	d501e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d501a:	f04f 30ff 	mov.w	r0, #4294967295
}
   d501e:	b011      	add	sp, #68	; 0x44
   d5020:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5024 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5024:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d502a:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d502c:	4b0b      	ldr	r3, [pc, #44]	; (d505c <_ZN3UDPC1Ev+0x38>)
   d502e:	f103 0208 	add.w	r2, r3, #8
   d5032:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5034:	2500      	movs	r5, #0
   d5036:	6103      	str	r3, [r0, #16]
   d5038:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d503c:	4604      	mov	r4, r0
   d503e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5040:	6002      	str	r2, [r0, #0]
   d5042:	6143      	str	r3, [r0, #20]
   d5044:	301c      	adds	r0, #28
   d5046:	f000 faf3 	bl	d5630 <_ZN9IPAddressC1Ev>
   d504a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d504e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5050:	8725      	strh	r5, [r4, #56]	; 0x38
   d5052:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5054:	6423      	str	r3, [r4, #64]	; 0x40
   d5056:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5058:	4620      	mov	r0, r4
   d505a:	bd38      	pop	{r3, r4, r5, pc}
   d505c:	000d6c58 	.word	0x000d6c58

000d5060 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5060:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5062:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5066:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5068:	b11b      	cbz	r3, d5072 <_ZN3UDP13releaseBufferEv+0x12>
   d506a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d506c:	b108      	cbz	r0, d5072 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d506e:	f7ff f816 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d5072:	2300      	movs	r3, #0
   d5074:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5076:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d507a:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d507c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d507e:	8723      	strh	r3, [r4, #56]	; 0x38
   d5080:	bd10      	pop	{r4, pc}

000d5082 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5082:	b570      	push	{r4, r5, r6, lr}
   d5084:	4604      	mov	r4, r0
   d5086:	4616      	mov	r6, r2
   d5088:	460d      	mov	r5, r1
    releaseBuffer();
   d508a:	f7ff ffe9 	bl	d5060 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d508e:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5090:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5092:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5094:	b93e      	cbnz	r6, d50a6 <_ZN3UDP9setBufferEjPh+0x24>
   d5096:	b135      	cbz	r5, d50a6 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d5098:	4628      	mov	r0, r5
   d509a:	f7fe fffe 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d509e:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d50a0:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d50a2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d50a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d50a8:	b103      	cbz	r3, d50ac <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d50aa:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d50ac:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d50ae:	3000      	adds	r0, #0
   d50b0:	bf18      	it	ne
   d50b2:	2001      	movne	r0, #1
   d50b4:	bd70      	pop	{r4, r5, r6, pc}

000d50b6 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d50b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50b8:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d50ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d50bc:	4605      	mov	r5, r0
   d50be:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d50c0:	b91a      	cbnz	r2, d50ca <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d50c2:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d50c4:	b109      	cbz	r1, d50ca <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d50c6:	f7ff ffdc 	bl	d5082 <_ZN3UDP9setBufferEjPh>
   d50ca:	3404      	adds	r4, #4
   d50cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d50ce:	f105 0620 	add.w	r6, r5, #32
   d50d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d50d4:	6823      	ldr	r3, [r4, #0]
   d50d6:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d50d8:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d50da:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d50dc:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d50de:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d50e0:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d50e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50e4 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d50e4:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d50e6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d50e8:	4604      	mov	r4, r0
   d50ea:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d50ec:	b91a      	cbnz	r2, d50f6 <_ZN3UDP11parsePacketEm+0x12>
   d50ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d50f0:	b109      	cbz	r1, d50f6 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d50f2:	f7ff ffc6 	bl	d5082 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d50f6:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d50f8:	2200      	movs	r2, #0
   d50fa:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d50fc:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d50fe:	b149      	cbz	r1, d5114 <_ZN3UDP11parsePacketEm+0x30>
   d5100:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d5102:	b13a      	cbz	r2, d5114 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d5104:	6823      	ldr	r3, [r4, #0]
   d5106:	4620      	mov	r0, r4
   d5108:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d510a:	4633      	mov	r3, r6
   d510c:	47a8      	blx	r5
        if (result > 0) {
   d510e:	2800      	cmp	r0, #0
            _total = result;
   d5110:	bfc8      	it	gt
   d5112:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d5114:	6823      	ldr	r3, [r4, #0]
   d5116:	4620      	mov	r0, r4
   d5118:	691b      	ldr	r3, [r3, #16]
}
   d511a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d511e:	4718      	bx	r3

000d5120 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d5120:	b510      	push	{r4, lr}
   d5122:	4b07      	ldr	r3, [pc, #28]	; (d5140 <_ZN3UDPD1Ev+0x20>)
   d5124:	f103 0208 	add.w	r2, r3, #8
   d5128:	336c      	adds	r3, #108	; 0x6c
   d512a:	4604      	mov	r4, r0
   d512c:	6002      	str	r2, [r0, #0]
   d512e:	6103      	str	r3, [r0, #16]
   d5130:	f7ff fd6d 	bl	d4c0e <_ZN3UDP4stopEv>
   d5134:	4620      	mov	r0, r4
   d5136:	f7ff ff93 	bl	d5060 <_ZN3UDP13releaseBufferEv>
   d513a:	4620      	mov	r0, r4
   d513c:	bd10      	pop	{r4, pc}
   d513e:	bf00      	nop
   d5140:	000d6c58 	.word	0x000d6c58

000d5144 <_ZN3UDPD0Ev>:
   d5144:	b510      	push	{r4, lr}
   d5146:	4604      	mov	r4, r0
   d5148:	f7ff ffea 	bl	d5120 <_ZN3UDPD1Ev>
   d514c:	4620      	mov	r0, r4
   d514e:	f7fe ffa6 	bl	d409e <_ZdlPv>
   d5152:	4620      	mov	r0, r4
   d5154:	bd10      	pop	{r4, pc}

000d5156 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d5156:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d5158:	6940      	ldr	r0, [r0, #20]
   d515a:	2800      	cmp	r0, #0
   d515c:	db04      	blt.n	d5168 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d515e:	2301      	movs	r3, #1
   d5160:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d5164:	f7ff bef9 	b.w	d4f5a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d5168:	f04f 30ff 	mov.w	r0, #4294967295
   d516c:	4770      	bx	lr

000d516e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d516e:	b510      	push	{r4, lr}
   d5170:	4604      	mov	r4, r0
{
	free(buffer);
   d5172:	6800      	ldr	r0, [r0, #0]
   d5174:	f7ff fc2e 	bl	d49d4 <free>
}
   d5178:	4620      	mov	r0, r4
   d517a:	bd10      	pop	{r4, pc}

000d517c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d517c:	b510      	push	{r4, lr}
   d517e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5180:	6800      	ldr	r0, [r0, #0]
   d5182:	b108      	cbz	r0, d5188 <_ZN6String10invalidateEv+0xc>
   d5184:	f7ff fc26 	bl	d49d4 <free>
	buffer = NULL;
   d5188:	2300      	movs	r3, #0
   d518a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d518c:	60a3      	str	r3, [r4, #8]
   d518e:	6063      	str	r3, [r4, #4]
   d5190:	bd10      	pop	{r4, pc}

000d5192 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5192:	b538      	push	{r3, r4, r5, lr}
   d5194:	4604      	mov	r4, r0
   d5196:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5198:	6800      	ldr	r0, [r0, #0]
   d519a:	3101      	adds	r1, #1
   d519c:	f7ff fc22 	bl	d49e4 <realloc>
	if (newbuffer) {
   d51a0:	b110      	cbz	r0, d51a8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d51a2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d51a6:	2001      	movs	r0, #1
	}
	return 0;
}
   d51a8:	bd38      	pop	{r3, r4, r5, pc}

000d51aa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d51aa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d51ac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d51ae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d51b0:	b113      	cbz	r3, d51b8 <_ZN6String7reserveEj+0xe>
   d51b2:	6843      	ldr	r3, [r0, #4]
   d51b4:	428b      	cmp	r3, r1
   d51b6:	d207      	bcs.n	d51c8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d51b8:	4620      	mov	r0, r4
   d51ba:	f7ff ffea 	bl	d5192 <_ZN6String12changeBufferEj>
   d51be:	b120      	cbz	r0, d51ca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d51c0:	68a3      	ldr	r3, [r4, #8]
   d51c2:	b90b      	cbnz	r3, d51c8 <_ZN6String7reserveEj+0x1e>
   d51c4:	6822      	ldr	r2, [r4, #0]
   d51c6:	7013      	strb	r3, [r2, #0]
   d51c8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d51ca:	bd10      	pop	{r4, pc}

000d51cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d51cc:	b570      	push	{r4, r5, r6, lr}
   d51ce:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d51d0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d51d2:	4604      	mov	r4, r0
   d51d4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d51d6:	f7ff ffe8 	bl	d51aa <_ZN6String7reserveEj>
   d51da:	b918      	cbnz	r0, d51e4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d51dc:	4620      	mov	r0, r4
   d51de:	f7ff ffcd 	bl	d517c <_ZN6String10invalidateEv>
		return *this;
   d51e2:	e009      	b.n	d51f8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d51e4:	462a      	mov	r2, r5
   d51e6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d51e8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d51ea:	6820      	ldr	r0, [r4, #0]
   d51ec:	f001 fb8b 	bl	d6906 <memcpy>
	buffer[len] = 0;
   d51f0:	6822      	ldr	r2, [r4, #0]
   d51f2:	68a3      	ldr	r3, [r4, #8]
   d51f4:	2100      	movs	r1, #0
   d51f6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d51f8:	4620      	mov	r0, r4
   d51fa:	bd70      	pop	{r4, r5, r6, pc}

000d51fc <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d51fc:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d51fe:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5200:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5202:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5204:	6043      	str	r3, [r0, #4]
	len = 0;
   d5206:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5208:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d520a:	460d      	mov	r5, r1
   d520c:	b139      	cbz	r1, d521e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d520e:	4608      	mov	r0, r1
   d5210:	f001 fbc6 	bl	d69a0 <strlen>
   d5214:	4629      	mov	r1, r5
   d5216:	4602      	mov	r2, r0
   d5218:	4620      	mov	r0, r4
   d521a:	f7ff ffd7 	bl	d51cc <_ZN6String4copyEPKcj>
}
   d521e:	4620      	mov	r0, r4
   d5220:	bd38      	pop	{r3, r4, r5, pc}

000d5222 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5222:	b538      	push	{r3, r4, r5, lr}
   d5224:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5226:	460c      	mov	r4, r1
   d5228:	b141      	cbz	r1, d523c <_ZN6StringaSEPKc+0x1a>
   d522a:	4608      	mov	r0, r1
   d522c:	f001 fbb8 	bl	d69a0 <strlen>
   d5230:	4621      	mov	r1, r4
   d5232:	4602      	mov	r2, r0
   d5234:	4628      	mov	r0, r5
   d5236:	f7ff ffc9 	bl	d51cc <_ZN6String4copyEPKcj>
   d523a:	e001      	b.n	d5240 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d523c:	f7ff ff9e 	bl	d517c <_ZN6String10invalidateEv>

	return *this;
}
   d5240:	4628      	mov	r0, r5
   d5242:	bd38      	pop	{r3, r4, r5, pc}

000d5244 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5244:	b570      	push	{r4, r5, r6, lr}
   d5246:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5248:	460e      	mov	r6, r1
   d524a:	b909      	cbnz	r1, d5250 <_ZN6String6concatEPKcj+0xc>
   d524c:	2000      	movs	r0, #0
   d524e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5250:	b16a      	cbz	r2, d526e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5252:	6883      	ldr	r3, [r0, #8]
   d5254:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5256:	4629      	mov	r1, r5
   d5258:	f7ff ffa7 	bl	d51aa <_ZN6String7reserveEj>
   d525c:	2800      	cmp	r0, #0
   d525e:	d0f5      	beq.n	d524c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5260:	6820      	ldr	r0, [r4, #0]
   d5262:	68a3      	ldr	r3, [r4, #8]
   d5264:	4631      	mov	r1, r6
   d5266:	4418      	add	r0, r3
   d5268:	f001 fb92 	bl	d6990 <strcpy>
	len = newlen;
   d526c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d526e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5270:	bd70      	pop	{r4, r5, r6, pc}

000d5272 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d5272:	688a      	ldr	r2, [r1, #8]
   d5274:	6809      	ldr	r1, [r1, #0]
   d5276:	f7ff bfe5 	b.w	d5244 <_ZN6String6concatEPKcj>

000d527a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d527a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d527c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d527e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5280:	b912      	cbnz	r2, d5288 <_ZNK6String6equalsEPKc+0xe>
   d5282:	b919      	cbnz	r1, d528c <_ZNK6String6equalsEPKc+0x12>
   d5284:	2001      	movs	r0, #1
   d5286:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5288:	b911      	cbnz	r1, d5290 <_ZNK6String6equalsEPKc+0x16>
   d528a:	6803      	ldr	r3, [r0, #0]
   d528c:	7818      	ldrb	r0, [r3, #0]
   d528e:	e002      	b.n	d5296 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5290:	6800      	ldr	r0, [r0, #0]
   d5292:	f001 fb73 	bl	d697c <strcmp>
   d5296:	fab0 f080 	clz	r0, r0
   d529a:	0940      	lsrs	r0, r0, #5
}
   d529c:	bd08      	pop	{r3, pc}

000d529e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d529e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d52a0:	6883      	ldr	r3, [r0, #8]
   d52a2:	4293      	cmp	r3, r2
   d52a4:	d907      	bls.n	d52b6 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d52a6:	6804      	ldr	r4, [r0, #0]
   d52a8:	6809      	ldr	r1, [r1, #0]
   d52aa:	18a0      	adds	r0, r4, r2
   d52ac:	f001 fba1 	bl	d69f2 <strstr>
	if (found == NULL) return -1;
   d52b0:	b108      	cbz	r0, d52b6 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d52b2:	1b00      	subs	r0, r0, r4
   d52b4:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d52b6:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d52ba:	bd10      	pop	{r4, pc}

000d52bc <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d52bc:	2200      	movs	r2, #0
   d52be:	f7ff bfee 	b.w	d529e <_ZNK6String7indexOfERKS_j>
	...

000d52c4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d52c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d52c8:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d52ca:	460e      	mov	r6, r1
   d52cc:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d52ce:	4910      	ldr	r1, [pc, #64]	; (d5310 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d52d0:	bf88      	it	hi
   d52d2:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d52d4:	4615      	mov	r5, r2
   d52d6:	4607      	mov	r7, r0
	if (left > right) {
   d52d8:	bf84      	itt	hi
   d52da:	4625      	movhi	r5, r4
   d52dc:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d52de:	f7ff ff8d 	bl	d51fc <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d52e2:	68b1      	ldr	r1, [r6, #8]
   d52e4:	428d      	cmp	r5, r1
   d52e6:	d80f      	bhi.n	d5308 <_ZNK6String9substringEjj+0x44>
   d52e8:	428c      	cmp	r4, r1
   d52ea:	bf28      	it	cs
   d52ec:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d52ee:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d52f0:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d52f2:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d52f6:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d52f8:	6831      	ldr	r1, [r6, #0]
   d52fa:	4638      	mov	r0, r7
   d52fc:	4429      	add	r1, r5
   d52fe:	f7ff ff90 	bl	d5222 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d5302:	6833      	ldr	r3, [r6, #0]
   d5304:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d5308:	4638      	mov	r0, r7
   d530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d530e:	bf00      	nop
   d5310:	000d6c11 	.word	0x000d6c11

000d5314 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d5314:	b510      	push	{r4, lr}
   d5316:	4604      	mov	r4, r0
	return substring(left, len);
   d5318:	688b      	ldr	r3, [r1, #8]
   d531a:	f7ff ffd3 	bl	d52c4 <_ZNK6String9substringEjj>
}
   d531e:	4620      	mov	r0, r4
   d5320:	bd10      	pop	{r4, pc}

000d5322 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5324:	4606      	mov	r6, r0
   d5326:	460d      	mov	r5, r1
   d5328:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d532a:	2400      	movs	r4, #0
  while (size--) {
   d532c:	42bd      	cmp	r5, r7
   d532e:	d00c      	beq.n	d534a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5330:	6833      	ldr	r3, [r6, #0]
   d5332:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5336:	689b      	ldr	r3, [r3, #8]
   d5338:	4630      	mov	r0, r6
   d533a:	4798      	blx	r3
     if (chunk>=0)
   d533c:	2800      	cmp	r0, #0
   d533e:	db01      	blt.n	d5344 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5340:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5342:	e7f3      	b.n	d532c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5344:	2c00      	cmp	r4, #0
   d5346:	bf08      	it	eq
   d5348:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d534a:	4620      	mov	r0, r4
   d534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d534e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d534e:	b570      	push	{r4, r5, r6, lr}
   d5350:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5352:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5354:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5356:	b149      	cbz	r1, d536c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5358:	f001 fb22 	bl	d69a0 <strlen>
   d535c:	682b      	ldr	r3, [r5, #0]
   d535e:	4602      	mov	r2, r0
   d5360:	4621      	mov	r1, r4
   d5362:	4628      	mov	r0, r5
   d5364:	68db      	ldr	r3, [r3, #12]
    }
   d5366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d536a:	4718      	bx	r3
    }
   d536c:	bd70      	pop	{r4, r5, r6, pc}

000d536e <_ZN5Print5printEPKc>:
   d536e:	b508      	push	{r3, lr}
   d5370:	f7ff ffed 	bl	d534e <_ZN5Print5writeEPKc>
   d5374:	bd08      	pop	{r3, pc}

000d5376 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5376:	6803      	ldr	r3, [r0, #0]
   d5378:	689b      	ldr	r3, [r3, #8]
   d537a:	4718      	bx	r3

000d537c <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d537c:	680a      	ldr	r2, [r1, #0]
{
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   d537e:	460b      	mov	r3, r1
   return x.printTo(*this);
   d5380:	6812      	ldr	r2, [r2, #0]
   d5382:	4601      	mov	r1, r0
   d5384:	4618      	mov	r0, r3
   d5386:	4710      	bx	r2

000d5388 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5388:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d538a:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d538c:	4605      	mov	r5, r0
  size_t n = print('\r');
   d538e:	f7ff fff2 	bl	d5376 <_ZN5Print5printEc>
  n += print('\n');
   d5392:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5394:	4604      	mov	r4, r0
  n += print('\n');
   d5396:	4628      	mov	r0, r5
   d5398:	f7ff ffed 	bl	d5376 <_ZN5Print5printEc>
  return n;
}
   d539c:	4420      	add	r0, r4
   d539e:	bd38      	pop	{r3, r4, r5, pc}

000d53a0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d53a0:	b538      	push	{r3, r4, r5, lr}
   d53a2:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53a4:	f7ff ffd3 	bl	d534e <_ZN5Print5writeEPKc>
   d53a8:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d53aa:	4628      	mov	r0, r5
   d53ac:	f7ff ffec 	bl	d5388 <_ZN5Print7printlnEv>
  return n;
}
   d53b0:	4420      	add	r0, r4
   d53b2:	bd38      	pop	{r3, r4, r5, pc}

000d53b4 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   d53b4:	b538      	push	{r3, r4, r5, lr}
   d53b6:	4605      	mov	r5, r0
   size_t n = print(x);
   d53b8:	f7ff ffe0 	bl	d537c <_ZN5Print5printERK9Printable>
   d53bc:	4604      	mov	r4, r0
   n += println();
   d53be:	4628      	mov	r0, r5
   d53c0:	f7ff ffe2 	bl	d5388 <_ZN5Print7printlnEv>
   return n;
 }
   d53c4:	4420      	add	r0, r4
   d53c6:	bd38      	pop	{r3, r4, r5, pc}

000d53c8 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d53c8:	b530      	push	{r4, r5, lr}
   d53ca:	b08b      	sub	sp, #44	; 0x2c
   d53cc:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d53ce:	2100      	movs	r1, #0
   d53d0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d53d4:	2a01      	cmp	r2, #1
   d53d6:	bf98      	it	ls
   d53d8:	220a      	movls	r2, #10
   d53da:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d53de:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d53e2:	fb05 3312 	mls	r3, r5, r2, r3
   d53e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53ea:	2b09      	cmp	r3, #9
   d53ec:	bf94      	ite	ls
   d53ee:	3330      	addls	r3, #48	; 0x30
   d53f0:	3337      	addhi	r3, #55	; 0x37
   d53f2:	b2db      	uxtb	r3, r3
   d53f4:	4621      	mov	r1, r4
   d53f6:	f804 3901 	strb.w	r3, [r4], #-1
   d53fa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53fc:	2d00      	cmp	r5, #0
   d53fe:	d1ee      	bne.n	d53de <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5400:	f7ff ffa5 	bl	d534e <_ZN5Print5writeEPKc>
}
   d5404:	b00b      	add	sp, #44	; 0x2c
   d5406:	bd30      	pop	{r4, r5, pc}

000d5408 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5408:	b410      	push	{r4}
  if (base == 0) return write(n);
   d540a:	b92a      	cbnz	r2, d5418 <_ZN5Print5printEmi+0x10>
   d540c:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d540e:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5412:	689b      	ldr	r3, [r3, #8]
   d5414:	b2c9      	uxtb	r1, r1
   d5416:	4718      	bx	r3
  else return printNumber(n, base);
   d5418:	b2d2      	uxtb	r2, r2
}
   d541a:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d541e:	f7ff bfd3 	b.w	d53c8 <_ZN5Print11printNumberEmh>

000d5422 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5422:	f7ff bff1 	b.w	d5408 <_ZN5Print5printEmi>

000d5426 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d542a:	4607      	mov	r7, r0
   d542c:	460e      	mov	r6, r1
  if (base == 0) {
   d542e:	4615      	mov	r5, r2
   d5430:	b92a      	cbnz	r2, d543e <_ZN5Print5printEli+0x18>
    return write(n);
   d5432:	6803      	ldr	r3, [r0, #0]
   d5434:	b2c9      	uxtb	r1, r1
   d5436:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d543c:	4718      	bx	r3
  } else if (base == 10) {
   d543e:	2a0a      	cmp	r2, #10
   d5440:	d102      	bne.n	d5448 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5442:	2900      	cmp	r1, #0
   d5444:	da01      	bge.n	d544a <_ZN5Print5printEli+0x24>
   d5446:	e004      	b.n	d5452 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5448:	b2d2      	uxtb	r2, r2
  }
}
   d544a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d544e:	f7ff bfbb 	b.w	d53c8 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5452:	212d      	movs	r1, #45	; 0x2d
   d5454:	f7ff ff8f 	bl	d5376 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5458:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d545a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d545c:	4271      	negs	r1, r6
   d545e:	4638      	mov	r0, r7
   d5460:	f7ff ffb2 	bl	d53c8 <_ZN5Print11printNumberEmh>
   d5464:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d546a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d546a:	b538      	push	{r3, r4, r5, lr}
   d546c:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d546e:	f7ff ffda 	bl	d5426 <_ZN5Print5printEli>
   d5472:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d5474:	4628      	mov	r0, r5
   d5476:	f7ff ff87 	bl	d5388 <_ZN5Print7printlnEv>
  return n;
}
   d547a:	4420      	add	r0, r4
   d547c:	bd38      	pop	{r3, r4, r5, pc}

000d547e <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d547e:	6800      	ldr	r0, [r0, #0]
   d5480:	f7ff b90a 	b.w	d4698 <os_mutex_recursive_lock>

000d5484 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5484:	4b01      	ldr	r3, [pc, #4]	; (d548c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5486:	4a02      	ldr	r2, [pc, #8]	; (d5490 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5488:	601a      	str	r2, [r3, #0]
   d548a:	4770      	bx	lr
   d548c:	2003e3f4 	.word	0x2003e3f4
   d5490:	000d6d7a 	.word	0x000d6d7a

000d5494 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5494:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5496:	681a      	ldr	r2, [r3, #0]
   d5498:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d549a:	601a      	str	r2, [r3, #0]
   d549c:	4770      	bx	lr
   d549e:	bf00      	nop
   d54a0:	2003def8 	.word	0x2003def8
   d54a4:	2003e3f8 	.word	0x2003e3f8

000d54a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d54a8:	2100      	movs	r1, #0
   d54aa:	f7ff b9fd 	b.w	d48a8 <system_delay_ms>

000d54ae <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d54ae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d54b0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d54b2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d54b4:	b113      	cbz	r3, d54bc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d54b6:	2203      	movs	r2, #3
   d54b8:	4601      	mov	r1, r0
   d54ba:	4798      	blx	r3
    }
   d54bc:	4620      	mov	r0, r4
   d54be:	bd10      	pop	{r4, pc}

000d54c0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d54c0:	b510      	push	{r4, lr}
   d54c2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54c4:	f7ff fff3 	bl	d54ae <_ZNSt14_Function_baseD1Ev>
   d54c8:	4620      	mov	r0, r4
   d54ca:	bd10      	pop	{r4, pc}

000d54cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54cc:	4803      	ldr	r0, [pc, #12]	; (d54dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d54ce:	4a04      	ldr	r2, [pc, #16]	; (d54e0 <_GLOBAL__sub_I_RGB+0x14>)
   d54d0:	4904      	ldr	r1, [pc, #16]	; (d54e4 <_GLOBAL__sub_I_RGB+0x18>)
   d54d2:	2300      	movs	r3, #0
   d54d4:	6083      	str	r3, [r0, #8]
   d54d6:	f001 b88b 	b.w	d65f0 <__aeabi_atexit>
   d54da:	bf00      	nop
   d54dc:	2003e3fc 	.word	0x2003e3fc
   d54e0:	2003df64 	.word	0x2003df64
   d54e4:	000d54c1 	.word	0x000d54c1

000d54e8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d54e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d54ea:	4b0c      	ldr	r3, [pc, #48]	; (d551c <serialEventRun+0x34>)
   d54ec:	b133      	cbz	r3, d54fc <serialEventRun+0x14>
   d54ee:	f000 f945 	bl	d577c <_Z16_fetch_usbserialv>
   d54f2:	6803      	ldr	r3, [r0, #0]
   d54f4:	691b      	ldr	r3, [r3, #16]
   d54f6:	4798      	blx	r3
   d54f8:	2800      	cmp	r0, #0
   d54fa:	dc09      	bgt.n	d5510 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d54fc:	4b08      	ldr	r3, [pc, #32]	; (d5520 <serialEventRun+0x38>)
   d54fe:	b163      	cbz	r3, d551a <serialEventRun+0x32>
   d5500:	f000 f9a2 	bl	d5848 <_Z22__fetch_global_Serial1v>
   d5504:	6803      	ldr	r3, [r0, #0]
   d5506:	691b      	ldr	r3, [r3, #16]
   d5508:	4798      	blx	r3
   d550a:	2800      	cmp	r0, #0
   d550c:	dc03      	bgt.n	d5516 <serialEventRun+0x2e>
   d550e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5510:	f3af 8000 	nop.w
   d5514:	e7f2      	b.n	d54fc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5516:	f3af 8000 	nop.w
   d551a:	bd08      	pop	{r3, pc}
	...

000d5524 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5524:	b508      	push	{r3, lr}
	serialEventRun();
   d5526:	f7ff ffdf 	bl	d54e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d552a:	f7ff f875 	bl	d4618 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d552e:	4b01      	ldr	r3, [pc, #4]	; (d5534 <_post_loop+0x10>)
   d5530:	6018      	str	r0, [r3, #0]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	2003e748 	.word	0x2003e748

000d5538 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5538:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d553a:	2300      	movs	r3, #0
   d553c:	9300      	str	r3, [sp, #0]
   d553e:	461a      	mov	r2, r3
   d5540:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5544:	f7ff f9c2 	bl	d48cc <system_ctrl_set_result>
}
   d5548:	b003      	add	sp, #12
   d554a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5550 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5550:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5552:	8843      	ldrh	r3, [r0, #2]
   d5554:	2b0a      	cmp	r3, #10
   d5556:	d008      	beq.n	d556a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5558:	2b50      	cmp	r3, #80	; 0x50
   d555a:	d109      	bne.n	d5570 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d555c:	4b09      	ldr	r3, [pc, #36]	; (d5584 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d555e:	681b      	ldr	r3, [r3, #0]
   d5560:	b13b      	cbz	r3, d5572 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5562:	b003      	add	sp, #12
   d5564:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5568:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d556a:	f7ff ffe5 	bl	d5538 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d556e:	e006      	b.n	d557e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5570:	2300      	movs	r3, #0
   d5572:	9300      	str	r3, [sp, #0]
   d5574:	461a      	mov	r2, r3
   d5576:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d557a:	f7ff f9a7 	bl	d48cc <system_ctrl_set_result>
        break;
    }
}
   d557e:	b003      	add	sp, #12
   d5580:	f85d fb04 	ldr.w	pc, [sp], #4
   d5584:	2003e40c 	.word	0x2003e40c

000d5588 <module_user_init_hook>:

void module_user_init_hook()
{
   d5588:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d558a:	f7ff f835 	bl	d45f8 <HAL_RNG_GetRandomNumber>
   d558e:	4604      	mov	r4, r0
    srand(seed);
   d5590:	f001 f9cc 	bl	d692c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5594:	4b07      	ldr	r3, [pc, #28]	; (d55b4 <module_user_init_hook+0x2c>)
   d5596:	b113      	cbz	r3, d559e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5598:	4620      	mov	r0, r4
   d559a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d559e:	2100      	movs	r1, #0
   d55a0:	4804      	ldr	r0, [pc, #16]	; (d55b4 <module_user_init_hook+0x2c>)
   d55a2:	f7ff fa07 	bl	d49b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d55a6:	2100      	movs	r1, #0
   d55a8:	4803      	ldr	r0, [pc, #12]	; (d55b8 <module_user_init_hook+0x30>)
}
   d55aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d55ae:	f7ff b983 	b.w	d48b8 <system_ctrl_set_app_request_handler>
   d55b2:	bf00      	nop
   d55b4:	00000000 	.word	0x00000000
   d55b8:	000d5551 	.word	0x000d5551

000d55bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d55bc:	4770      	bx	lr

000d55be <_ZN9IPAddressD0Ev>:
   d55be:	b510      	push	{r4, lr}
   d55c0:	4604      	mov	r4, r0
   d55c2:	f7fe fd6c 	bl	d409e <_ZdlPv>
   d55c6:	4620      	mov	r0, r4
   d55c8:	bd10      	pop	{r4, pc}

000d55ca <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55ca:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55cc:	7d03      	ldrb	r3, [r0, #20]
   d55ce:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d55d0:	b08d      	sub	sp, #52	; 0x34
   d55d2:	460e      	mov	r6, r1
   d55d4:	f100 0704 	add.w	r7, r0, #4
   d55d8:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d55dc:	d002      	beq.n	d55e4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d55de:	f100 0508 	add.w	r5, r0, #8
   d55e2:	e018      	b.n	d5616 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55e4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e6:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d55e8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55ec:	232f      	movs	r3, #47	; 0x2f
   d55ee:	462a      	mov	r2, r5
   d55f0:	200a      	movs	r0, #10
   d55f2:	f7ff f869 	bl	d46c8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d55f6:	4628      	mov	r0, r5
   d55f8:	f001 f9d2 	bl	d69a0 <strlen>
   d55fc:	6833      	ldr	r3, [r6, #0]
   d55fe:	4602      	mov	r2, r0
   d5600:	68db      	ldr	r3, [r3, #12]
   d5602:	4629      	mov	r1, r5
   d5604:	4630      	mov	r0, r6
   d5606:	4798      	blx	r3
   d5608:	e00f      	b.n	d562a <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d560a:	b124      	cbz	r4, d5616 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d560c:	212e      	movs	r1, #46	; 0x2e
   d560e:	4630      	mov	r0, r6
   d5610:	f7ff feb1 	bl	d5376 <_ZN5Print5printEc>
   d5614:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5616:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d561a:	220a      	movs	r2, #10
   d561c:	4630      	mov	r0, r6
   d561e:	f7ff ff00 	bl	d5422 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5622:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5624:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5626:	d1f0      	bne.n	d560a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5628:	4620      	mov	r0, r4
    }
    return n;
}
   d562a:	b00d      	add	sp, #52	; 0x34
   d562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5630 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5630:	b510      	push	{r4, lr}
   d5632:	4b05      	ldr	r3, [pc, #20]	; (d5648 <_ZN9IPAddressC1Ev+0x18>)
   d5634:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5636:	2211      	movs	r2, #17
   d5638:	f840 3b04 	str.w	r3, [r0], #4
   d563c:	2100      	movs	r1, #0
   d563e:	f001 f96d 	bl	d691c <memset>
{
    clear();
}
   d5642:	4620      	mov	r0, r4
   d5644:	bd10      	pop	{r4, pc}
   d5646:	bf00      	nop
   d5648:	000d6dd4 	.word	0x000d6dd4

000d564c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d564c:	4603      	mov	r3, r0
   d564e:	4a07      	ldr	r2, [pc, #28]	; (d566c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5650:	b510      	push	{r4, lr}
   d5652:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5656:	f101 0210 	add.w	r2, r1, #16
   d565a:	f851 4b04 	ldr.w	r4, [r1], #4
   d565e:	f843 4b04 	str.w	r4, [r3], #4
   d5662:	4291      	cmp	r1, r2
   d5664:	d1f9      	bne.n	d565a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5666:	780a      	ldrb	r2, [r1, #0]
   d5668:	701a      	strb	r2, [r3, #0]
}
   d566a:	bd10      	pop	{r4, pc}
   d566c:	000d6dd4 	.word	0x000d6dd4

000d5670 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5670:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5672:	2b04      	cmp	r3, #4
   d5674:	d101      	bne.n	d567a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5676:	6840      	ldr	r0, [r0, #4]
   d5678:	e008      	b.n	d568c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d567a:	2b06      	cmp	r3, #6
   d567c:	d10a      	bne.n	d5694 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d567e:	6843      	ldr	r3, [r0, #4]
   d5680:	b153      	cbz	r3, d5698 <_ZNK9IPAddresscvbEv+0x28>
   d5682:	6883      	ldr	r3, [r0, #8]
   d5684:	b143      	cbz	r3, d5698 <_ZNK9IPAddresscvbEv+0x28>
   d5686:	68c3      	ldr	r3, [r0, #12]
   d5688:	b133      	cbz	r3, d5698 <_ZNK9IPAddresscvbEv+0x28>
   d568a:	6900      	ldr	r0, [r0, #16]
   d568c:	3000      	adds	r0, #0
   d568e:	bf18      	it	ne
   d5690:	2001      	movne	r0, #1
   d5692:	4770      	bx	lr
   d5694:	2000      	movs	r0, #0
   d5696:	4770      	bx	lr
   d5698:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d569a:	4770      	bx	lr

000d569c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d569c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d569e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d56ae:	2304      	movs	r3, #4
   d56b0:	6041      	str	r1, [r0, #4]
   d56b2:	7503      	strb	r3, [r0, #20]
   d56b4:	bd10      	pop	{r4, pc}
	...

000d56b8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d56b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d56ba:	4d04      	ldr	r5, [pc, #16]	; (d56cc <_ZN9IPAddressC1Ehhhh+0x14>)
   d56bc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d56be:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d56c2:	9500      	str	r5, [sp, #0]
   d56c4:	f7ff ffea 	bl	d569c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d56c8:	b003      	add	sp, #12
   d56ca:	bd30      	pop	{r4, r5, pc}
   d56cc:	000d6dd4 	.word	0x000d6dd4

000d56d0 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d56d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56d2:	780d      	ldrb	r5, [r1, #0]
   d56d4:	788b      	ldrb	r3, [r1, #2]
   d56d6:	784a      	ldrb	r2, [r1, #1]
   d56d8:	78c9      	ldrb	r1, [r1, #3]
   d56da:	9100      	str	r1, [sp, #0]
   d56dc:	4629      	mov	r1, r5
   d56de:	f7ff ffdd 	bl	d569c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d56e2:	b003      	add	sp, #12
   d56e4:	bd30      	pop	{r4, r5, pc}

000d56e6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d56e6:	7441      	strb	r1, [r0, #17]
   d56e8:	4770      	bx	lr

000d56ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d56ea:	4770      	bx	lr

000d56ec <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d56ec:	2100      	movs	r1, #0
   d56ee:	7c00      	ldrb	r0, [r0, #16]
   d56f0:	f7ff b8b2 	b.w	d4858 <HAL_USB_USART_Receive_Data>

000d56f4 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d56f4:	2101      	movs	r1, #1
   d56f6:	7c00      	ldrb	r0, [r0, #16]
   d56f8:	f7ff b8ae 	b.w	d4858 <HAL_USB_USART_Receive_Data>

000d56fc <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d56fc:	7c00      	ldrb	r0, [r0, #16]
   d56fe:	f7ff b8a3 	b.w	d4848 <HAL_USB_USART_Available_Data_For_Write>

000d5702 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5702:	7c00      	ldrb	r0, [r0, #16]
   d5704:	f7ff b898 	b.w	d4838 <HAL_USB_USART_Available_Data>

000d5708 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5708:	b538      	push	{r3, r4, r5, lr}
   d570a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d570c:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d570e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5710:	f7ff f89a 	bl	d4848 <HAL_USB_USART_Available_Data_For_Write>
   d5714:	2800      	cmp	r0, #0
   d5716:	dc01      	bgt.n	d571c <_ZN9USBSerial5writeEh+0x14>
   d5718:	7c60      	ldrb	r0, [r4, #17]
   d571a:	b120      	cbz	r0, d5726 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d571c:	4629      	mov	r1, r5
   d571e:	7c20      	ldrb	r0, [r4, #16]
   d5720:	f7ff f8a2 	bl	d4868 <HAL_USB_USART_Send_Data>
    return 1;
   d5724:	2001      	movs	r0, #1
  }
  return 0;
}
   d5726:	bd38      	pop	{r3, r4, r5, pc}

000d5728 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5728:	7c00      	ldrb	r0, [r0, #16]
   d572a:	f7ff b8a5 	b.w	d4878 <HAL_USB_USART_Flush_Data>

000d572e <_ZN9USBSerialD0Ev>:
   d572e:	b510      	push	{r4, lr}
   d5730:	4604      	mov	r4, r0
   d5732:	f7fe fcb4 	bl	d409e <_ZdlPv>
   d5736:	4620      	mov	r0, r4
   d5738:	bd10      	pop	{r4, pc}
	...

000d573c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d573c:	b510      	push	{r4, lr}
   d573e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5740:	2300      	movs	r3, #0
   d5742:	6063      	str	r3, [r4, #4]
   d5744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5748:	60a3      	str	r3, [r4, #8]
   d574a:	4b05      	ldr	r3, [pc, #20]	; (d5760 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d574c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d574e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5750:	4608      	mov	r0, r1
{
  _serial = serial;
   d5752:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5754:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5756:	4611      	mov	r1, r2
   d5758:	f7ff f85e 	bl	d4818 <HAL_USB_USART_Init>
}
   d575c:	4620      	mov	r0, r4
   d575e:	bd10      	pop	{r4, pc}
   d5760:	000d6de8 	.word	0x000d6de8

000d5764 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5764:	2200      	movs	r2, #0
   d5766:	7c00      	ldrb	r0, [r0, #16]
   d5768:	f7ff b85e 	b.w	d4828 <HAL_USB_USART_Begin>

000d576c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d576c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d576e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5770:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5772:	2100      	movs	r1, #0
   d5774:	f001 f8d2 	bl	d691c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5778:	4620      	mov	r0, r4
   d577a:	bd10      	pop	{r4, pc}

000d577c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d577c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d577e:	4d0e      	ldr	r5, [pc, #56]	; (d57b8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5780:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5782:	a801      	add	r0, sp, #4
   d5784:	f7ff fff2 	bl	d576c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5788:	6829      	ldr	r1, [r5, #0]
   d578a:	f011 0401 	ands.w	r4, r1, #1
   d578e:	d110      	bne.n	d57b2 <_Z16_fetch_usbserialv+0x36>
   d5790:	4628      	mov	r0, r5
   d5792:	f7fe fc88 	bl	d40a6 <__cxa_guard_acquire>
   d5796:	b160      	cbz	r0, d57b2 <_Z16_fetch_usbserialv+0x36>
   d5798:	aa01      	add	r2, sp, #4
   d579a:	4621      	mov	r1, r4
   d579c:	4807      	ldr	r0, [pc, #28]	; (d57bc <_Z16_fetch_usbserialv+0x40>)
   d579e:	f7ff ffcd 	bl	d573c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57a2:	4628      	mov	r0, r5
   d57a4:	f7fe fc84 	bl	d40b0 <__cxa_guard_release>
   d57a8:	4a05      	ldr	r2, [pc, #20]	; (d57c0 <_Z16_fetch_usbserialv+0x44>)
   d57aa:	4906      	ldr	r1, [pc, #24]	; (d57c4 <_Z16_fetch_usbserialv+0x48>)
   d57ac:	4803      	ldr	r0, [pc, #12]	; (d57bc <_Z16_fetch_usbserialv+0x40>)
   d57ae:	f000 ff1f 	bl	d65f0 <__aeabi_atexit>
	return _usbserial;
}
   d57b2:	4802      	ldr	r0, [pc, #8]	; (d57bc <_Z16_fetch_usbserialv+0x40>)
   d57b4:	b007      	add	sp, #28
   d57b6:	bd30      	pop	{r4, r5, pc}
   d57b8:	2003e410 	.word	0x2003e410
   d57bc:	2003e414 	.word	0x2003e414
   d57c0:	2003df64 	.word	0x2003df64
   d57c4:	000d56eb 	.word	0x000d56eb

000d57c8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d57c8:	4770      	bx	lr

000d57ca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57ca:	7441      	strb	r1, [r0, #17]
   d57cc:	4770      	bx	lr

000d57ce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d57ce:	7c00      	ldrb	r0, [r0, #16]
   d57d0:	f7fe bfd2 	b.w	d4778 <HAL_USART_Available_Data_For_Write>

000d57d4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d57d4:	7c00      	ldrb	r0, [r0, #16]
   d57d6:	f7fe bfaf 	b.w	d4738 <HAL_USART_Available_Data>

000d57da <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d57da:	7c00      	ldrb	r0, [r0, #16]
   d57dc:	f7fe bfbc 	b.w	d4758 <HAL_USART_Peek_Data>

000d57e0 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d57e0:	7c00      	ldrb	r0, [r0, #16]
   d57e2:	f7fe bfb1 	b.w	d4748 <HAL_USART_Read_Data>

000d57e6 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d57e6:	7c00      	ldrb	r0, [r0, #16]
   d57e8:	f7fe bfbe 	b.w	d4768 <HAL_USART_Flush_Data>

000d57ec <_ZN11USARTSerialD0Ev>:
   d57ec:	b510      	push	{r4, lr}
   d57ee:	4604      	mov	r4, r0
   d57f0:	f7fe fc55 	bl	d409e <_ZdlPv>
   d57f4:	4620      	mov	r0, r4
   d57f6:	bd10      	pop	{r4, pc}

000d57f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d57f8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57fa:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d57fc:	4604      	mov	r4, r0
   d57fe:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5800:	b925      	cbnz	r5, d580c <_ZN11USARTSerial5writeEh+0x14>
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	f7fe ffb8 	bl	d4778 <HAL_USART_Available_Data_For_Write>
   d5808:	2800      	cmp	r0, #0
   d580a:	dd05      	ble.n	d5818 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d580c:	4631      	mov	r1, r6
   d580e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5814:	f7fe bf88 	b.w	d4728 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5818:	4628      	mov	r0, r5
   d581a:	bd70      	pop	{r4, r5, r6, pc}

000d581c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d581c:	b510      	push	{r4, lr}
   d581e:	4604      	mov	r4, r0
   d5820:	4608      	mov	r0, r1
   d5822:	4611      	mov	r1, r2
   d5824:	2200      	movs	r2, #0
   d5826:	6062      	str	r2, [r4, #4]
   d5828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d582c:	60a2      	str	r2, [r4, #8]
   d582e:	4a05      	ldr	r2, [pc, #20]	; (d5844 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5830:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5832:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5834:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5836:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5838:	461a      	mov	r2, r3
   d583a:	f7fe ff6d 	bl	d4718 <HAL_USART_Init>
}
   d583e:	4620      	mov	r0, r4
   d5840:	bd10      	pop	{r4, pc}
   d5842:	bf00      	nop
   d5844:	000d6e18 	.word	0x000d6e18

000d5848 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5848:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d584a:	4d0c      	ldr	r5, [pc, #48]	; (d587c <_Z22__fetch_global_Serial1v+0x34>)
   d584c:	6829      	ldr	r1, [r5, #0]
   d584e:	f011 0401 	ands.w	r4, r1, #1
   d5852:	d111      	bne.n	d5878 <_Z22__fetch_global_Serial1v+0x30>
   d5854:	4628      	mov	r0, r5
   d5856:	f7fe fc26 	bl	d40a6 <__cxa_guard_acquire>
   d585a:	b168      	cbz	r0, d5878 <_Z22__fetch_global_Serial1v+0x30>
   d585c:	4a08      	ldr	r2, [pc, #32]	; (d5880 <_Z22__fetch_global_Serial1v+0x38>)
   d585e:	4b09      	ldr	r3, [pc, #36]	; (d5884 <_Z22__fetch_global_Serial1v+0x3c>)
   d5860:	4809      	ldr	r0, [pc, #36]	; (d5888 <_Z22__fetch_global_Serial1v+0x40>)
   d5862:	4621      	mov	r1, r4
   d5864:	f7ff ffda 	bl	d581c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5868:	4628      	mov	r0, r5
   d586a:	f7fe fc21 	bl	d40b0 <__cxa_guard_release>
   d586e:	4a07      	ldr	r2, [pc, #28]	; (d588c <_Z22__fetch_global_Serial1v+0x44>)
   d5870:	4907      	ldr	r1, [pc, #28]	; (d5890 <_Z22__fetch_global_Serial1v+0x48>)
   d5872:	4805      	ldr	r0, [pc, #20]	; (d5888 <_Z22__fetch_global_Serial1v+0x40>)
   d5874:	f000 febc 	bl	d65f0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5878:	4803      	ldr	r0, [pc, #12]	; (d5888 <_Z22__fetch_global_Serial1v+0x40>)
   d587a:	bd38      	pop	{r3, r4, r5, pc}
   d587c:	2003e4c0 	.word	0x2003e4c0
   d5880:	2003e4c4 	.word	0x2003e4c4
   d5884:	2003e43c 	.word	0x2003e43c
   d5888:	2003e428 	.word	0x2003e428
   d588c:	2003df64 	.word	0x2003df64
   d5890:	000d57c9 	.word	0x000d57c9

000d5894 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5894:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5896:	2301      	movs	r3, #1
   d5898:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d589a:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d589c:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d589e:	b10b      	cbz	r3, d58a4 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d58a0:	68c0      	ldr	r0, [r0, #12]
   d58a2:	e006      	b.n	d58b2 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58a4:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d58a6:	b128      	cbz	r0, d58b4 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d58a8:	6883      	ldr	r3, [r0, #8]
   d58aa:	b90b      	cbnz	r3, d58b0 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d58ac:	f000 febf 	bl	d662e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58b0:	68c3      	ldr	r3, [r0, #12]
   d58b2:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d58b4:	2301      	movs	r3, #1
   d58b6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d58b8:	2000      	movs	r0, #0
    }
   d58ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d58be:	f7fe befb 	b.w	d46b8 <os_thread_exit>

000d58c2 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58c2:	2200      	movs	r2, #0
   d58c4:	4611      	mov	r1, r2
   d58c6:	6840      	ldr	r0, [r0, #4]
   d58c8:	f7ff b854 	b.w	d4974 <network_listening>

000d58cc <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58cc:	2200      	movs	r2, #0
   d58ce:	4611      	mov	r1, r2
   d58d0:	6840      	ldr	r0, [r0, #4]
   d58d2:	f7ff b85f 	b.w	d4994 <network_get_listen_timeout>

000d58d6 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58d6:	2200      	movs	r2, #0
   d58d8:	6840      	ldr	r0, [r0, #4]
   d58da:	f7ff b853 	b.w	d4984 <network_set_listen_timeout>

000d58de <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58de:	2200      	movs	r2, #0
   d58e0:	f081 0101 	eor.w	r1, r1, #1
   d58e4:	6840      	ldr	r0, [r0, #4]
   d58e6:	f7ff b83d 	b.w	d4964 <network_listen>

000d58ea <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d58ea:	2300      	movs	r3, #0
   d58ec:	461a      	mov	r2, r3
   d58ee:	4619      	mov	r1, r3
   d58f0:	6840      	ldr	r0, [r0, #4]
   d58f2:	f7ff b82f 	b.w	d4954 <network_off>

000d58f6 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d58f6:	2300      	movs	r3, #0
   d58f8:	461a      	mov	r2, r3
   d58fa:	4619      	mov	r1, r3
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	f7ff b821 	b.w	d4944 <network_on>

000d5902 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5902:	2200      	movs	r2, #0
   d5904:	4611      	mov	r1, r2
   d5906:	6840      	ldr	r0, [r0, #4]
   d5908:	f7ff b814 	b.w	d4934 <network_ready>

000d590c <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d590c:	2200      	movs	r2, #0
   d590e:	4611      	mov	r1, r2
   d5910:	6840      	ldr	r0, [r0, #4]
   d5912:	f7fe bfff 	b.w	d4914 <network_connecting>

000d5916 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5916:	2200      	movs	r2, #0
   d5918:	2102      	movs	r1, #2
   d591a:	6840      	ldr	r0, [r0, #4]
   d591c:	f7ff b802 	b.w	d4924 <network_disconnect>

000d5920 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5920:	2300      	movs	r3, #0
   d5922:	461a      	mov	r2, r3
   d5924:	6840      	ldr	r0, [r0, #4]
   d5926:	f7fe bfed 	b.w	d4904 <network_connect>

000d592a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d592a:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d592c:	4605      	mov	r5, r0
   d592e:	b178      	cbz	r0, d5950 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5930:	6804      	ldr	r4, [r0, #0]
   d5932:	b144      	cbz	r4, d5946 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5934:	68a3      	ldr	r3, [r4, #8]
   d5936:	b11b      	cbz	r3, d5940 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5938:	2203      	movs	r2, #3
   d593a:	4621      	mov	r1, r4
   d593c:	4620      	mov	r0, r4
   d593e:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5940:	4620      	mov	r0, r4
   d5942:	f7fe fbac 	bl	d409e <_ZdlPv>
   d5946:	4628      	mov	r0, r5
      }
   d5948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d594c:	f7fe bba7 	b.w	d409e <_ZdlPv>
   d5950:	bd38      	pop	{r3, r4, r5, pc}

000d5952 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5952:	b110      	cbz	r0, d595a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5954:	6803      	ldr	r3, [r0, #0]
   d5956:	685b      	ldr	r3, [r3, #4]
   d5958:	4718      	bx	r3
   d595a:	4770      	bx	lr

000d595c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d595c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d595e:	6803      	ldr	r3, [r0, #0]
   d5960:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5962:	b1bb      	cbz	r3, d5994 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5964:	6858      	ldr	r0, [r3, #4]
   d5966:	f7fe fe67 	bl	d4638 <os_thread_is_current>
   d596a:	b978      	cbnz	r0, d598c <_ZN6ThreadD1Ev+0x30>
   d596c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d596e:	7c5a      	ldrb	r2, [r3, #17]
   d5970:	b912      	cbnz	r2, d5978 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5972:	6858      	ldr	r0, [r3, #4]
   d5974:	f7fe fe70 	bl	d4658 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5978:	6823      	ldr	r3, [r4, #0]
   d597a:	6858      	ldr	r0, [r3, #4]
   d597c:	f7fe fe74 	bl	d4668 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5980:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5982:	2300      	movs	r3, #0
   d5984:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5986:	b128      	cbz	r0, d5994 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5988:	f7ff ffcf 	bl	d592a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d598c:	6820      	ldr	r0, [r4, #0]
   d598e:	b108      	cbz	r0, d5994 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5990:	f7ff ffcb 	bl	d592a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5994:	4620      	mov	r0, r4
   d5996:	bd10      	pop	{r4, pc}

000d5998 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5998:	b538      	push	{r3, r4, r5, lr}
   d599a:	4b0b      	ldr	r3, [pc, #44]	; (d59c8 <_ZN5spark9MeshClassD1Ev+0x30>)
   d599c:	6003      	str	r3, [r0, #0]
   d599e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59a0:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d59a4:	b108      	cbz	r0, d59aa <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d59a6:	f7fe fb7c 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59aa:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d59ae:	b12d      	cbz	r5, d59bc <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59b0:	4628      	mov	r0, r5
   d59b2:	f7ff ffd3 	bl	d595c <_ZN6ThreadD1Ev>
   d59b6:	4628      	mov	r0, r5
   d59b8:	f7fe fb71 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59bc:	68a0      	ldr	r0, [r4, #8]
   d59be:	b108      	cbz	r0, d59c4 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d59c0:	f7ff ffc7 	bl	d5952 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d59c4:	4620      	mov	r0, r4
   d59c6:	bd38      	pop	{r3, r4, r5, pc}
   d59c8:	000d6e48 	.word	0x000d6e48

000d59cc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d59cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d59d2:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d59d6:	4606      	mov	r6, r0
   d59d8:	4688      	mov	r8, r1
   d59da:	4691      	mov	r9, r2
   d59dc:	469a      	mov	sl, r3
   d59de:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d59e0:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d59e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d59e4:	454b      	cmp	r3, r9
   d59e6:	d129      	bne.n	d5a3c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d59e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d59ea:	4553      	cmp	r3, sl
   d59ec:	d126      	bne.n	d5a3c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d59ee:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d59f2:	455b      	cmp	r3, fp
   d59f4:	d122      	bne.n	d5a3c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d59f6:	2140      	movs	r1, #64	; 0x40
   d59f8:	4640      	mov	r0, r8
   d59fa:	f000 ffee 	bl	d69da <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d59fe:	4641      	mov	r1, r8
   d5a00:	4602      	mov	r2, r0
   d5a02:	4620      	mov	r0, r4
   d5a04:	f000 ffd4 	bl	d69b0 <strncmp>
   d5a08:	b9c0      	cbnz	r0, d5a3c <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5a0a:	b16f      	cbz	r7, d5a28 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d5a0c:	210c      	movs	r1, #12
   d5a0e:	4638      	mov	r0, r7
   d5a10:	f000 ffe3 	bl	d69da <strnlen>
                if (id_len)
   d5a14:	4602      	mov	r2, r0
   d5a16:	b138      	cbz	r0, d5a28 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d5a18:	2358      	movs	r3, #88	; 0x58
   d5a1a:	fb03 6005 	mla	r0, r3, r5, r6
   d5a1e:	4639      	mov	r1, r7
   d5a20:	3049      	adds	r0, #73	; 0x49
   d5a22:	f000 ffc5 	bl	d69b0 <strncmp>
   d5a26:	e004      	b.n	d5a32 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d5a28:	2058      	movs	r0, #88	; 0x58
   d5a2a:	fb00 6505 	mla	r5, r0, r5, r6
   d5a2e:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d5a32:	fab0 f080 	clz	r0, r0
   d5a36:	0940      	lsrs	r0, r0, #5
   d5a38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5a3c:	3501      	adds	r5, #1
   d5a3e:	2d05      	cmp	r5, #5
   d5a40:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d5a44:	d1cd      	bne.n	d59e2 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d5a46:	2000      	movs	r0, #0
}
   d5a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5a4c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a50:	b085      	sub	sp, #20
   d5a52:	4607      	mov	r7, r0
   d5a54:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5a58:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5a5a:	9601      	str	r6, [sp, #4]
   d5a5c:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d5a60:	4689      	mov	r9, r1
   d5a62:	9202      	str	r2, [sp, #8]
   d5a64:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d5a66:	f7ff ffb1 	bl	d59cc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d5a6a:	2800      	cmp	r0, #0
   d5a6c:	d13c      	bne.n	d5ae8 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d5a6e:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5a70:	2358      	movs	r3, #88	; 0x58
   d5a72:	fb03 7504 	mla	r5, r3, r4, r7
   d5a76:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d5a7a:	f1b8 0f00 	cmp.w	r8, #0
   d5a7e:	d12e      	bne.n	d5ade <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5a80:	2140      	movs	r1, #64	; 0x40
   d5a82:	4648      	mov	r0, r9
   d5a84:	f000 ffa9 	bl	d69da <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5a88:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d5a8a:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d5a8c:	4602      	mov	r2, r0
   d5a8e:	4628      	mov	r0, r5
   d5a90:	f000 ff39 	bl	d6906 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d5a94:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d5a98:	4641      	mov	r1, r8
   d5a9a:	eb05 000b 	add.w	r0, r5, fp
   d5a9e:	f000 ff3d 	bl	d691c <memset>
            event_handlers[i].handler = handler;
   d5aa2:	9b02      	ldr	r3, [sp, #8]
   d5aa4:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d5aa6:	9b03      	ldr	r3, [sp, #12]
   d5aa8:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d5aaa:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d5aae:	b12e      	cbz	r6, d5abc <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d5ab0:	210c      	movs	r1, #12
   d5ab2:	4630      	mov	r0, r6
   d5ab4:	f000 ff91 	bl	d69da <strnlen>
   d5ab8:	4605      	mov	r5, r0
   d5aba:	e000      	b.n	d5abe <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d5abc:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d5abe:	2058      	movs	r0, #88	; 0x58
   d5ac0:	4344      	muls	r4, r0
   d5ac2:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d5ac4:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d5ac6:	462a      	mov	r2, r5
   d5ac8:	4631      	mov	r1, r6
   d5aca:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d5acc:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d5ace:	f000 ff1a 	bl	d6906 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d5ad2:	2000      	movs	r0, #0
   d5ad4:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d5ad8:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d5adc:	e005      	b.n	d5aea <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5ade:	3401      	adds	r4, #1
   d5ae0:	2c05      	cmp	r4, #5
   d5ae2:	d1c6      	bne.n	d5a72 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d5ae4:	4802      	ldr	r0, [pc, #8]	; (d5af0 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d5ae6:	e000      	b.n	d5aea <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d5ae8:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d5aea:	b005      	add	sp, #20
   d5aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5af0:	fffffefc 	.word	0xfffffefc

000d5af4 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d5af4:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d5af6:	2300      	movs	r3, #0
   d5af8:	9301      	str	r3, [sp, #4]
   d5afa:	9300      	str	r3, [sp, #0]
   d5afc:	f7ff ffa6 	bl	d5a4c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d5b00:	b003      	add	sp, #12
   d5b02:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b06 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5b06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5b0a:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d5b0c:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5b0e:	460d      	mov	r5, r1
   d5b10:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d5b12:	f000 ff45 	bl	d69a0 <strlen>
   d5b16:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d5b1a:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5b1e:	b1ab      	cbz	r3, d5b4c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5b20:	2140      	movs	r1, #64	; 0x40
   d5b22:	4620      	mov	r0, r4
   d5b24:	f000 ff59 	bl	d69da <strnlen>

        if (event_name_length < filter_length)
   d5b28:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5b2a:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d5b2c:	d30b      	bcc.n	d5b46 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d5b2e:	4629      	mov	r1, r5
   d5b30:	4620      	mov	r0, r4
   d5b32:	f000 fed9 	bl	d68e8 <memcmp>
        if (0 == cmp)
   d5b36:	b930      	cbnz	r0, d5b46 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d5b38:	9000      	str	r0, [sp, #0]
   d5b3a:	4643      	mov	r3, r8
   d5b3c:	462a      	mov	r2, r5
   d5b3e:	4621      	mov	r1, r4
   d5b40:	2058      	movs	r0, #88	; 0x58
   d5b42:	f7fe fecd 	bl	d48e0 <system_invoke_event_handler>
   d5b46:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5b48:	42b4      	cmp	r4, r6
   d5b4a:	d1e7      	bne.n	d5b1c <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5b4c:	b002      	add	sp, #8
   d5b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5b54 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5b54:	b530      	push	{r4, r5, lr}
   d5b56:	b08d      	sub	sp, #52	; 0x34
   d5b58:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5b5a:	2211      	movs	r2, #17
   d5b5c:	2100      	movs	r1, #0
   d5b5e:	a801      	add	r0, sp, #4
   d5b60:	f000 fedc 	bl	d691c <memset>
    addr.v = 6;
   d5b64:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5b66:	aa01      	add	r2, sp, #4
   d5b68:	4909      	ldr	r1, [pc, #36]	; (d5b90 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5b6a:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5b6e:	200a      	movs	r0, #10
   d5b70:	f7fe fdb2 	bl	d46d8 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5b74:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5b76:	a901      	add	r1, sp, #4
   d5b78:	a806      	add	r0, sp, #24
   d5b7a:	f7ff fd67 	bl	d564c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b80:	3404      	adds	r4, #4
   d5b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b84:	682b      	ldr	r3, [r5, #0]
   d5b86:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5b88:	2000      	movs	r0, #0
   d5b8a:	b00d      	add	sp, #52	; 0x34
   d5b8c:	bd30      	pop	{r4, r5, pc}
   d5b8e:	bf00      	nop
   d5b90:	000d6e74 	.word	0x000d6e74

000d5b94 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d5b94:	b530      	push	{r4, r5, lr}
   d5b96:	4604      	mov	r4, r0
   d5b98:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5b9a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5b9e:	f7ff fc6e 	bl	d547e <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d5ba2:	6823      	ldr	r3, [r4, #0]
   d5ba4:	bb83      	cbnz	r3, d5c08 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5ba6:	204c      	movs	r0, #76	; 0x4c
   d5ba8:	f7fe fa75 	bl	d4096 <_Znwj>
   d5bac:	4605      	mov	r5, r0
   d5bae:	b108      	cbz	r0, d5bb4 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5bb0:	f7ff fa38 	bl	d5024 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5bb4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5bb6:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5bb8:	b108      	cbz	r0, d5bbe <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5bba:	f7ff feca 	bl	d5952 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5bbe:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d5bc0:	b320      	cbz	r0, d5c0c <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d5bc2:	2200      	movs	r2, #0
   d5bc4:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5bc8:	f7ff fa5b 	bl	d5082 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5bcc:	a908      	add	r1, sp, #32
   d5bce:	2500      	movs	r5, #0
   d5bd0:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5bd4:	4811      	ldr	r0, [pc, #68]	; (d5c1c <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d5bd6:	f7fe fce7 	bl	d45a8 <if_name_to_index>
   d5bda:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5bdc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5be0:	6803      	ldr	r3, [r0, #0]
   d5be2:	f249 0169 	movw	r1, #36969	; 0x9069
   d5be6:	6a1b      	ldr	r3, [r3, #32]
   d5be8:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5bea:	a802      	add	r0, sp, #8
   d5bec:	f7ff fd20 	bl	d5630 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5bf0:	a802      	add	r0, sp, #8
   d5bf2:	f7ff ffaf 	bl	d5b54 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5bf6:	2800      	cmp	r0, #0
   d5bf8:	db04      	blt.n	d5c04 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d5bfa:	a902      	add	r1, sp, #8
   d5bfc:	6820      	ldr	r0, [r4, #0]
   d5bfe:	f7ff faaa 	bl	d5156 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d5c02:	e004      	b.n	d5c0e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d5c04:	4605      	mov	r5, r0
   d5c06:	e002      	b.n	d5c0e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d5c08:	2500      	movs	r5, #0
   d5c0a:	e000      	b.n	d5c0e <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5c0c:	4d04      	ldr	r5, [pc, #16]	; (d5c20 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5c0e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5c12:	f7fe fd49 	bl	d46a8 <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d5c16:	4628      	mov	r0, r5
   d5c18:	b009      	add	sp, #36	; 0x24
   d5c1a:	bd30      	pop	{r4, r5, pc}
   d5c1c:	000d6e81 	.word	0x000d6e81
   d5c20:	fffffefc 	.word	0xfffffefc

000d5c24 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d5c24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5c28:	4604      	mov	r4, r0
   d5c2a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5c2e:	460f      	mov	r7, r1
   d5c30:	4690      	mov	r8, r2
   d5c32:	f7ff fc24 	bl	d547e <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d5c36:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d5c3a:	2e00      	cmp	r6, #0
   d5c3c:	d139      	bne.n	d5cb2 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5c3e:	4928      	ldr	r1, [pc, #160]	; (d5ce0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d5c40:	2004      	movs	r0, #4
   d5c42:	f000 fce5 	bl	d6610 <_ZnwjRKSt9nothrow_t>
   d5c46:	4605      	mov	r5, r0
   d5c48:	b340      	cbz	r0, d5c9c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d5c4a:	4925      	ldr	r1, [pc, #148]	; (d5ce0 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d5c4c:	2014      	movs	r0, #20
   d5c4e:	f000 fcdf 	bl	d6610 <_ZnwjRKSt9nothrow_t>
   d5c52:	b128      	cbz	r0, d5c60 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x3c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d5c54:	7406      	strb	r6, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c56:	6006      	str	r6, [r0, #0]
   d5c58:	6046      	str	r6, [r0, #4]
   d5c5a:	6086      	str	r6, [r0, #8]
   d5c5c:	60c6      	str	r6, [r0, #12]
   d5c5e:	7446      	strb	r6, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5c60:	6028      	str	r0, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d5c62:	b1a8      	cbz	r0, d5c90 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
            goto error;
        }
        d_->func = function;
   d5c64:	4b1f      	ldr	r3, [pc, #124]	; (d5ce4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc0>)
   d5c66:	6083      	str	r3, [r0, #8]
   d5c68:	682b      	ldr	r3, [r5, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5c6a:	491f      	ldr	r1, [pc, #124]	; (d5ce8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d5c6c:	60dc      	str	r4, [r3, #12]
   d5c6e:	6828      	ldr	r0, [r5, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5c70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5c74:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5c78:	2203      	movs	r2, #3
   d5c7a:	4b1c      	ldr	r3, [pc, #112]	; (d5cec <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc8>)
   d5c7c:	3004      	adds	r0, #4
   d5c7e:	f7fe fcd3 	bl	d4628 <os_thread_create>
   d5c82:	b928      	cbnz	r0, d5c90 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
   d5c84:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d5c86:	7c1b      	ldrb	r3, [r3, #16]
   d5c88:	b943      	cbnz	r3, d5c9c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
            os_thread_yield();
   d5c8a:	f7fe fcdd 	bl	d4648 <os_thread_yield>
   d5c8e:	e7f9      	b.n	d5c84 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x60>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c90:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c92:	2300      	movs	r3, #0
   d5c94:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5c96:	b108      	cbz	r0, d5c9c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
	  get_deleter()(__p);
   d5c98:	f7ff fe47 	bl	d592a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c9c:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d5ca0:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5ca4:	b12e      	cbz	r6, d5cb2 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5ca6:	4630      	mov	r0, r6
   d5ca8:	f7ff fe58 	bl	d595c <_ZN6ThreadD1Ev>
   d5cac:	4630      	mov	r0, r6
   d5cae:	f7fe f9f6 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	f7ff ff6e 	bl	d5b94 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5cb8:	2800      	cmp	r0, #0
   d5cba:	db07      	blt.n	d5ccc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xa8>
    CHECK(subscriptions.add(prefix, handler));
   d5cbc:	4642      	mov	r2, r8
   d5cbe:	4639      	mov	r1, r7
   d5cc0:	1d20      	adds	r0, r4, #4
   d5cc2:	f7ff ff17 	bl	d5af4 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d5cc6:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d5cca:	e000      	b.n	d5cce <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xaa>
   d5ccc:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5cce:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5cd2:	f7fe fce9 	bl	d46a8 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d5cd6:	4628      	mov	r0, r5
   d5cd8:	b002      	add	sp, #8
   d5cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5cde:	bf00      	nop
   d5ce0:	000d6f84 	.word	0x000d6f84
   d5ce4:	000d5e01 	.word	0x000d5e01
   d5ce8:	000d6e85 	.word	0x000d6e85
   d5cec:	000d5895 	.word	0x000d5895

000d5cf0 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5cf4:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d5cf6:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5cfa:	b08a      	sub	sp, #40	; 0x28
   d5cfc:	4630      	mov	r0, r6
   d5cfe:	f7ff fbbe 	bl	d547e <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5d02:	682c      	ldr	r4, [r5, #0]
   d5d04:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5d08:	f7fe fcce 	bl	d46a8 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d5d0c:	2c00      	cmp	r4, #0
   d5d0e:	d063      	beq.n	d5dd8 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d5d10:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5d14:	b163      	cbz	r3, d5d30 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d5d16:	6823      	ldr	r3, [r4, #0]
   d5d18:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d5d1c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d5d1e:	4620      	mov	r0, r4
   d5d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d24:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d5d28:	47b8      	blx	r7
        if (len > 0) {
   d5d2a:	1e04      	subs	r4, r0, #0
   d5d2c:	dc13      	bgt.n	d5d56 <_ZN5spark11MeshPublish4pollEv+0x66>
   d5d2e:	e056      	b.n	d5dde <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d5d30:	492d      	ldr	r1, [pc, #180]	; (d5de8 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d5d32:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d5d36:	f000 fc69 	bl	d660c <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d3a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d5d3e:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d5d42:	b113      	cbz	r3, d5d4a <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d44:	4618      	mov	r0, r3
   d5d46:	f7fe f9ac 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d5d4a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5d4e:	2b00      	cmp	r3, #0
   d5d50:	d1e1      	bne.n	d5d16 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5d52:	4826      	ldr	r0, [pc, #152]	; (d5dec <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5d54:	e044      	b.n	d5de0 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5d56:	2320      	movs	r3, #32
   d5d58:	4a25      	ldr	r2, [pc, #148]	; (d5df0 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5d5a:	9302      	str	r3, [sp, #8]
   d5d5c:	9200      	str	r2, [sp, #0]
   d5d5e:	2300      	movs	r3, #0
   d5d60:	9401      	str	r4, [sp, #4]
   d5d62:	aa02      	add	r2, sp, #8
   d5d64:	4923      	ldr	r1, [pc, #140]	; (d5df4 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5d66:	9303      	str	r3, [sp, #12]
   d5d68:	2001      	movs	r0, #1
   d5d6a:	f7fe fd8d 	bl	d4888 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5d6e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5d72:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5d74:	781b      	ldrb	r3, [r3, #0]
   d5d76:	bb6b      	cbnz	r3, d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5d78:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5d7a:	4621      	mov	r1, r4
   d5d7c:	4638      	mov	r0, r7
   d5d7e:	f000 fe2c 	bl	d69da <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5d82:	b338      	cbz	r0, d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5d84:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5d86:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5d88:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5d8c:	dd22      	ble.n	d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5d8e:	5c3b      	ldrb	r3, [r7, r0]
   d5d90:	bb03      	cbnz	r3, d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5d92:	3c01      	subs	r4, #1
   d5d94:	d00e      	beq.n	d5db4 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5d96:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5d9a:	4621      	mov	r1, r4
   d5d9c:	4640      	mov	r0, r8
   d5d9e:	f000 fe1c 	bl	d69da <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5da2:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5da4:	2c00      	cmp	r4, #0
   d5da6:	dd15      	ble.n	d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5da8:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5dac:	b993      	cbnz	r3, d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5dae:	2c01      	cmp	r4, #1
   d5db0:	d002      	beq.n	d5db8 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5db2:	e00f      	b.n	d5dd4 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5db4:	f8df 8044 	ldr.w	r8, [pc, #68]	; d5dfc <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5db8:	4630      	mov	r0, r6
   d5dba:	f7ff fb60 	bl	d547e <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d5dbe:	4642      	mov	r2, r8
   d5dc0:	4639      	mov	r1, r7
   d5dc2:	1d28      	adds	r0, r5, #4
   d5dc4:	f7ff fe9f 	bl	d5b06 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5dc8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5dcc:	f7fe fc6c 	bl	d46a8 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5dd0:	2000      	movs	r0, #0
   d5dd2:	e005      	b.n	d5de0 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5dd4:	4808      	ldr	r0, [pc, #32]	; (d5df8 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5dd6:	e003      	b.n	d5de0 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5dd8:	2064      	movs	r0, #100	; 0x64
   d5dda:	f7fe fc15 	bl	d4608 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5dde:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d5de0:	b00a      	add	sp, #40	; 0x28
   d5de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5de6:	bf00      	nop
   d5de8:	000d6f84 	.word	0x000d6f84
   d5dec:	fffffefc 	.word	0xfffffefc
   d5df0:	000d6e94 	.word	0x000d6e94
   d5df4:	000d6e8d 	.word	0x000d6e8d
   d5df8:	fffffee8 	.word	0xfffffee8
   d5dfc:	000d6c11 	.word	0x000d6c11

000d5e00 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d5e04:	4620      	mov	r0, r4
   d5e06:	f7ff ff73 	bl	d5cf0 <_ZN5spark11MeshPublish4pollEv>
   d5e0a:	e7fb      	b.n	d5e04 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d5e0c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5e0c:	b538      	push	{r3, r4, r5, lr}
   d5e0e:	4c0d      	ldr	r4, [pc, #52]	; (d5e44 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5e10:	4b0d      	ldr	r3, [pc, #52]	; (d5e48 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5e12:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5e14:	2500      	movs	r5, #0
   d5e16:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5e18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5e1c:	6063      	str	r3, [r4, #4]
   d5e1e:	60a5      	str	r5, [r4, #8]
   d5e20:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5e24:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5e28:	f7fe fc2e 	bl	d4688 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5e2c:	4b07      	ldr	r3, [pc, #28]	; (d5e4c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5e2e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5e32:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5e34:	4620      	mov	r0, r4
   d5e36:	4a06      	ldr	r2, [pc, #24]	; (d5e50 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5e38:	4906      	ldr	r1, [pc, #24]	; (d5e54 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5e3e:	f000 bbd7 	b.w	d65f0 <__aeabi_atexit>
   d5e42:	bf00      	nop
   d5e44:	2003e548 	.word	0x2003e548
   d5e48:	000d6f58 	.word	0x000d6f58
   d5e4c:	000d6e48 	.word	0x000d6e48
   d5e50:	2003df64 	.word	0x2003df64
   d5e54:	000d5999 	.word	0x000d5999

000d5e58 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e5a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5e5c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5e5e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5e62:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5e64:	2201      	movs	r2, #1
   d5e66:	f04f 33ff 	mov.w	r3, #4294967295
   d5e6a:	4621      	mov	r1, r4
   d5e6c:	47a8      	blx	r5
}
   d5e6e:	b003      	add	sp, #12
   d5e70:	bd30      	pop	{r4, r5, pc}

000d5e72 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5e72:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5e74:	6803      	ldr	r3, [r0, #0]
   d5e76:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5e78:	f04f 33ff 	mov.w	r3, #4294967295
   d5e7c:	46a4      	mov	ip, r4
}
   d5e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5e82:	4760      	bx	ip

000d5e84 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e86:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5e88:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5e8a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5e8e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5e90:	4621      	mov	r1, r4
   d5e92:	4613      	mov	r3, r2
   d5e94:	2201      	movs	r2, #1
   d5e96:	47a8      	blx	r5
}
   d5e98:	b003      	add	sp, #12
   d5e9a:	bd30      	pop	{r4, r5, pc}

000d5e9c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5e9c:	4770      	bx	lr

000d5e9e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5e9e:	b538      	push	{r3, r4, r5, lr}
   d5ea0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5ea2:	681a      	ldr	r2, [r3, #0]
   d5ea4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5ea6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5ea8:	da05      	bge.n	d5eb6 <_ZN9TCPClient9connectedEv+0x18>
   d5eaa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5eae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5eb2:	429a      	cmp	r2, r3
   d5eb4:	d001      	beq.n	d5eba <_ZN9TCPClient9connectedEv+0x1c>
   d5eb6:	2501      	movs	r5, #1
   d5eb8:	e00b      	b.n	d5ed2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5eba:	6803      	ldr	r3, [r0, #0]
   d5ebc:	691b      	ldr	r3, [r3, #16]
   d5ebe:	4798      	blx	r3
   d5ec0:	2800      	cmp	r0, #0
   d5ec2:	bf14      	ite	ne
   d5ec4:	2501      	movne	r5, #1
   d5ec6:	2500      	moveq	r5, #0
        if (!rv) {
   d5ec8:	d103      	bne.n	d5ed2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5eca:	6823      	ldr	r3, [r4, #0]
   d5ecc:	4620      	mov	r0, r4
   d5ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ed0:	4798      	blx	r3
        }
    }
    return rv;
}
   d5ed2:	4628      	mov	r0, r5
   d5ed4:	bd38      	pop	{r3, r4, r5, pc}

000d5ed6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5ed6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5ed8:	6818      	ldr	r0, [r3, #0]
}
   d5eda:	43c0      	mvns	r0, r0
   d5edc:	0fc0      	lsrs	r0, r0, #31
   d5ede:	4770      	bx	lr

000d5ee0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5ee0:	4770      	bx	lr

000d5ee2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5ee2:	2000      	movs	r0, #0
   d5ee4:	4770      	bx	lr

000d5ee6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5ee6:	b510      	push	{r4, lr}
   d5ee8:	4604      	mov	r4, r0
   d5eea:	f7fe f8d8 	bl	d409e <_ZdlPv>
   d5eee:	4620      	mov	r0, r4
   d5ef0:	bd10      	pop	{r4, pc}

000d5ef2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5ef2:	f7fe b8d4 	b.w	d409e <_ZdlPv>
	...

000d5ef8 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5efc:	4698      	mov	r8, r3
    stop();
   d5efe:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5f00:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5f04:	460c      	mov	r4, r1
   d5f06:	4606      	mov	r6, r0
   d5f08:	4617      	mov	r7, r2
    stop();
   d5f0a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5f0c:	ab12      	add	r3, sp, #72	; 0x48
   d5f0e:	2500      	movs	r5, #0
   d5f10:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5f14:	462a      	mov	r2, r5
   d5f16:	4629      	mov	r1, r5
   d5f18:	4620      	mov	r0, r4
   d5f1a:	f7fe fb2d 	bl	d4578 <netdb_getaddrinfo>
   d5f1e:	2800      	cmp	r0, #0
   d5f20:	db3a      	blt.n	d5f98 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5f22:	9b00      	ldr	r3, [sp, #0]
   d5f24:	2b00      	cmp	r3, #0
   d5f26:	d039      	beq.n	d5f9c <_ZN9TCPClient7connectEPKctm+0xa4>
   d5f28:	695b      	ldr	r3, [r3, #20]
   d5f2a:	2b00      	cmp	r3, #0
   d5f2c:	d036      	beq.n	d5f9c <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d5f2e:	a806      	add	r0, sp, #24
   d5f30:	f7ff fb7e 	bl	d5630 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5f34:	9b00      	ldr	r3, [sp, #0]
   d5f36:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5f38:	7863      	ldrb	r3, [r4, #1]
   d5f3a:	2b02      	cmp	r3, #2
   d5f3c:	d101      	bne.n	d5f42 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5f3e:	1d21      	adds	r1, r4, #4
   d5f40:	e013      	b.n	d5f6a <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5f42:	2b0a      	cmp	r3, #10
   d5f44:	d114      	bne.n	d5f70 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5f46:	2211      	movs	r2, #17
   d5f48:	4629      	mov	r1, r5
   d5f4a:	a801      	add	r0, sp, #4
   d5f4c:	f000 fce6 	bl	d691c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5f50:	68a3      	ldr	r3, [r4, #8]
   d5f52:	bb33      	cbnz	r3, d5fa2 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5f54:	68e3      	ldr	r3, [r4, #12]
   d5f56:	bb23      	cbnz	r3, d5fa2 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5f58:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5f5c:	6925      	ldr	r5, [r4, #16]
   d5f5e:	f7fe fbc3 	bl	d46e8 <inet_htonl>
   d5f62:	4285      	cmp	r5, r0
   d5f64:	d11d      	bne.n	d5fa2 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5f66:	f104 0114 	add.w	r1, r4, #20
   d5f6a:	a806      	add	r0, sp, #24
   d5f6c:	f7ff fbb0 	bl	d56d0 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5f70:	a806      	add	r0, sp, #24
   d5f72:	f7ff fb7d 	bl	d5670 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5f76:	b188      	cbz	r0, d5f9c <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d5f78:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f7a:	ad07      	add	r5, sp, #28
   d5f7c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5f80:	4b18      	ldr	r3, [pc, #96]	; (d5fe4 <_ZN9TCPClient7connectEPKctm+0xec>)
   d5f82:	930c      	str	r3, [sp, #48]	; 0x30
   d5f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f86:	ac0d      	add	r4, sp, #52	; 0x34
   d5f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f8a:	682b      	ldr	r3, [r5, #0]
   d5f8c:	7023      	strb	r3, [r4, #0]
   d5f8e:	463a      	mov	r2, r7
   d5f90:	4643      	mov	r3, r8
   d5f92:	a90c      	add	r1, sp, #48	; 0x30
   d5f94:	4630      	mov	r0, r6
   d5f96:	47c8      	blx	r9
   d5f98:	4604      	mov	r4, r0
   d5f9a:	e01c      	b.n	d5fd6 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d5f9c:	f04f 34ff 	mov.w	r4, #4294967295
   d5fa0:	e019      	b.n	d5fd6 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5fa2:	f104 0308 	add.w	r3, r4, #8
   d5fa6:	ad01      	add	r5, sp, #4
   d5fa8:	3418      	adds	r4, #24
   d5faa:	6818      	ldr	r0, [r3, #0]
   d5fac:	6859      	ldr	r1, [r3, #4]
   d5fae:	462a      	mov	r2, r5
   d5fb0:	c203      	stmia	r2!, {r0, r1}
   d5fb2:	3308      	adds	r3, #8
   d5fb4:	42a3      	cmp	r3, r4
   d5fb6:	4615      	mov	r5, r2
   d5fb8:	d1f7      	bne.n	d5faa <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d5fba:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5fbc:	a901      	add	r1, sp, #4
   d5fbe:	a80c      	add	r0, sp, #48	; 0x30
   d5fc0:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5fc2:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5fc6:	f7ff fb41 	bl	d564c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fcc:	ac07      	add	r4, sp, #28
   d5fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fd0:	682b      	ldr	r3, [r5, #0]
   d5fd2:	7023      	strb	r3, [r4, #0]
   d5fd4:	e7cc      	b.n	d5f70 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5fd6:	9800      	ldr	r0, [sp, #0]
   d5fd8:	f7fe fac6 	bl	d4568 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d5fdc:	4620      	mov	r0, r4
   d5fde:	b013      	add	sp, #76	; 0x4c
   d5fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5fe4:	000d6dd4 	.word	0x000d6dd4

000d5fe8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5fe8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5fea:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5fec:	2200      	movs	r2, #0
   d5fee:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5ff0:	9202      	str	r2, [sp, #8]
   d5ff2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5ff4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5ff6:	4604      	mov	r4, r0
   d5ff8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5ffa:	d008      	beq.n	d600e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6000:	fbb3 f1f2 	udiv	r1, r3, r2
   d6004:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6006:	fb02 3111 	mls	r1, r2, r1, r3
   d600a:	434a      	muls	r2, r1
   d600c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d600e:	6960      	ldr	r0, [r4, #20]
   d6010:	2308      	movs	r3, #8
   d6012:	9300      	str	r3, [sp, #0]
   d6014:	f241 0205 	movw	r2, #4101	; 0x1005
   d6018:	446b      	add	r3, sp
   d601a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d601e:	6800      	ldr	r0, [r0, #0]
   d6020:	f7fe fbba 	bl	d4798 <sock_setsockopt>
    if (ret < 0) {
   d6024:	2800      	cmp	r0, #0
   d6026:	db08      	blt.n	d603a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6028:	6960      	ldr	r0, [r4, #20]
   d602a:	2300      	movs	r3, #0
   d602c:	4632      	mov	r2, r6
   d602e:	4629      	mov	r1, r5
   d6030:	6800      	ldr	r0, [r0, #0]
   d6032:	f7fe fbd9 	bl	d47e8 <sock_send>
    if (ret < 0) {
   d6036:	2800      	cmp	r0, #0
   d6038:	da04      	bge.n	d6044 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d603a:	f7fe fce3 	bl	d4a04 <__errno>
   d603e:	6803      	ldr	r3, [r0, #0]
   d6040:	6063      	str	r3, [r4, #4]
   d6042:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6044:	b004      	add	sp, #16
   d6046:	bd70      	pop	{r4, r5, r6, pc}

000d6048 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6048:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d604a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d604c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d604e:	689b      	ldr	r3, [r3, #8]
   d6050:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6052:	68a3      	ldr	r3, [r4, #8]
   d6054:	3b01      	subs	r3, #1
   d6056:	60a3      	str	r3, [r4, #8]
   d6058:	b92b      	cbnz	r3, d6066 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d605a:	6823      	ldr	r3, [r4, #0]
   d605c:	4620      	mov	r0, r4
   d605e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6064:	4718      	bx	r3
   d6066:	bd10      	pop	{r4, pc}

000d6068 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6068:	b570      	push	{r4, r5, r6, lr}
   d606a:	4604      	mov	r4, r0
   d606c:	694d      	ldr	r5, [r1, #20]
   d606e:	4b05      	ldr	r3, [pc, #20]	; (d6084 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6070:	f844 3b04 	str.w	r3, [r4], #4
   d6074:	358c      	adds	r5, #140	; 0x8c
   d6076:	4606      	mov	r6, r0
   d6078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d607a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d607c:	682b      	ldr	r3, [r5, #0]
   d607e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6080:	4630      	mov	r0, r6
   d6082:	bd70      	pop	{r4, r5, r6, pc}
   d6084:	000d6dd4 	.word	0x000d6dd4

000d6088 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6088:	b510      	push	{r4, lr}
   d608a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d608c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6090:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6094:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6096:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6098:	d005      	beq.n	d60a6 <_ZN9TCPClient4peekEv+0x1e>
   d609a:	6962      	ldr	r2, [r4, #20]
   d609c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d60a0:	4413      	add	r3, r2
   d60a2:	7918      	ldrb	r0, [r3, #4]
   d60a4:	bd10      	pop	{r4, pc}
   d60a6:	6803      	ldr	r3, [r0, #0]
   d60a8:	691b      	ldr	r3, [r3, #16]
   d60aa:	4798      	blx	r3
   d60ac:	2800      	cmp	r0, #0
   d60ae:	d1f4      	bne.n	d609a <_ZN9TCPClient4peekEv+0x12>
   d60b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d60b4:	bd10      	pop	{r4, pc}

000d60b6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d60b6:	b510      	push	{r4, lr}
   d60b8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d60ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d60be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d60c2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d60c4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d60c6:	d008      	beq.n	d60da <_ZN9TCPClient4readEv+0x24>
   d60c8:	6962      	ldr	r2, [r4, #20]
   d60ca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d60ce:	1c59      	adds	r1, r3, #1
   d60d0:	4413      	add	r3, r2
   d60d2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d60d6:	7918      	ldrb	r0, [r3, #4]
   d60d8:	bd10      	pop	{r4, pc}
   d60da:	6803      	ldr	r3, [r0, #0]
   d60dc:	691b      	ldr	r3, [r3, #16]
   d60de:	4798      	blx	r3
   d60e0:	2800      	cmp	r0, #0
   d60e2:	d1f1      	bne.n	d60c8 <_ZN9TCPClient4readEv+0x12>
   d60e4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d60e8:	bd10      	pop	{r4, pc}

000d60ea <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d60ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60ec:	6943      	ldr	r3, [r0, #20]
   d60ee:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d60f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d60f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d60f8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d60fa:	4605      	mov	r5, r0
   d60fc:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d60fe:	d106      	bne.n	d610e <_ZN9TCPClient4readEPhj+0x24>
   d6100:	6803      	ldr	r3, [r0, #0]
   d6102:	691b      	ldr	r3, [r3, #16]
   d6104:	4798      	blx	r3
   d6106:	b910      	cbnz	r0, d610e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6108:	f04f 34ff 	mov.w	r4, #4294967295
   d610c:	e014      	b.n	d6138 <_ZN9TCPClient4readEPhj+0x4e>
   d610e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6110:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6114:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6118:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d611a:	42bc      	cmp	r4, r7
   d611c:	bf28      	it	cs
   d611e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6120:	4419      	add	r1, r3
   d6122:	4622      	mov	r2, r4
   d6124:	3104      	adds	r1, #4
   d6126:	4630      	mov	r0, r6
   d6128:	f000 fbed 	bl	d6906 <memcpy>
   d612c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d612e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6132:	4423      	add	r3, r4
   d6134:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6138:	4620      	mov	r0, r4
   d613a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d613c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d613c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d613e:	2300      	movs	r3, #0
   d6140:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6144:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6146:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d614a:	4770      	bx	lr

000d614c <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6150:	4698      	mov	r8, r3
    stop();
   d6152:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6154:	460d      	mov	r5, r1
   d6156:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d615a:	4606      	mov	r6, r0
   d615c:	4617      	mov	r7, r2
    stop();
   d615e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6160:	7d2b      	ldrb	r3, [r5, #20]
   d6162:	6974      	ldr	r4, [r6, #20]
   d6164:	2b04      	cmp	r3, #4
   d6166:	bf0c      	ite	eq
   d6168:	2002      	moveq	r0, #2
   d616a:	200a      	movne	r0, #10
   d616c:	2206      	movs	r2, #6
   d616e:	2101      	movs	r1, #1
   d6170:	f7fe fb4a 	bl	d4808 <sock_socket>
   d6174:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d6176:	6973      	ldr	r3, [r6, #20]
   d6178:	681c      	ldr	r4, [r3, #0]
   d617a:	2c00      	cmp	r4, #0
   d617c:	db5b      	blt.n	d6236 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d617e:	4630      	mov	r0, r6
   d6180:	f7ff ffdc 	bl	d613c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6184:	f1b8 0f00 	cmp.w	r8, #0
   d6188:	d017      	beq.n	d61ba <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d618a:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d618c:	a903      	add	r1, sp, #12
   d618e:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6192:	9303      	str	r3, [sp, #12]
   d6194:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d6198:	f7fe fa0e 	bl	d45b8 <if_index_to_name>
   d619c:	2800      	cmp	r0, #0
   d619e:	db49      	blt.n	d6234 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d61a0:	6970      	ldr	r0, [r6, #20]
   d61a2:	2306      	movs	r3, #6
   d61a4:	9300      	str	r3, [sp, #0]
   d61a6:	f241 020b 	movw	r2, #4107	; 0x100b
   d61aa:	ab03      	add	r3, sp, #12
   d61ac:	f640 71ff 	movw	r1, #4095	; 0xfff
   d61b0:	6800      	ldr	r0, [r0, #0]
   d61b2:	f7fe faf1 	bl	d4798 <sock_setsockopt>
   d61b6:	2800      	cmp	r0, #0
   d61b8:	db3c      	blt.n	d6234 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d61ba:	241c      	movs	r4, #28
   d61bc:	4622      	mov	r2, r4
   d61be:	2100      	movs	r1, #0
   d61c0:	a803      	add	r0, sp, #12
   d61c2:	f000 fbab 	bl	d691c <memset>
    if (ip.version() == 4) {
   d61c6:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d61c8:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d61cc:	2b04      	cmp	r3, #4
   d61ce:	d10c      	bne.n	d61ea <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d61d0:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d61d2:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d61d4:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d61d8:	f7fe fa96 	bl	d4708 <inet_htons>
   d61dc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d61e0:	6868      	ldr	r0, [r5, #4]
   d61e2:	f7fe fa81 	bl	d46e8 <inet_htonl>
   d61e6:	9004      	str	r0, [sp, #16]
   d61e8:	e013      	b.n	d6212 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d61ea:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d61ec:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d61ee:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d61f2:	f7fe fa89 	bl	d4708 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d61f6:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d61f8:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d61fc:	1d2b      	adds	r3, r5, #4
   d61fe:	f105 0714 	add.w	r7, r5, #20
   d6202:	6818      	ldr	r0, [r3, #0]
   d6204:	6859      	ldr	r1, [r3, #4]
   d6206:	4622      	mov	r2, r4
   d6208:	c203      	stmia	r2!, {r0, r1}
   d620a:	3308      	adds	r3, #8
   d620c:	42bb      	cmp	r3, r7
   d620e:	4614      	mov	r4, r2
   d6210:	d1f7      	bne.n	d6202 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6212:	6973      	ldr	r3, [r6, #20]
   d6214:	221c      	movs	r2, #28
   d6216:	a903      	add	r1, sp, #12
   d6218:	6818      	ldr	r0, [r3, #0]
   d621a:	f7fe facd 	bl	d47b8 <sock_connect>
   d621e:	2800      	cmp	r0, #0
   d6220:	db08      	blt.n	d6234 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6222:	1d2c      	adds	r4, r5, #4
   d6224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6226:	6976      	ldr	r6, [r6, #20]
   d6228:	368c      	adds	r6, #140	; 0x8c
   d622a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d622c:	6823      	ldr	r3, [r4, #0]
   d622e:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6230:	2401      	movs	r4, #1
   d6232:	e004      	b.n	d623e <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d6234:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6236:	6833      	ldr	r3, [r6, #0]
   d6238:	4630      	mov	r0, r6
   d623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d623c:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d623e:	4620      	mov	r0, r4
   d6240:	b00a      	add	sp, #40	; 0x28
   d6242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6246 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6246:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6248:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d624a:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d624c:	6818      	ldr	r0, [r3, #0]
   d624e:	2800      	cmp	r0, #0
   d6250:	db01      	blt.n	d6256 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6252:	f7fe faa9 	bl	d47a8 <sock_close>
   d6256:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6258:	f04f 32ff 	mov.w	r2, #4294967295
   d625c:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d625e:	6960      	ldr	r0, [r4, #20]
   d6260:	2211      	movs	r2, #17
   d6262:	2100      	movs	r1, #0
   d6264:	308c      	adds	r0, #140	; 0x8c
   d6266:	f000 fb59 	bl	d691c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d626a:	4620      	mov	r0, r4
}
   d626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6270:	f7ff bf64 	b.w	d613c <_ZN9TCPClient12flush_bufferEv>

000d6274 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6274:	b530      	push	{r4, r5, lr}
   d6276:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6278:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d627c:	b08b      	sub	sp, #44	; 0x2c
   d627e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6280:	b11b      	cbz	r3, d628a <_ZN9TCPClient9availableEv+0x16>
   d6282:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6286:	429a      	cmp	r2, r3
   d6288:	d040      	beq.n	d630c <_ZN9TCPClient9availableEv+0x98>
   d628a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d628c:	6818      	ldr	r0, [r3, #0]
   d628e:	2800      	cmp	r0, #0
   d6290:	db3f      	blt.n	d6312 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6292:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6296:	2d7f      	cmp	r5, #127	; 0x7f
   d6298:	d83b      	bhi.n	d6312 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d629a:	1d19      	adds	r1, r3, #4
   d629c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d62a0:	2308      	movs	r3, #8
   d62a2:	4429      	add	r1, r5
   d62a4:	f7fe fa90 	bl	d47c8 <sock_recv>
            if (ret > 0) {
   d62a8:	2800      	cmp	r0, #0
   d62aa:	dd0c      	ble.n	d62c6 <_ZN9TCPClient9availableEv+0x52>
   d62ac:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d62ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d62b2:	b90a      	cbnz	r2, d62b8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d62b4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d62b8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d62ba:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d62be:	4418      	add	r0, r3
   d62c0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d62c4:	e025      	b.n	d6312 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d62c6:	f7fe fb9d 	bl	d4a04 <__errno>
   d62ca:	6803      	ldr	r3, [r0, #0]
   d62cc:	2b0b      	cmp	r3, #11
   d62ce:	d020      	beq.n	d6312 <_ZN9TCPClient9availableEv+0x9e>
   d62d0:	f7fe fb98 	bl	d4a04 <__errno>
   d62d4:	6803      	ldr	r3, [r0, #0]
   d62d6:	2b0b      	cmp	r3, #11
   d62d8:	d01b      	beq.n	d6312 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d62da:	2320      	movs	r3, #32
   d62dc:	2500      	movs	r5, #0
   d62de:	9302      	str	r3, [sp, #8]
   d62e0:	9503      	str	r5, [sp, #12]
   d62e2:	f7fe fb8f 	bl	d4a04 <__errno>
   d62e6:	6803      	ldr	r3, [r0, #0]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	4b0e      	ldr	r3, [pc, #56]	; (d6324 <_ZN9TCPClient9availableEv+0xb0>)
   d62ec:	9300      	str	r3, [sp, #0]
   d62ee:	aa02      	add	r2, sp, #8
   d62f0:	462b      	mov	r3, r5
   d62f2:	490d      	ldr	r1, [pc, #52]	; (d6328 <_ZN9TCPClient9availableEv+0xb4>)
   d62f4:	2032      	movs	r0, #50	; 0x32
   d62f6:	f7fe fac7 	bl	d4888 <log_message>
                    sock_close(d_->sock);
   d62fa:	6963      	ldr	r3, [r4, #20]
   d62fc:	6818      	ldr	r0, [r3, #0]
   d62fe:	f7fe fa53 	bl	d47a8 <sock_close>
   d6302:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6304:	f04f 32ff 	mov.w	r2, #4294967295
   d6308:	601a      	str	r2, [r3, #0]
   d630a:	e002      	b.n	d6312 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d630c:	f7ff ff16 	bl	d613c <_ZN9TCPClient12flush_bufferEv>
   d6310:	e7bb      	b.n	d628a <_ZN9TCPClient9availableEv+0x16>
   d6312:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6314:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6318:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d631c:	1a18      	subs	r0, r3, r0
}
   d631e:	b00b      	add	sp, #44	; 0x2c
   d6320:	bd30      	pop	{r4, r5, pc}
   d6322:	bf00      	nop
   d6324:	000d6f0c 	.word	0x000d6f0c
   d6328:	000d6e8d 	.word	0x000d6e8d

000d632c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d632c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d632e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6330:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6332:	6001      	str	r1, [r0, #0]
   d6334:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6338:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d633c:	3088      	adds	r0, #136	; 0x88
   d633e:	f7ff f977 	bl	d5630 <_ZN9IPAddressC1Ev>
}
   d6342:	4620      	mov	r0, r4
   d6344:	bd10      	pop	{r4, pc}
	...

000d6348 <_ZN9TCPClientC1Ei>:
   d6348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d634c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d634e:	2300      	movs	r3, #0
   d6350:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6352:	4a14      	ldr	r2, [pc, #80]	; (d63a4 <_ZN9TCPClientC1Ei+0x5c>)
   d6354:	6043      	str	r3, [r0, #4]
   d6356:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6358:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d635a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d635c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d635e:	20a0      	movs	r0, #160	; 0xa0
   d6360:	460e      	mov	r6, r1
   d6362:	f7fd fe98 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6366:	4605      	mov	r5, r0
   d6368:	b110      	cbz	r0, d6370 <_ZN9TCPClientC1Ei+0x28>
   d636a:	4631      	mov	r1, r6
   d636c:	f7ff ffde 	bl	d632c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6370:	2014      	movs	r0, #20
   d6372:	f7fd fe90 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6376:	4603      	mov	r3, r0
   d6378:	b128      	cbz	r0, d6386 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d637a:	2201      	movs	r2, #1
   d637c:	6042      	str	r2, [r0, #4]
   d637e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6380:	4a09      	ldr	r2, [pc, #36]	; (d63a8 <_ZN9TCPClientC1Ei+0x60>)
   d6382:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6384:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6386:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6388:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d638a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d638c:	b128      	cbz	r0, d639a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d638e:	6843      	ldr	r3, [r0, #4]
   d6390:	3b01      	subs	r3, #1
   d6392:	6043      	str	r3, [r0, #4]
   d6394:	b90b      	cbnz	r3, d639a <_ZN9TCPClientC1Ei+0x52>
   d6396:	f7ff fe57 	bl	d6048 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d639a:	4620      	mov	r0, r4
   d639c:	f7ff fece 	bl	d613c <_ZN9TCPClient12flush_bufferEv>
}
   d63a0:	4620      	mov	r0, r4
   d63a2:	bd70      	pop	{r4, r5, r6, pc}
   d63a4:	000d6ec8 	.word	0x000d6ec8
   d63a8:	000d6eac 	.word	0x000d6eac

000d63ac <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d63ac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d63ae:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d63b2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d63b4:	f7ff ffc8 	bl	d6348 <_ZN9TCPClientC1Ei>
}
   d63b8:	4620      	mov	r0, r4
   d63ba:	bd10      	pop	{r4, pc}

000d63bc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d63bc:	b510      	push	{r4, lr}
   d63be:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d63c0:	6800      	ldr	r0, [r0, #0]
   d63c2:	2800      	cmp	r0, #0
   d63c4:	db01      	blt.n	d63ca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d63c6:	f7fe f9ef 	bl	d47a8 <sock_close>
    }
}
   d63ca:	4620      	mov	r0, r4
   d63cc:	bd10      	pop	{r4, pc}

000d63ce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d63ce:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d63d0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d63d2:	4620      	mov	r0, r4
   d63d4:	f7ff fff2 	bl	d63bc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d63d8:	b124      	cbz	r4, d63e4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d63da:	4620      	mov	r0, r4
   d63dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d63e0:	f7fd be5d 	b.w	d409e <_ZdlPv>
   d63e4:	bd10      	pop	{r4, pc}

000d63e6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d63e6:	2200      	movs	r2, #0
   d63e8:	4611      	mov	r1, r2
   d63ea:	6840      	ldr	r0, [r0, #4]
   d63ec:	f7fe baa2 	b.w	d4934 <network_ready>

000d63f0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d63f0:	2200      	movs	r2, #0
   d63f2:	4611      	mov	r1, r2
   d63f4:	6840      	ldr	r0, [r0, #4]
   d63f6:	f7fe babd 	b.w	d4974 <network_listening>

000d63fa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d63fa:	2200      	movs	r2, #0
   d63fc:	4611      	mov	r1, r2
   d63fe:	6840      	ldr	r0, [r0, #4]
   d6400:	f7fe bac8 	b.w	d4994 <network_get_listen_timeout>

000d6404 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6404:	2200      	movs	r2, #0
   d6406:	6840      	ldr	r0, [r0, #4]
   d6408:	f7fe babc 	b.w	d4984 <network_set_listen_timeout>

000d640c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d640c:	2200      	movs	r2, #0
   d640e:	f081 0101 	eor.w	r1, r1, #1
   d6412:	6840      	ldr	r0, [r0, #4]
   d6414:	f7fe baa6 	b.w	d4964 <network_listen>

000d6418 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6418:	2300      	movs	r3, #0
   d641a:	461a      	mov	r2, r3
   d641c:	4619      	mov	r1, r3
   d641e:	6840      	ldr	r0, [r0, #4]
   d6420:	f7fe ba98 	b.w	d4954 <network_off>

000d6424 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6424:	2300      	movs	r3, #0
   d6426:	461a      	mov	r2, r3
   d6428:	4619      	mov	r1, r3
   d642a:	6840      	ldr	r0, [r0, #4]
   d642c:	f7fe ba8a 	b.w	d4944 <network_on>

000d6430 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6430:	2200      	movs	r2, #0
   d6432:	4611      	mov	r1, r2
   d6434:	6840      	ldr	r0, [r0, #4]
   d6436:	f7fe ba6d 	b.w	d4914 <network_connecting>

000d643a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d643a:	2200      	movs	r2, #0
   d643c:	2102      	movs	r1, #2
   d643e:	6840      	ldr	r0, [r0, #4]
   d6440:	f7fe ba70 	b.w	d4924 <network_disconnect>

000d6444 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6444:	2300      	movs	r3, #0
   d6446:	461a      	mov	r2, r3
   d6448:	6840      	ldr	r0, [r0, #4]
   d644a:	f7fe ba5b 	b.w	d4904 <network_connect>
	...

000d6450 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6450:	4b02      	ldr	r3, [pc, #8]	; (d645c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6452:	2204      	movs	r2, #4
   d6454:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6456:	4a02      	ldr	r2, [pc, #8]	; (d6460 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6458:	601a      	str	r2, [r3, #0]
   d645a:	4770      	bx	lr
   d645c:	2003e718 	.word	0x2003e718
   d6460:	000d6f24 	.word	0x000d6f24

000d6464 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6464:	2300      	movs	r3, #0
   d6466:	461a      	mov	r2, r3
   d6468:	6840      	ldr	r0, [r0, #4]
   d646a:	f7fe ba4b 	b.w	d4904 <network_connect>

000d646e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d646e:	2200      	movs	r2, #0
   d6470:	2102      	movs	r1, #2
   d6472:	6840      	ldr	r0, [r0, #4]
   d6474:	f7fe ba56 	b.w	d4924 <network_disconnect>

000d6478 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6478:	2200      	movs	r2, #0
   d647a:	4611      	mov	r1, r2
   d647c:	6840      	ldr	r0, [r0, #4]
   d647e:	f7fe ba49 	b.w	d4914 <network_connecting>

000d6482 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6482:	2200      	movs	r2, #0
   d6484:	4611      	mov	r1, r2
   d6486:	6840      	ldr	r0, [r0, #4]
   d6488:	f7fe ba54 	b.w	d4934 <network_ready>

000d648c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d648c:	2300      	movs	r3, #0
   d648e:	461a      	mov	r2, r3
   d6490:	4619      	mov	r1, r3
   d6492:	6840      	ldr	r0, [r0, #4]
   d6494:	f7fe ba56 	b.w	d4944 <network_on>

000d6498 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6498:	2300      	movs	r3, #0
   d649a:	461a      	mov	r2, r3
   d649c:	4619      	mov	r1, r3
   d649e:	6840      	ldr	r0, [r0, #4]
   d64a0:	f7fe ba58 	b.w	d4954 <network_off>

000d64a4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d64a4:	2200      	movs	r2, #0
   d64a6:	f081 0101 	eor.w	r1, r1, #1
   d64aa:	6840      	ldr	r0, [r0, #4]
   d64ac:	f7fe ba5a 	b.w	d4964 <network_listen>

000d64b0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d64b0:	2200      	movs	r2, #0
   d64b2:	6840      	ldr	r0, [r0, #4]
   d64b4:	f7fe ba66 	b.w	d4984 <network_set_listen_timeout>

000d64b8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d64b8:	2200      	movs	r2, #0
   d64ba:	4611      	mov	r1, r2
   d64bc:	6840      	ldr	r0, [r0, #4]
   d64be:	f7fe ba69 	b.w	d4994 <network_get_listen_timeout>

000d64c2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d64c2:	2200      	movs	r2, #0
   d64c4:	4611      	mov	r1, r2
   d64c6:	6840      	ldr	r0, [r0, #4]
   d64c8:	f7fe ba54 	b.w	d4974 <network_listening>

000d64cc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d64cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d64d0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d64d2:	b095      	sub	sp, #84	; 0x54
   d64d4:	4616      	mov	r6, r2
   d64d6:	460d      	mov	r5, r1
   d64d8:	4607      	mov	r7, r0
    IPAddress addr;
   d64da:	f7ff f8a9 	bl	d5630 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d64de:	4621      	mov	r1, r4
   d64e0:	2220      	movs	r2, #32
   d64e2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d64e4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d64e6:	f000 fa19 	bl	d691c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d64ea:	2340      	movs	r3, #64	; 0x40
   d64ec:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d64ee:	4621      	mov	r1, r4
   d64f0:	466b      	mov	r3, sp
   d64f2:	aa0c      	add	r2, sp, #48	; 0x30
   d64f4:	4630      	mov	r0, r6
   d64f6:	f7fe f83f 	bl	d4578 <netdb_getaddrinfo>
    if (!r) {
   d64fa:	4604      	mov	r4, r0
   d64fc:	2800      	cmp	r0, #0
   d64fe:	d144      	bne.n	d658a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6500:	4602      	mov	r2, r0
   d6502:	2101      	movs	r1, #1
   d6504:	6868      	ldr	r0, [r5, #4]
   d6506:	f7fe fa15 	bl	d4934 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d650a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d650c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d650e:	4622      	mov	r2, r4
   d6510:	6868      	ldr	r0, [r5, #4]
   d6512:	f7fe fa0f 	bl	d4934 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6516:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6518:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d651a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d651c:	2e00      	cmp	r6, #0
   d651e:	d034      	beq.n	d658a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6520:	2900      	cmp	r1, #0
   d6522:	d132      	bne.n	d658a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6524:	6873      	ldr	r3, [r6, #4]
   d6526:	2b02      	cmp	r3, #2
   d6528:	d002      	beq.n	d6530 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d652a:	2b0a      	cmp	r3, #10
   d652c:	d009      	beq.n	d6542 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d652e:	e02a      	b.n	d6586 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6530:	f1b8 0f00 	cmp.w	r8, #0
   d6534:	d027      	beq.n	d6586 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6536:	6971      	ldr	r1, [r6, #20]
   d6538:	4638      	mov	r0, r7
   d653a:	3104      	adds	r1, #4
   d653c:	f7ff f8c8 	bl	d56d0 <_ZN9IPAddressaSEPKh>
   d6540:	e020      	b.n	d6584 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6542:	f1b9 0f00 	cmp.w	r9, #0
   d6546:	d01e      	beq.n	d6586 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6548:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d654a:	2211      	movs	r2, #17
   d654c:	a801      	add	r0, sp, #4
   d654e:	f000 f9e5 	bl	d691c <memset>
                    a.v = 6;
   d6552:	2306      	movs	r3, #6
   d6554:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6558:	ad01      	add	r5, sp, #4
   d655a:	f104 0308 	add.w	r3, r4, #8
   d655e:	3418      	adds	r4, #24
   d6560:	6818      	ldr	r0, [r3, #0]
   d6562:	6859      	ldr	r1, [r3, #4]
   d6564:	462a      	mov	r2, r5
   d6566:	c203      	stmia	r2!, {r0, r1}
   d6568:	3308      	adds	r3, #8
   d656a:	42a3      	cmp	r3, r4
   d656c:	4615      	mov	r5, r2
   d656e:	d1f7      	bne.n	d6560 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6570:	a901      	add	r1, sp, #4
   d6572:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6574:	ad07      	add	r5, sp, #28
   d6576:	f7ff f869 	bl	d564c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d657a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d657c:	1d3c      	adds	r4, r7, #4
   d657e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6580:	682b      	ldr	r3, [r5, #0]
   d6582:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6584:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6586:	69f6      	ldr	r6, [r6, #28]
   d6588:	e7c8      	b.n	d651c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d658a:	9800      	ldr	r0, [sp, #0]
   d658c:	f7fd ffec 	bl	d4568 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6590:	4638      	mov	r0, r7
   d6592:	b015      	add	sp, #84	; 0x54
   d6594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6598 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6598:	4b02      	ldr	r3, [pc, #8]	; (d65a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d659a:	4a03      	ldr	r2, [pc, #12]	; (d65a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d659c:	601a      	str	r2, [r3, #0]
   d659e:	2200      	movs	r2, #0
   d65a0:	605a      	str	r2, [r3, #4]
   d65a2:	4770      	bx	lr
   d65a4:	2003e720 	.word	0x2003e720
   d65a8:	000d6f58 	.word	0x000d6f58

000d65ac <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65ac:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65ae:	4c0c      	ldr	r4, [pc, #48]	; (d65e0 <_GLOBAL__sub_I_SPI+0x34>)
   d65b0:	4e0c      	ldr	r6, [pc, #48]	; (d65e4 <_GLOBAL__sub_I_SPI+0x38>)
   d65b2:	4d0d      	ldr	r5, [pc, #52]	; (d65e8 <_GLOBAL__sub_I_SPI+0x3c>)
   d65b4:	2100      	movs	r1, #0
   d65b6:	4620      	mov	r0, r4
   d65b8:	f7fe fa72 	bl	d4aa0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65bc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65be:	4c0b      	ldr	r4, [pc, #44]	; (d65ec <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d65c0:	4632      	mov	r2, r6
   d65c2:	4629      	mov	r1, r5
   d65c4:	f000 f814 	bl	d65f0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d65c8:	2101      	movs	r1, #1
   d65ca:	4620      	mov	r0, r4
   d65cc:	f7fe fa68 	bl	d4aa0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d65d0:	4632      	mov	r2, r6
   d65d2:	4629      	mov	r1, r5
   d65d4:	4620      	mov	r0, r4
   d65d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d65da:	f000 b809 	b.w	d65f0 <__aeabi_atexit>
   d65de:	bf00      	nop
   d65e0:	2003e728 	.word	0x2003e728
   d65e4:	2003df64 	.word	0x2003df64
   d65e8:	000d4a91 	.word	0x000d4a91
   d65ec:	2003e738 	.word	0x2003e738

000d65f0 <__aeabi_atexit>:
   d65f0:	460b      	mov	r3, r1
   d65f2:	4601      	mov	r1, r0
   d65f4:	4618      	mov	r0, r3
   d65f6:	f000 b969 	b.w	d68cc <__cxa_atexit>
	...

000d65fc <_ZSt15get_new_handlerv>:
   d65fc:	4b02      	ldr	r3, [pc, #8]	; (d6608 <_ZSt15get_new_handlerv+0xc>)
   d65fe:	6818      	ldr	r0, [r3, #0]
   d6600:	f3bf 8f5f 	dmb	sy
   d6604:	4770      	bx	lr
   d6606:	bf00      	nop
   d6608:	2003e74c 	.word	0x2003e74c

000d660c <_ZnajRKSt9nothrow_t>:
   d660c:	f000 b800 	b.w	d6610 <_ZnwjRKSt9nothrow_t>

000d6610 <_ZnwjRKSt9nothrow_t>:
   d6610:	b510      	push	{r4, lr}
   d6612:	2800      	cmp	r0, #0
   d6614:	bf14      	ite	ne
   d6616:	4604      	movne	r4, r0
   d6618:	2401      	moveq	r4, #1
   d661a:	4620      	mov	r0, r4
   d661c:	f7fe f9d2 	bl	d49c4 <malloc>
   d6620:	b920      	cbnz	r0, d662c <_ZnwjRKSt9nothrow_t+0x1c>
   d6622:	f7ff ffeb 	bl	d65fc <_ZSt15get_new_handlerv>
   d6626:	b108      	cbz	r0, d662c <_ZnwjRKSt9nothrow_t+0x1c>
   d6628:	4780      	blx	r0
   d662a:	e7f6      	b.n	d661a <_ZnwjRKSt9nothrow_t+0xa>
   d662c:	bd10      	pop	{r4, pc}

000d662e <_ZSt25__throw_bad_function_callv>:
   d662e:	b508      	push	{r3, lr}
   d6630:	f7fe f9e0 	bl	d49f4 <abort>

000d6634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6634:	4b18      	ldr	r3, [pc, #96]	; (d6698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6636:	681a      	ldr	r2, [r3, #0]
   d6638:	07d1      	lsls	r1, r2, #31
   d663a:	bf5c      	itt	pl
   d663c:	2201      	movpl	r2, #1
   d663e:	601a      	strpl	r2, [r3, #0]
   d6640:	4b16      	ldr	r3, [pc, #88]	; (d669c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6642:	681a      	ldr	r2, [r3, #0]
   d6644:	07d2      	lsls	r2, r2, #31
   d6646:	bf5c      	itt	pl
   d6648:	2201      	movpl	r2, #1
   d664a:	601a      	strpl	r2, [r3, #0]
   d664c:	4b14      	ldr	r3, [pc, #80]	; (d66a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d664e:	681a      	ldr	r2, [r3, #0]
   d6650:	07d0      	lsls	r0, r2, #31
   d6652:	bf5c      	itt	pl
   d6654:	2201      	movpl	r2, #1
   d6656:	601a      	strpl	r2, [r3, #0]
   d6658:	4b12      	ldr	r3, [pc, #72]	; (d66a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d665a:	681a      	ldr	r2, [r3, #0]
   d665c:	07d1      	lsls	r1, r2, #31
   d665e:	bf5c      	itt	pl
   d6660:	2201      	movpl	r2, #1
   d6662:	601a      	strpl	r2, [r3, #0]
   d6664:	4b10      	ldr	r3, [pc, #64]	; (d66a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6666:	681a      	ldr	r2, [r3, #0]
   d6668:	07d2      	lsls	r2, r2, #31
   d666a:	bf5c      	itt	pl
   d666c:	2201      	movpl	r2, #1
   d666e:	601a      	strpl	r2, [r3, #0]
   d6670:	4b0e      	ldr	r3, [pc, #56]	; (d66ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6672:	681a      	ldr	r2, [r3, #0]
   d6674:	07d0      	lsls	r0, r2, #31
   d6676:	bf5c      	itt	pl
   d6678:	2201      	movpl	r2, #1
   d667a:	601a      	strpl	r2, [r3, #0]
   d667c:	4b0c      	ldr	r3, [pc, #48]	; (d66b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d667e:	681a      	ldr	r2, [r3, #0]
   d6680:	07d1      	lsls	r1, r2, #31
   d6682:	bf5c      	itt	pl
   d6684:	2201      	movpl	r2, #1
   d6686:	601a      	strpl	r2, [r3, #0]
   d6688:	4b0a      	ldr	r3, [pc, #40]	; (d66b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d668a:	681a      	ldr	r2, [r3, #0]
   d668c:	07d2      	lsls	r2, r2, #31
   d668e:	bf5c      	itt	pl
   d6690:	2201      	movpl	r2, #1
   d6692:	601a      	strpl	r2, [r3, #0]
   d6694:	4770      	bx	lr
   d6696:	bf00      	nop
   d6698:	2003e76c 	.word	0x2003e76c
   d669c:	2003e768 	.word	0x2003e768
   d66a0:	2003e764 	.word	0x2003e764
   d66a4:	2003e760 	.word	0x2003e760
   d66a8:	2003e75c 	.word	0x2003e75c
   d66ac:	2003e758 	.word	0x2003e758
   d66b0:	2003e754 	.word	0x2003e754
   d66b4:	2003e750 	.word	0x2003e750

000d66b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d66b8:	4b24      	ldr	r3, [pc, #144]	; (d674c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d66ba:	681a      	ldr	r2, [r3, #0]
   d66bc:	07d0      	lsls	r0, r2, #31
   d66be:	bf5c      	itt	pl
   d66c0:	2201      	movpl	r2, #1
   d66c2:	601a      	strpl	r2, [r3, #0]
   d66c4:	4b22      	ldr	r3, [pc, #136]	; (d6750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d66c6:	681a      	ldr	r2, [r3, #0]
   d66c8:	07d1      	lsls	r1, r2, #31
   d66ca:	bf5c      	itt	pl
   d66cc:	2201      	movpl	r2, #1
   d66ce:	601a      	strpl	r2, [r3, #0]
   d66d0:	4b20      	ldr	r3, [pc, #128]	; (d6754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d66d2:	681a      	ldr	r2, [r3, #0]
   d66d4:	07d2      	lsls	r2, r2, #31
   d66d6:	bf5c      	itt	pl
   d66d8:	2201      	movpl	r2, #1
   d66da:	601a      	strpl	r2, [r3, #0]
   d66dc:	4b1e      	ldr	r3, [pc, #120]	; (d6758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d66de:	681a      	ldr	r2, [r3, #0]
   d66e0:	07d0      	lsls	r0, r2, #31
   d66e2:	bf5c      	itt	pl
   d66e4:	2201      	movpl	r2, #1
   d66e6:	601a      	strpl	r2, [r3, #0]
   d66e8:	4b1c      	ldr	r3, [pc, #112]	; (d675c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d66ea:	681a      	ldr	r2, [r3, #0]
   d66ec:	07d1      	lsls	r1, r2, #31
   d66ee:	bf5c      	itt	pl
   d66f0:	2201      	movpl	r2, #1
   d66f2:	601a      	strpl	r2, [r3, #0]
   d66f4:	4b1a      	ldr	r3, [pc, #104]	; (d6760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d66f6:	681a      	ldr	r2, [r3, #0]
   d66f8:	07d2      	lsls	r2, r2, #31
   d66fa:	bf5c      	itt	pl
   d66fc:	2201      	movpl	r2, #1
   d66fe:	601a      	strpl	r2, [r3, #0]
   d6700:	4b18      	ldr	r3, [pc, #96]	; (d6764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6702:	681a      	ldr	r2, [r3, #0]
   d6704:	07d0      	lsls	r0, r2, #31
   d6706:	bf5c      	itt	pl
   d6708:	2201      	movpl	r2, #1
   d670a:	601a      	strpl	r2, [r3, #0]
   d670c:	4b16      	ldr	r3, [pc, #88]	; (d6768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d670e:	681a      	ldr	r2, [r3, #0]
   d6710:	07d1      	lsls	r1, r2, #31
   d6712:	bf5c      	itt	pl
   d6714:	2201      	movpl	r2, #1
   d6716:	601a      	strpl	r2, [r3, #0]
   d6718:	4b14      	ldr	r3, [pc, #80]	; (d676c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d671a:	681a      	ldr	r2, [r3, #0]
   d671c:	07d2      	lsls	r2, r2, #31
   d671e:	bf5c      	itt	pl
   d6720:	2201      	movpl	r2, #1
   d6722:	601a      	strpl	r2, [r3, #0]
   d6724:	4b12      	ldr	r3, [pc, #72]	; (d6770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6726:	681a      	ldr	r2, [r3, #0]
   d6728:	07d0      	lsls	r0, r2, #31
   d672a:	bf5c      	itt	pl
   d672c:	2201      	movpl	r2, #1
   d672e:	601a      	strpl	r2, [r3, #0]
   d6730:	4b10      	ldr	r3, [pc, #64]	; (d6774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6732:	681a      	ldr	r2, [r3, #0]
   d6734:	07d1      	lsls	r1, r2, #31
   d6736:	bf5c      	itt	pl
   d6738:	2201      	movpl	r2, #1
   d673a:	601a      	strpl	r2, [r3, #0]
   d673c:	4b0e      	ldr	r3, [pc, #56]	; (d6778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d673e:	681a      	ldr	r2, [r3, #0]
   d6740:	07d2      	lsls	r2, r2, #31
   d6742:	bf5c      	itt	pl
   d6744:	2201      	movpl	r2, #1
   d6746:	601a      	strpl	r2, [r3, #0]
   d6748:	4770      	bx	lr
   d674a:	bf00      	nop
   d674c:	2003e79c 	.word	0x2003e79c
   d6750:	2003e798 	.word	0x2003e798
   d6754:	2003e794 	.word	0x2003e794
   d6758:	2003e790 	.word	0x2003e790
   d675c:	2003e78c 	.word	0x2003e78c
   d6760:	2003e788 	.word	0x2003e788
   d6764:	2003e784 	.word	0x2003e784
   d6768:	2003e780 	.word	0x2003e780
   d676c:	2003e77c 	.word	0x2003e77c
   d6770:	2003e778 	.word	0x2003e778
   d6774:	2003e774 	.word	0x2003e774
   d6778:	2003e770 	.word	0x2003e770

000d677c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d677c:	4b24      	ldr	r3, [pc, #144]	; (d6810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d677e:	681a      	ldr	r2, [r3, #0]
   d6780:	07d0      	lsls	r0, r2, #31
   d6782:	bf5c      	itt	pl
   d6784:	2201      	movpl	r2, #1
   d6786:	601a      	strpl	r2, [r3, #0]
   d6788:	4b22      	ldr	r3, [pc, #136]	; (d6814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d678a:	681a      	ldr	r2, [r3, #0]
   d678c:	07d1      	lsls	r1, r2, #31
   d678e:	bf5c      	itt	pl
   d6790:	2201      	movpl	r2, #1
   d6792:	601a      	strpl	r2, [r3, #0]
   d6794:	4b20      	ldr	r3, [pc, #128]	; (d6818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6796:	681a      	ldr	r2, [r3, #0]
   d6798:	07d2      	lsls	r2, r2, #31
   d679a:	bf5c      	itt	pl
   d679c:	2201      	movpl	r2, #1
   d679e:	601a      	strpl	r2, [r3, #0]
   d67a0:	4b1e      	ldr	r3, [pc, #120]	; (d681c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d67a2:	681a      	ldr	r2, [r3, #0]
   d67a4:	07d0      	lsls	r0, r2, #31
   d67a6:	bf5c      	itt	pl
   d67a8:	2201      	movpl	r2, #1
   d67aa:	601a      	strpl	r2, [r3, #0]
   d67ac:	4b1c      	ldr	r3, [pc, #112]	; (d6820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d67ae:	681a      	ldr	r2, [r3, #0]
   d67b0:	07d1      	lsls	r1, r2, #31
   d67b2:	bf5c      	itt	pl
   d67b4:	2201      	movpl	r2, #1
   d67b6:	601a      	strpl	r2, [r3, #0]
   d67b8:	4b1a      	ldr	r3, [pc, #104]	; (d6824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d67ba:	681a      	ldr	r2, [r3, #0]
   d67bc:	07d2      	lsls	r2, r2, #31
   d67be:	bf5c      	itt	pl
   d67c0:	2201      	movpl	r2, #1
   d67c2:	601a      	strpl	r2, [r3, #0]
   d67c4:	4b18      	ldr	r3, [pc, #96]	; (d6828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d67c6:	681a      	ldr	r2, [r3, #0]
   d67c8:	07d0      	lsls	r0, r2, #31
   d67ca:	bf5c      	itt	pl
   d67cc:	2201      	movpl	r2, #1
   d67ce:	601a      	strpl	r2, [r3, #0]
   d67d0:	4b16      	ldr	r3, [pc, #88]	; (d682c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d67d2:	681a      	ldr	r2, [r3, #0]
   d67d4:	07d1      	lsls	r1, r2, #31
   d67d6:	bf5c      	itt	pl
   d67d8:	2201      	movpl	r2, #1
   d67da:	601a      	strpl	r2, [r3, #0]
   d67dc:	4b14      	ldr	r3, [pc, #80]	; (d6830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d67de:	681a      	ldr	r2, [r3, #0]
   d67e0:	07d2      	lsls	r2, r2, #31
   d67e2:	bf5c      	itt	pl
   d67e4:	2201      	movpl	r2, #1
   d67e6:	601a      	strpl	r2, [r3, #0]
   d67e8:	4b12      	ldr	r3, [pc, #72]	; (d6834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d67ea:	681a      	ldr	r2, [r3, #0]
   d67ec:	07d0      	lsls	r0, r2, #31
   d67ee:	bf5c      	itt	pl
   d67f0:	2201      	movpl	r2, #1
   d67f2:	601a      	strpl	r2, [r3, #0]
   d67f4:	4b10      	ldr	r3, [pc, #64]	; (d6838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d67f6:	681a      	ldr	r2, [r3, #0]
   d67f8:	07d1      	lsls	r1, r2, #31
   d67fa:	bf5c      	itt	pl
   d67fc:	2201      	movpl	r2, #1
   d67fe:	601a      	strpl	r2, [r3, #0]
   d6800:	4b0e      	ldr	r3, [pc, #56]	; (d683c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6802:	681a      	ldr	r2, [r3, #0]
   d6804:	07d2      	lsls	r2, r2, #31
   d6806:	bf5c      	itt	pl
   d6808:	2201      	movpl	r2, #1
   d680a:	601a      	strpl	r2, [r3, #0]
   d680c:	4770      	bx	lr
   d680e:	bf00      	nop
   d6810:	2003e7cc 	.word	0x2003e7cc
   d6814:	2003e7c8 	.word	0x2003e7c8
   d6818:	2003e7c4 	.word	0x2003e7c4
   d681c:	2003e7c0 	.word	0x2003e7c0
   d6820:	2003e7bc 	.word	0x2003e7bc
   d6824:	2003e7b8 	.word	0x2003e7b8
   d6828:	2003e7b4 	.word	0x2003e7b4
   d682c:	2003e7b0 	.word	0x2003e7b0
   d6830:	2003e7ac 	.word	0x2003e7ac
   d6834:	2003e7a8 	.word	0x2003e7a8
   d6838:	2003e7a4 	.word	0x2003e7a4
   d683c:	2003e7a0 	.word	0x2003e7a0

000d6840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6840:	4b18      	ldr	r3, [pc, #96]	; (d68a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6842:	681a      	ldr	r2, [r3, #0]
   d6844:	07d1      	lsls	r1, r2, #31
   d6846:	bf5c      	itt	pl
   d6848:	2201      	movpl	r2, #1
   d684a:	601a      	strpl	r2, [r3, #0]
   d684c:	4b16      	ldr	r3, [pc, #88]	; (d68a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d684e:	681a      	ldr	r2, [r3, #0]
   d6850:	07d2      	lsls	r2, r2, #31
   d6852:	bf5c      	itt	pl
   d6854:	2201      	movpl	r2, #1
   d6856:	601a      	strpl	r2, [r3, #0]
   d6858:	4b14      	ldr	r3, [pc, #80]	; (d68ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d685a:	681a      	ldr	r2, [r3, #0]
   d685c:	07d0      	lsls	r0, r2, #31
   d685e:	bf5c      	itt	pl
   d6860:	2201      	movpl	r2, #1
   d6862:	601a      	strpl	r2, [r3, #0]
   d6864:	4b12      	ldr	r3, [pc, #72]	; (d68b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6866:	681a      	ldr	r2, [r3, #0]
   d6868:	07d1      	lsls	r1, r2, #31
   d686a:	bf5c      	itt	pl
   d686c:	2201      	movpl	r2, #1
   d686e:	601a      	strpl	r2, [r3, #0]
   d6870:	4b10      	ldr	r3, [pc, #64]	; (d68b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6872:	681a      	ldr	r2, [r3, #0]
   d6874:	07d2      	lsls	r2, r2, #31
   d6876:	bf5c      	itt	pl
   d6878:	2201      	movpl	r2, #1
   d687a:	601a      	strpl	r2, [r3, #0]
   d687c:	4b0e      	ldr	r3, [pc, #56]	; (d68b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d687e:	681a      	ldr	r2, [r3, #0]
   d6880:	07d0      	lsls	r0, r2, #31
   d6882:	bf5c      	itt	pl
   d6884:	2201      	movpl	r2, #1
   d6886:	601a      	strpl	r2, [r3, #0]
   d6888:	4b0c      	ldr	r3, [pc, #48]	; (d68bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d688a:	681a      	ldr	r2, [r3, #0]
   d688c:	07d1      	lsls	r1, r2, #31
   d688e:	bf5c      	itt	pl
   d6890:	2201      	movpl	r2, #1
   d6892:	601a      	strpl	r2, [r3, #0]
   d6894:	4b0a      	ldr	r3, [pc, #40]	; (d68c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6896:	681a      	ldr	r2, [r3, #0]
   d6898:	07d2      	lsls	r2, r2, #31
   d689a:	bf5c      	itt	pl
   d689c:	2201      	movpl	r2, #1
   d689e:	601a      	strpl	r2, [r3, #0]
   d68a0:	4770      	bx	lr
   d68a2:	bf00      	nop
   d68a4:	2003e7ec 	.word	0x2003e7ec
   d68a8:	2003e7e8 	.word	0x2003e7e8
   d68ac:	2003e7e4 	.word	0x2003e7e4
   d68b0:	2003e7e0 	.word	0x2003e7e0
   d68b4:	2003e7dc 	.word	0x2003e7dc
   d68b8:	2003e7d8 	.word	0x2003e7d8
   d68bc:	2003e7d4 	.word	0x2003e7d4
   d68c0:	2003e7d0 	.word	0x2003e7d0

000d68c4 <atoi>:
   d68c4:	220a      	movs	r2, #10
   d68c6:	2100      	movs	r1, #0
   d68c8:	f000 b934 	b.w	d6b34 <strtol>

000d68cc <__cxa_atexit>:
   d68cc:	b510      	push	{r4, lr}
   d68ce:	4c05      	ldr	r4, [pc, #20]	; (d68e4 <__cxa_atexit+0x18>)
   d68d0:	4613      	mov	r3, r2
   d68d2:	b12c      	cbz	r4, d68e0 <__cxa_atexit+0x14>
   d68d4:	460a      	mov	r2, r1
   d68d6:	4601      	mov	r1, r0
   d68d8:	2002      	movs	r0, #2
   d68da:	f3af 8000 	nop.w
   d68de:	bd10      	pop	{r4, pc}
   d68e0:	4620      	mov	r0, r4
   d68e2:	bd10      	pop	{r4, pc}
   d68e4:	00000000 	.word	0x00000000

000d68e8 <memcmp>:
   d68e8:	b510      	push	{r4, lr}
   d68ea:	3901      	subs	r1, #1
   d68ec:	4402      	add	r2, r0
   d68ee:	4290      	cmp	r0, r2
   d68f0:	d007      	beq.n	d6902 <memcmp+0x1a>
   d68f2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d68f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d68fa:	42a3      	cmp	r3, r4
   d68fc:	d0f7      	beq.n	d68ee <memcmp+0x6>
   d68fe:	1b18      	subs	r0, r3, r4
   d6900:	bd10      	pop	{r4, pc}
   d6902:	2000      	movs	r0, #0
   d6904:	bd10      	pop	{r4, pc}

000d6906 <memcpy>:
   d6906:	b510      	push	{r4, lr}
   d6908:	1e43      	subs	r3, r0, #1
   d690a:	440a      	add	r2, r1
   d690c:	4291      	cmp	r1, r2
   d690e:	d004      	beq.n	d691a <memcpy+0x14>
   d6910:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6914:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6918:	e7f8      	b.n	d690c <memcpy+0x6>
   d691a:	bd10      	pop	{r4, pc}

000d691c <memset>:
   d691c:	4402      	add	r2, r0
   d691e:	4603      	mov	r3, r0
   d6920:	4293      	cmp	r3, r2
   d6922:	d002      	beq.n	d692a <memset+0xe>
   d6924:	f803 1b01 	strb.w	r1, [r3], #1
   d6928:	e7fa      	b.n	d6920 <memset+0x4>
   d692a:	4770      	bx	lr

000d692c <srand>:
   d692c:	b538      	push	{r3, r4, r5, lr}
   d692e:	4b12      	ldr	r3, [pc, #72]	; (d6978 <srand+0x4c>)
   d6930:	681c      	ldr	r4, [r3, #0]
   d6932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6934:	4605      	mov	r5, r0
   d6936:	b9d3      	cbnz	r3, d696e <srand+0x42>
   d6938:	2018      	movs	r0, #24
   d693a:	f7fe f843 	bl	d49c4 <malloc>
   d693e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6942:	63a0      	str	r0, [r4, #56]	; 0x38
   d6944:	8003      	strh	r3, [r0, #0]
   d6946:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d694a:	8043      	strh	r3, [r0, #2]
   d694c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6950:	8083      	strh	r3, [r0, #4]
   d6952:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6956:	80c3      	strh	r3, [r0, #6]
   d6958:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d695c:	8103      	strh	r3, [r0, #8]
   d695e:	2305      	movs	r3, #5
   d6960:	8143      	strh	r3, [r0, #10]
   d6962:	230b      	movs	r3, #11
   d6964:	8183      	strh	r3, [r0, #12]
   d6966:	2201      	movs	r2, #1
   d6968:	2300      	movs	r3, #0
   d696a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d696e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6970:	2200      	movs	r2, #0
   d6972:	611d      	str	r5, [r3, #16]
   d6974:	615a      	str	r2, [r3, #20]
   d6976:	bd38      	pop	{r3, r4, r5, pc}
   d6978:	2003df60 	.word	0x2003df60

000d697c <strcmp>:
   d697c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6980:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6984:	2a01      	cmp	r2, #1
   d6986:	bf28      	it	cs
   d6988:	429a      	cmpcs	r2, r3
   d698a:	d0f7      	beq.n	d697c <strcmp>
   d698c:	1ad0      	subs	r0, r2, r3
   d698e:	4770      	bx	lr

000d6990 <strcpy>:
   d6990:	4603      	mov	r3, r0
   d6992:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6996:	f803 2b01 	strb.w	r2, [r3], #1
   d699a:	2a00      	cmp	r2, #0
   d699c:	d1f9      	bne.n	d6992 <strcpy+0x2>
   d699e:	4770      	bx	lr

000d69a0 <strlen>:
   d69a0:	4603      	mov	r3, r0
   d69a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d69a6:	2a00      	cmp	r2, #0
   d69a8:	d1fb      	bne.n	d69a2 <strlen+0x2>
   d69aa:	1a18      	subs	r0, r3, r0
   d69ac:	3801      	subs	r0, #1
   d69ae:	4770      	bx	lr

000d69b0 <strncmp>:
   d69b0:	b530      	push	{r4, r5, lr}
   d69b2:	b182      	cbz	r2, d69d6 <strncmp+0x26>
   d69b4:	1e45      	subs	r5, r0, #1
   d69b6:	3901      	subs	r1, #1
   d69b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d69bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d69c0:	42a3      	cmp	r3, r4
   d69c2:	d106      	bne.n	d69d2 <strncmp+0x22>
   d69c4:	43ec      	mvns	r4, r5
   d69c6:	4414      	add	r4, r2
   d69c8:	42e0      	cmn	r0, r4
   d69ca:	d001      	beq.n	d69d0 <strncmp+0x20>
   d69cc:	2b00      	cmp	r3, #0
   d69ce:	d1f3      	bne.n	d69b8 <strncmp+0x8>
   d69d0:	461c      	mov	r4, r3
   d69d2:	1b18      	subs	r0, r3, r4
   d69d4:	bd30      	pop	{r4, r5, pc}
   d69d6:	4610      	mov	r0, r2
   d69d8:	bd30      	pop	{r4, r5, pc}

000d69da <strnlen>:
   d69da:	b510      	push	{r4, lr}
   d69dc:	4603      	mov	r3, r0
   d69de:	4401      	add	r1, r0
   d69e0:	428b      	cmp	r3, r1
   d69e2:	d004      	beq.n	d69ee <strnlen+0x14>
   d69e4:	781a      	ldrb	r2, [r3, #0]
   d69e6:	1c5c      	adds	r4, r3, #1
   d69e8:	b10a      	cbz	r2, d69ee <strnlen+0x14>
   d69ea:	4623      	mov	r3, r4
   d69ec:	e7f8      	b.n	d69e0 <strnlen+0x6>
   d69ee:	1a18      	subs	r0, r3, r0
   d69f0:	bd10      	pop	{r4, pc}

000d69f2 <strstr>:
   d69f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69f4:	7803      	ldrb	r3, [r0, #0]
   d69f6:	b963      	cbnz	r3, d6a12 <strstr+0x20>
   d69f8:	780b      	ldrb	r3, [r1, #0]
   d69fa:	2b00      	cmp	r3, #0
   d69fc:	bf18      	it	ne
   d69fe:	2000      	movne	r0, #0
   d6a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a02:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6a06:	b162      	cbz	r2, d6a22 <strstr+0x30>
   d6a08:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d6a0c:	4297      	cmp	r7, r2
   d6a0e:	4630      	mov	r0, r6
   d6a10:	d0f7      	beq.n	d6a02 <strstr+0x10>
   d6a12:	4603      	mov	r3, r0
   d6a14:	1c46      	adds	r6, r0, #1
   d6a16:	7800      	ldrb	r0, [r0, #0]
   d6a18:	b110      	cbz	r0, d6a20 <strstr+0x2e>
   d6a1a:	1e4d      	subs	r5, r1, #1
   d6a1c:	1e5c      	subs	r4, r3, #1
   d6a1e:	e7f0      	b.n	d6a02 <strstr+0x10>
   d6a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a22:	4618      	mov	r0, r3
   d6a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6a28 <_strtol_r>:
   d6a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6a2c:	4680      	mov	r8, r0
   d6a2e:	4840      	ldr	r0, [pc, #256]	; (d6b30 <_strtol_r+0x108>)
   d6a30:	f8d0 9000 	ldr.w	r9, [r0]
   d6a34:	460f      	mov	r7, r1
   d6a36:	463d      	mov	r5, r7
   d6a38:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6a3c:	eb09 0004 	add.w	r0, r9, r4
   d6a40:	7840      	ldrb	r0, [r0, #1]
   d6a42:	f000 0008 	and.w	r0, r0, #8
   d6a46:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6a4a:	b108      	cbz	r0, d6a50 <_strtol_r+0x28>
   d6a4c:	462f      	mov	r7, r5
   d6a4e:	e7f2      	b.n	d6a36 <_strtol_r+0xe>
   d6a50:	2c2d      	cmp	r4, #45	; 0x2d
   d6a52:	d103      	bne.n	d6a5c <_strtol_r+0x34>
   d6a54:	1cbd      	adds	r5, r7, #2
   d6a56:	787c      	ldrb	r4, [r7, #1]
   d6a58:	2601      	movs	r6, #1
   d6a5a:	e003      	b.n	d6a64 <_strtol_r+0x3c>
   d6a5c:	2c2b      	cmp	r4, #43	; 0x2b
   d6a5e:	bf04      	itt	eq
   d6a60:	787c      	ldrbeq	r4, [r7, #1]
   d6a62:	1cbd      	addeq	r5, r7, #2
   d6a64:	b113      	cbz	r3, d6a6c <_strtol_r+0x44>
   d6a66:	2b10      	cmp	r3, #16
   d6a68:	d10a      	bne.n	d6a80 <_strtol_r+0x58>
   d6a6a:	e05b      	b.n	d6b24 <_strtol_r+0xfc>
   d6a6c:	2c30      	cmp	r4, #48	; 0x30
   d6a6e:	d157      	bne.n	d6b20 <_strtol_r+0xf8>
   d6a70:	7828      	ldrb	r0, [r5, #0]
   d6a72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6a76:	2858      	cmp	r0, #88	; 0x58
   d6a78:	d14d      	bne.n	d6b16 <_strtol_r+0xee>
   d6a7a:	786c      	ldrb	r4, [r5, #1]
   d6a7c:	2310      	movs	r3, #16
   d6a7e:	3502      	adds	r5, #2
   d6a80:	2e00      	cmp	r6, #0
   d6a82:	bf14      	ite	ne
   d6a84:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6a88:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6a8c:	2700      	movs	r7, #0
   d6a8e:	fbbc faf3 	udiv	sl, ip, r3
   d6a92:	4638      	mov	r0, r7
   d6a94:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6a98:	eb09 0e04 	add.w	lr, r9, r4
   d6a9c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6aa0:	f01e 0f04 	tst.w	lr, #4
   d6aa4:	d001      	beq.n	d6aaa <_strtol_r+0x82>
   d6aa6:	3c30      	subs	r4, #48	; 0x30
   d6aa8:	e00b      	b.n	d6ac2 <_strtol_r+0x9a>
   d6aaa:	f01e 0e03 	ands.w	lr, lr, #3
   d6aae:	d01b      	beq.n	d6ae8 <_strtol_r+0xc0>
   d6ab0:	f1be 0f01 	cmp.w	lr, #1
   d6ab4:	bf0c      	ite	eq
   d6ab6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6aba:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6abe:	ebce 0404 	rsb	r4, lr, r4
   d6ac2:	42a3      	cmp	r3, r4
   d6ac4:	dd10      	ble.n	d6ae8 <_strtol_r+0xc0>
   d6ac6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d6aca:	d00a      	beq.n	d6ae2 <_strtol_r+0xba>
   d6acc:	4550      	cmp	r0, sl
   d6ace:	d806      	bhi.n	d6ade <_strtol_r+0xb6>
   d6ad0:	d101      	bne.n	d6ad6 <_strtol_r+0xae>
   d6ad2:	4564      	cmp	r4, ip
   d6ad4:	dc03      	bgt.n	d6ade <_strtol_r+0xb6>
   d6ad6:	fb03 4000 	mla	r0, r3, r0, r4
   d6ada:	2701      	movs	r7, #1
   d6adc:	e001      	b.n	d6ae2 <_strtol_r+0xba>
   d6ade:	f04f 37ff 	mov.w	r7, #4294967295
   d6ae2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6ae6:	e7d7      	b.n	d6a98 <_strtol_r+0x70>
   d6ae8:	1c7b      	adds	r3, r7, #1
   d6aea:	d10c      	bne.n	d6b06 <_strtol_r+0xde>
   d6aec:	2e00      	cmp	r6, #0
   d6aee:	f04f 0322 	mov.w	r3, #34	; 0x22
   d6af2:	bf14      	ite	ne
   d6af4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6af8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6afc:	f8c8 3000 	str.w	r3, [r8]
   d6b00:	b92a      	cbnz	r2, d6b0e <_strtol_r+0xe6>
   d6b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b06:	b106      	cbz	r6, d6b0a <_strtol_r+0xe2>
   d6b08:	4240      	negs	r0, r0
   d6b0a:	b172      	cbz	r2, d6b2a <_strtol_r+0x102>
   d6b0c:	b107      	cbz	r7, d6b10 <_strtol_r+0xe8>
   d6b0e:	1e69      	subs	r1, r5, #1
   d6b10:	6011      	str	r1, [r2, #0]
   d6b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b16:	2430      	movs	r4, #48	; 0x30
   d6b18:	2b00      	cmp	r3, #0
   d6b1a:	d1b1      	bne.n	d6a80 <_strtol_r+0x58>
   d6b1c:	2308      	movs	r3, #8
   d6b1e:	e7af      	b.n	d6a80 <_strtol_r+0x58>
   d6b20:	230a      	movs	r3, #10
   d6b22:	e7ad      	b.n	d6a80 <_strtol_r+0x58>
   d6b24:	2c30      	cmp	r4, #48	; 0x30
   d6b26:	d0a3      	beq.n	d6a70 <_strtol_r+0x48>
   d6b28:	e7aa      	b.n	d6a80 <_strtol_r+0x58>
   d6b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6b2e:	bf00      	nop
   d6b30:	2003defc 	.word	0x2003defc

000d6b34 <strtol>:
   d6b34:	4613      	mov	r3, r2
   d6b36:	460a      	mov	r2, r1
   d6b38:	4601      	mov	r1, r0
   d6b3a:	4802      	ldr	r0, [pc, #8]	; (d6b44 <strtol+0x10>)
   d6b3c:	6800      	ldr	r0, [r0, #0]
   d6b3e:	f7ff bf73 	b.w	d6a28 <_strtol_r>
   d6b42:	bf00      	nop
   d6b44:	2003df60 	.word	0x2003df60

000d6b48 <dynalib_user>:
   d6b48:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d6b58:	00000000 54534f50 6e657300 70690064     ....POST.send.ip
   d6b68:	2f00203a 69706f74 642f7363 61617461     : ./topics/dataa
   d6b78:	006f7276 736e6573 6144726f 41006174     vro.sensorData.A
   d6b88:	70656363 70610074 63696c70 6f697461     ccept.applicatio
   d6b98:	6e762f6e 616b2e64 2e616b66 6a2b3276     n/vnd.kafka.v2+j
   d6ba8:	006e6f73 746e6f43 2d746e65 65707954     son.Content-Type
   d6bb8:	70706100 6163696c 6e6f6974 646e762f     .application/vnd
   d6bc8:	66616b2e 612e616b 2e6f7276 6a2b3276     .kafka.avro.v2+j
   d6bd8:	006e6f73 54544820 2e312f50 000a0d30     son. HTTP/1.0...
   d6be8:	736f6c63 6f430065 63656e6e 6e6f6974     close.Connection
   d6bf8:	534f4800 6f430054 6e65746e 654c2d74     .HOST.Content-Le
   d6c08:	6874676e 0d0a0d00 0000000a              ngth........

000d6c14 <_ZTVN5spark13EthernetClassE>:
	...
   d6c1c:	000d4a73 000d4a69 000d4a5f 000d4a55     sJ..iJ.._J..UJ..
   d6c2c:	000d4a49 000d4a3d 000d4a31 000d4a29     IJ..=J..1J..)J..
   d6c3c:	000d4a1f 000d4a15 000d64cd              .J...J...d..

000d6c48 <_ZTV8SPIClass>:
	...
   d6c50:	000d4a91 000d4a93                       .J...J..

000d6c58 <_ZTV3UDP>:
	...
   d6c60:	000d5121 000d5145 000d4b01 000d4c2b     !Q..EQ...K..+L..
   d6c70:	000d4af9 000d4b17 000d4b35 000d4b4f     .J...K..5K..OK..
   d6c80:	000d4b73 000d4c0f 000d4f11 000d4cb1     sK...L...O...L..
   d6c90:	000d4e31 000d4ae1 000d50b7 000d4db5     1N...J...P...M..
   d6ca0:	000d4ce9 000d50e5 000d4c55 000d4aef     .L...P..UL...J..
   d6cb0:	000d4c91 000d4af5 000d4b51 fffffff0     .L...J..QK......
   d6cc0:	00000000 000d4b6b 6e6c0066 006e6600     ....kK..f.ln.fn.
   d6cd0:	65646f63 74656400 006c6961 30313025     code.detail.%010
   d6ce0:	5d002075 202c0020 3a292800 5b200020     u .] ., .(): . [
   d6cf0:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
   d6d00:	20736c69 6200203d 00647561 69726553     ils = .baud.Seri
   d6d10:	53006c61 61697265 7400316c 00657079     al.Serial1.type.
   d6d20:	61726170 6d63006d 64690064 646e6800     param.cmd.id.hnd
   d6d30:	72747300 6966006d 6c00746c 61006c76     .strm.filt.lvl.a
   d6d40:	61486464 656c646e 65720072 65766f6d     ddHandler.remove
   d6d50:	646e6148 0072656c 6d756e65 646e6148     Handler.enumHand
   d6d60:	7372656c 4f534a00 7274534e 4c6d6165     lers.JSONStreamL
   d6d70:	6148676f 656c646e 70610072 6f6e0070     ogHandler.app.no
   d6d80:	7400656e 65636172 666e6900 6177006f     ne.trace.info.wa
   d6d90:	65006e72 726f7272 6e617000 61006369     rn.error.panic.a
   d6da0:	5a006c6c 302b2500 253a6433 00753230     ll.Z.%+03d:%02u.
   d6db0:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d6dc0:	007a2553 74637361 00656d69              S%z.asctime.

000d6dcc <_ZTV9IPAddress>:
	...
   d6dd4:	000d55cb 000d55bd 000d55bf              .U...U...U..

000d6de0 <_ZTV9USBSerial>:
	...
   d6de8:	000d56eb 000d572f 000d5709 000d5323     .V../W...W..#S..
   d6df8:	000d5703 000d56ed 000d56f5 000d5729     .W...V...V..)W..
   d6e08:	000d56fd 000d56e7                       .V...V..

000d6e10 <_ZTV11USARTSerial>:
	...
   d6e18:	000d57c9 000d57ed 000d57f9 000d5323     .W...W...W..#S..
   d6e28:	000d57d5 000d57e1 000d57db 000d57e7     .W...W...W...W..
   d6e38:	000d57cb 000d57cf                       .W...W..

000d6e40 <_ZTVN5spark9MeshClassE>:
	...
   d6e48:	000d5921 000d5917 000d590d 000d5903     !Y...Y...Y...Y..
   d6e58:	000d58f7 000d58eb 000d58df 000d58d7     .X...X...X...X..
   d6e68:	000d58cd 000d58c3 000d64cd 33306666     .X...X...d..ff03
   d6e78:	3a313a3a 31303031 31687400 73656d00     ::1:1001.th1.mes
   d6e88:	62757068 72697700 00676e69 73726170     hpub.wiring.pars
   d6e98:	61702065 74656b63 00642520              e packet %d.

000d6ea4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6eac:	000d5ee1 000d5ee7 000d63cf 000d5ef3     .^...^...c...^..
   d6ebc:	000d5ee3                                .^..

000d6ec0 <_ZTV9TCPClient>:
	...
   d6ec8:	000d4141 000d4181 000d5e59 000d5e73     AA...A..Y^..s^..
   d6ed8:	000d6275 000d60b7 000d6089 000d5e9d     ub...`...`...^..
   d6ee8:	000d614d 000d5ef9 000d60eb 000d6247     Ma...^...`..Gb..
   d6ef8:	000d5e9f 000d5ed7 000d5e85 000d5fe9     .^...^...^..._..
   d6f08:	000d6069 76636572 72726520 3d20726f     i`..recv error =
   d6f18:	00642520                                 %d.

000d6f1c <_ZTVN5spark9WiFiClassE>:
	...
   d6f24:	000d6445 000d643b 000d6431 000d63e7     Ed..;d..1d...c..
   d6f34:	000d6425 000d6419 000d640d 000d6405     %d...d...d...d..
   d6f44:	000d63fb 000d63f1 000d64cd              .c...c...d..

000d6f50 <_ZTVN5spark12NetworkClassE>:
	...
   d6f58:	000d6465 000d646f 000d6479 000d6483     ed..od..yd...d..
   d6f68:	000d648d 000d6499 000d64a5 000d64b1     .d...d...d...d..
   d6f78:	000d64b9 000d64c3 000d64cd              .d...d...d..

000d6f84 <_ZSt7nothrow>:
	...

000d6f85 <_ctype_>:
   d6f85:	20202000 20202020 28282020 20282828     .         ((((( 
   d6f95:	20202020 20202020 20202020 20202020                     
   d6fa5:	10108820 10101010 10101010 10101010      ...............
   d6fb5:	04040410 04040404 10040404 10101010     ................
   d6fc5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6fd5:	01010101 01010101 01010101 10101010     ................
   d6fe5:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6ff5:	02020202 02020202 02020202 10101010     ................
   d7005:	00000020 00000000 00000000 00000000      ...............
	...

000d7088 <__sf_fake_stdin>:
	...

000d70a8 <__sf_fake_stdout>:
	...

000d70c8 <__sf_fake_stderr>:
	...
   d70e8:	00000043                                         C.

000d70ea <link_const_variable_data_end>:
	...

000d70ec <link_constructors_location>:
   d70ec:	000d4255 	.word	0x000d4255
   d70f0:	000d432d 	.word	0x000d432d
   d70f4:	000d4a7d 	.word	0x000d4a7d
   d70f8:	000d4ac9 	.word	0x000d4ac9
   d70fc:	000d5485 	.word	0x000d5485
   d7100:	000d5495 	.word	0x000d5495
   d7104:	000d54cd 	.word	0x000d54cd
   d7108:	000d5e0d 	.word	0x000d5e0d
   d710c:	000d6451 	.word	0x000d6451
   d7110:	000d6599 	.word	0x000d6599
   d7114:	000d65ad 	.word	0x000d65ad
   d7118:	000d6635 	.word	0x000d6635
   d711c:	000d66b9 	.word	0x000d66b9
   d7120:	000d677d 	.word	0x000d677d
   d7124:	000d6841 	.word	0x000d6841

000d7128 <link_constructors_end>:
	...
