
c:/projects/IOTXenon/target/1.4.4/xenon/IOTXenon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004724  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00018828  2**0
                  CONTENTS
  4 .data         000000bc  2003e1b0  000d8740  0000e1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000584  2003e26c  2003e26c  0001e26c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d87fc  000d87fc  000187fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8824  000d8824  00018824  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dc061  00000000  00000000  00018828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011e09  00000000  00000000  000f4889  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002030a  00000000  00000000  00106692  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000029a8  00000000  00000000  0012699c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004948  00000000  00000000  00129344  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000385fd  00000000  00000000  0012dc8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002bed5  00000000  00000000  00166289  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00100f1e  00000000  00000000  0019215e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000de58  00000000  00000000  0029307c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fdee 	bl	d6c0e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fdf3 	bl	d6c24 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e1b0 	.word	0x2003e1b0
   d4048:	000d8740 	.word	0x000d8740
   d404c:	2003e26c 	.word	0x2003e26c
   d4050:	2003e26c 	.word	0x2003e26c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fb8f 	bl	d577c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8738 	.word	0x000d8738
   d4080:	000d86f8 	.word	0x000d86f8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b824 	b.w	d40d0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f857 	bl	d413c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bb41 	b.w	d5718 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bcc9 	b.w	d4a2c <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bcc7 	b.w	d4a2c <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bccd 	b.w	d4a3c <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bccb 	b.w	d4a3c <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.4>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d40b6:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40b8:	2000      	movs	r0, #0
   d40ba:	f000 fca7 	bl	d4a0c <spark_sync_time_pending>
   d40be:	b128      	cbz	r0, d40cc <_ZN10CloudClass12syncTimeDoneEv.isra.4+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40c0:	f000 fc8c 	bl	d49dc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d40c4:	f080 0001 	eor.w	r0, r0, #1
   d40c8:	b2c0      	uxtb	r0, r0
   d40ca:	bd08      	pop	{r3, pc}
   d40cc:	2001      	movs	r0, #1
    }
   d40ce:	bd08      	pop	{r3, pc}

000d40d0 <setup>:
void callback(char* topic, byte* payload, unsigned int length) {
	Serial.printf("Callback");
}

void setup()
{
   d40d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Serial.begin(9600);
   d40d2:	f001 fc57 	bl	d5984 <_Z16_fetch_usbserialv>
   d40d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40da:	f001 fc47 	bl	d596c <_ZN9USBSerial5beginEl>
	Time.zone(1);
   d40de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d40e2:	f001 f9d3 	bl	d548c <_ZN9TimeClass4zoneEf>
	Serial.println(System.deviceID());
   d40e6:	f001 fc4d 	bl	d5984 <_Z16_fetch_usbserialv>
   d40ea:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d40ec:	4668      	mov	r0, sp
   d40ee:	f000 fc7d 	bl	d49ec <spark_deviceID>
   d40f2:	9900      	ldr	r1, [sp, #0]
   d40f4:	4620      	mov	r0, r4
   d40f6:	f001 f93c 	bl	d5372 <_ZN5Print7printlnEPKc>
   d40fa:	4668      	mov	r0, sp
   d40fc:	f001 f8a2 	bl	d5244 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4100:	f000 fc6c 	bl	d49dc <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4104:	b110      	cbz	r0, d410c <setup+0x3c>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4106:	2000      	movs	r0, #0
   d4108:	f000 fc78 	bl	d49fc <spark_sync_time>
	Particle.syncTime();
  	waitUntil(Particle.syncTimeDone);
   d410c:	f7ff ffd3 	bl	d40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.4>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4110:	b910      	cbnz	r0, d4118 <setup+0x48>
            spark_process();
   d4112:	f000 fc5b 	bl	d49cc <spark_process>
   d4116:	e7f9      	b.n	d410c <setup+0x3c>
   d4118:	f7ff ffcd 	bl	d40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.4>
	dht.begin();
   d411c:	4805      	ldr	r0, [pc, #20]	; (d4134 <setup+0x64>)
   d411e:	f000 f8c9 	bl	d42b4 <_ZN3DHT5beginEv>
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4122:	4805      	ldr	r0, [pc, #20]	; (d4138 <setup+0x68>)
   d4124:	2300      	movs	r3, #0
   d4126:	461a      	mov	r2, r3
   d4128:	4619      	mov	r1, r3
   d412a:	6840      	ldr	r0, [r0, #4]
   d412c:	f000 fbfe 	bl	d492c <network_connect>
	Mesh.connect();
}
   d4130:	b004      	add	sp, #16
   d4132:	bd10      	pop	{r4, pc}
   d4134:	2003e280 	.word	0x2003e280
   d4138:	2003e40c 	.word	0x2003e40c

000d413c <loop>:

void loop()
{
   d413c:	b570      	push	{r4, r5, r6, lr}
	float temp, humidity;
	temp = dht.getTempCelcius();
   d413e:	4c27      	ldr	r4, [pc, #156]	; (d41dc <loop+0xa0>)
	dht.begin();
	Mesh.connect();
}

void loop()
{
   d4140:	b0ca      	sub	sp, #296	; 0x128
	float temp, humidity;
	temp = dht.getTempCelcius();
   d4142:	4620      	mov	r0, r4
   d4144:	f000 f9a0 	bl	d4488 <_ZN3DHT14getTempCelciusEv>
	humidity = dht.getHumidity();
   d4148:	4620      	mov	r0, r4
}

void loop()
{
	float temp, humidity;
	temp = dht.getTempCelcius();
   d414a:	ee10 5a10 	vmov	r5, s0
	humidity = dht.getHumidity();
   d414e:	f000 f9ad 	bl	d44ac <_ZN3DHT11getHumidityEv>
   d4152:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
	time_t timestamp = Time.now();
   d4156:	f001 fa88 	bl	d566a <_ZN9TimeClass3nowEv>
   d415a:	4606      	mov	r6, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d415c:	a80b      	add	r0, sp, #44	; 0x2c
   d415e:	f000 fc45 	bl	d49ec <spark_deviceID>
	char message[217];	
	sprintf(message,"{\"deviceID\":\"%s\",\"timestamp\":\"%s\",\"temperature\":\"%f\",\"tempUnit\":\"%c\",\"humidity\":\"%f\",\"humUnit\":\"%c\"}",System.deviceID().c_str(),Time.format(timestamp, TIME_FORMAT_ISO8601_FULL).c_str(),temp,'C',humidity,'%');
   d4162:	4b1f      	ldr	r3, [pc, #124]	; (d41e0 <loop+0xa4>)
   d4164:	491f      	ldr	r1, [pc, #124]	; (d41e4 <loop+0xa8>)
   d4166:	681b      	ldr	r3, [r3, #0]
   d4168:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   d416a:	4632      	mov	r2, r6
   d416c:	a80f      	add	r0, sp, #60	; 0x3c
   d416e:	f001 fa29 	bl	d55c4 <_ZN9TimeClass6formatElPKc>
   d4172:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4176:	2325      	movs	r3, #37	; 0x25
   d4178:	ee10 0a10 	vmov	r0, s0
   d417c:	9306      	str	r3, [sp, #24]
   d417e:	f002 fba1 	bl	d68c4 <__aeabi_f2d>
   d4182:	2343      	movs	r3, #67	; 0x43
   d4184:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4188:	4628      	mov	r0, r5
   d418a:	9302      	str	r3, [sp, #8]
   d418c:	f002 fb9a 	bl	d68c4 <__aeabi_f2d>
   d4190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4192:	4622      	mov	r2, r4
   d4194:	e9cd 0100 	strd	r0, r1, [sp]
   d4198:	4913      	ldr	r1, [pc, #76]	; (d41e8 <loop+0xac>)
   d419a:	a813      	add	r0, sp, #76	; 0x4c
   d419c:	f000 fc5e 	bl	d4a5c <sprintf>
   d41a0:	a80f      	add	r0, sp, #60	; 0x3c
   d41a2:	f001 f84f 	bl	d5244 <_ZN6StringD1Ev>
   d41a6:	a80b      	add	r0, sp, #44	; 0x2c
   d41a8:	f001 f84c 	bl	d5244 <_ZN6StringD1Ev>
	Serial.printlnf("%s",message);
   d41ac:	f001 fbea 	bl	d5984 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d41b0:	ab13      	add	r3, sp, #76	; 0x4c
   d41b2:	4a0e      	ldr	r2, [pc, #56]	; (d41ec <loop+0xb0>)
   d41b4:	2101      	movs	r1, #1
   d41b6:	f001 f915 	bl	d53e4 <_ZN5Print11printf_implEbPKcz>
	Mesh.publish("sensorData",message);
   d41ba:	aa13      	add	r2, sp, #76	; 0x4c
   d41bc:	490c      	ldr	r1, [pc, #48]	; (d41f0 <loop+0xb4>)
   d41be:	480d      	ldr	r0, [pc, #52]	; (d41f4 <loop+0xb8>)
   d41c0:	f001 fef4 	bl	d5fac <_ZN5spark11MeshPublish7publishEPKcS2_>
	Serial.println("published");
   d41c4:	f001 fbde 	bl	d5984 <_Z16_fetch_usbserialv>
   d41c8:	490b      	ldr	r1, [pc, #44]	; (d41f8 <loop+0xbc>)
   d41ca:	f001 f8d2 	bl	d5372 <_ZN5Print7printlnEPKc>
	delay(1000);
   d41ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41d2:	f001 fa5b 	bl	d568c <delay>
   d41d6:	b04a      	add	sp, #296	; 0x128
   d41d8:	bd70      	pop	{r4, r5, r6, pc}
   d41da:	bf00      	nop
   d41dc:	2003e280 	.word	0x2003e280
   d41e0:	2003e1b0 	.word	0x2003e1b0
   d41e4:	2003e2b0 	.word	0x2003e2b0
   d41e8:	000d7ea5 	.word	0x000d7ea5
   d41ec:	000d7f0a 	.word	0x000d7f0a
   d41f0:	000d7f0d 	.word	0x000d7f0d
   d41f4:	2003e414 	.word	0x2003e414
   d41f8:	000d7f18 	.word	0x000d7f18

000d41fc <_GLOBAL__sub_I_deviceID>:
   d41fc:	b510      	push	{r4, lr}
   d41fe:	4c09      	ldr	r4, [pc, #36]	; (d4224 <_GLOBAL__sub_I_deviceID+0x28>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4200:	f000 f96e 	bl	d44e0 <HAL_Pin_Map>
   d4204:	4620      	mov	r0, r4
   d4206:	f000 fbf1 	bl	d49ec <spark_deviceID>
#include "MQTT.h"
#include <time.h>
#define DHTPIN 	A2     // set pin


String deviceID = System.deviceID();
   d420a:	4a07      	ldr	r2, [pc, #28]	; (d4228 <_GLOBAL__sub_I_deviceID+0x2c>)
   d420c:	4907      	ldr	r1, [pc, #28]	; (d422c <_GLOBAL__sub_I_deviceID+0x30>)
   d420e:	4620      	mov	r0, r4
   d4210:	f002 f888 	bl	d6324 <__aeabi_atexit>
DHT dht(DHTPIN);
   d4214:	2206      	movs	r2, #6
   d4216:	2111      	movs	r1, #17
   d4218:	4805      	ldr	r0, [pc, #20]	; (d4230 <_GLOBAL__sub_I_deviceID+0x34>)
	sprintf(message,"{\"deviceID\":\"%s\",\"timestamp\":\"%s\",\"temperature\":\"%f\",\"tempUnit\":\"%c\",\"humidity\":\"%f\",\"humUnit\":\"%c\"}",System.deviceID().c_str(),Time.format(timestamp, TIME_FORMAT_ISO8601_FULL).c_str(),temp,'C',humidity,'%');
	Serial.printlnf("%s",message);
	Mesh.publish("sensorData",message);
	Serial.println("published");
	delay(1000);
   d421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <time.h>
#define DHTPIN 	A2     // set pin


String deviceID = System.deviceID();
DHT dht(DHTPIN);
   d421e:	f000 b843 	b.w	d42a8 <_ZN3DHTC1Ehh>
   d4222:	bf00      	nop
   d4224:	2003e270 	.word	0x2003e270
   d4228:	2003e26c 	.word	0x2003e26c
   d422c:	000d5245 	.word	0x000d5245
   d4230:	2003e280 	.word	0x2003e280

000d4234 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4234:	f000 b954 	b.w	d44e0 <HAL_Pin_Map>

000d4238 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4238:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d423a:	6803      	ldr	r3, [r0, #0]
   d423c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d423e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4240:	d904      	bls.n	d424c <nrf_gpio_pin_port_decode+0x14>
   d4242:	4a07      	ldr	r2, [pc, #28]	; (d4260 <nrf_gpio_pin_port_decode+0x28>)
   d4244:	2100      	movs	r1, #0
   d4246:	200a      	movs	r0, #10
   d4248:	f000 fb22 	bl	d4890 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d424c:	6823      	ldr	r3, [r4, #0]
   d424e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4250:	bf83      	ittte	hi
   d4252:	f003 031f 	andhi.w	r3, r3, #31
   d4256:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4258:	4802      	ldrhi	r0, [pc, #8]	; (d4264 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d425a:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d425e:	bd10      	pop	{r4, pc}
   d4260:	000d45b1 	.word	0x000d45b1
   d4264:	50000300 	.word	0x50000300

000d4268 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4268:	b507      	push	{r0, r1, r2, lr}
   d426a:	ab02      	add	r3, sp, #8
   d426c:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4270:	4618      	mov	r0, r3
   d4272:	f7ff ffe1 	bl	d4238 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4276:	9a01      	ldr	r2, [sp, #4]
   d4278:	2301      	movs	r3, #1
   d427a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d427c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4280:	b003      	add	sp, #12
   d4282:	f85d fb04 	ldr.w	pc, [sp], #4

000d4286 <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4286:	b507      	push	{r0, r1, r2, lr}
   d4288:	ab02      	add	r3, sp, #8
   d428a:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d428e:	4618      	mov	r0, r3
   d4290:	f7ff ffd2 	bl	d4238 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4294:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4298:	9801      	ldr	r0, [sp, #4]
   d429a:	fa23 f000 	lsr.w	r0, r3, r0
}
   d429e:	f000 0001 	and.w	r0, r0, #1
   d42a2:	b003      	add	sp, #12
   d42a4:	f85d fb04 	ldr.w	pc, [sp], #4

000d42a8 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d42a8:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d42aa:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d42ac:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d42ae:	7402      	strb	r2, [r0, #16]
}
   d42b0:	4770      	bx	lr
	...

000d42b4 <_ZN3DHT5beginEv>:

void DHT::begin(void)
{
   d42b4:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d42b6:	2100      	movs	r1, #0
	_count = count;
	firstreading = true;
}

void DHT::begin(void)
{
   d42b8:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d42ba:	7980      	ldrb	r0, [r0, #6]
   d42bc:	f001 ffde 	bl	d627c <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d42c0:	4a07      	ldr	r2, [pc, #28]	; (d42e0 <_ZN3DHT5beginEv+0x2c>)
   d42c2:	79a3      	ldrb	r3, [r4, #6]
   d42c4:	6812      	ldr	r2, [r2, #0]
   d42c6:	011b      	lsls	r3, r3, #4
   d42c8:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d42ca:	5cd0      	ldrb	r0, [r2, r3]
   d42cc:	784b      	ldrb	r3, [r1, #1]
   d42ce:	f003 031f 	and.w	r3, r3, #31
   d42d2:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d42d6:	f7ff ffc7 	bl	d4268 <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d42da:	2300      	movs	r3, #0
   d42dc:	60e3      	str	r3, [r4, #12]
   d42de:	bd10      	pop	{r4, pc}
   d42e0:	2003e294 	.word	0x2003e294

000d42e4 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d42e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d42e8:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42ea:	f000 f969 	bl	d45c0 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d42ee:	68e3      	ldr	r3, [r4, #12]
   d42f0:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d42f2:	bf84      	itt	hi
   d42f4:	2300      	movhi	r3, #0
   d42f6:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d42f8:	7c23      	ldrb	r3, [r4, #16]
   d42fa:	b933      	cbnz	r3, d430a <_ZN3DHT4readEv+0x26>
   d42fc:	68e3      	ldr	r3, [r4, #12]
   d42fe:	1ac0      	subs	r0, r0, r3
   d4300:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4304:	d201      	bcs.n	d430a <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4306:	2001      	movs	r0, #1
   d4308:	e0a8      	b.n	d445c <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d430a:	2500      	movs	r5, #0

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d430c:	4e55      	ldr	r6, [pc, #340]	; (d4464 <_ZN3DHT4readEv+0x180>)
   d430e:	7425      	strb	r5, [r4, #16]
   d4310:	f000 f956 	bl	d45c0 <HAL_Timer_Get_Milli_Seconds>
   d4314:	79a3      	ldrb	r3, [r4, #6]
   d4316:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4318:	60e0      	str	r0, [r4, #12]
   d431a:	011b      	lsls	r3, r3, #4
   d431c:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d431e:	7125      	strb	r5, [r4, #4]
   d4320:	70e5      	strb	r5, [r4, #3]
   d4322:	70a5      	strb	r5, [r4, #2]
   d4324:	7065      	strb	r5, [r4, #1]
   d4326:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4328:	5cd0      	ldrb	r0, [r2, r3]
   d432a:	784b      	ldrb	r3, [r1, #1]
   d432c:	f003 031f 	and.w	r3, r3, #31
   d4330:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4334:	f7ff ff98 	bl	d4268 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4338:	20fa      	movs	r0, #250	; 0xfa
   d433a:	f001 f9a7 	bl	d568c <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d433e:	2101      	movs	r1, #1
   d4340:	79a0      	ldrb	r0, [r4, #6]
   d4342:	f001 ff9b 	bl	d627c <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4346:	79a3      	ldrb	r3, [r4, #6]
   d4348:	6832      	ldr	r2, [r6, #0]
   d434a:	011b      	lsls	r3, r3, #4
   d434c:	18d1      	adds	r1, r2, r3
   d434e:	5cd2      	ldrb	r2, [r2, r3]
   d4350:	784b      	ldrb	r3, [r1, #1]
   d4352:	a802      	add	r0, sp, #8
   d4354:	f003 031f 	and.w	r3, r3, #31
   d4358:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d435c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4360:	f7ff ff6a 	bl	d4238 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4364:	9b01      	ldr	r3, [sp, #4]
   d4366:	f04f 0801 	mov.w	r8, #1
   d436a:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d436e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d4372:	2014      	movs	r0, #20
   d4374:	f001 f98a 	bl	d568c <delay>
	noInterrupts();
   d4378:	f001 fb2a 	bl	d59d0 <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d437c:	79a3      	ldrb	r3, [r4, #6]
   d437e:	6832      	ldr	r2, [r6, #0]
   d4380:	011b      	lsls	r3, r3, #4
   d4382:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4384:	5cd0      	ldrb	r0, [r2, r3]
   d4386:	784b      	ldrb	r3, [r1, #1]
   d4388:	f003 031f 	and.w	r3, r3, #31
   d438c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4390:	f7ff ff6a 	bl	d4268 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4394:	2028      	movs	r0, #40	; 0x28
   d4396:	f000 f90b 	bl	d45b0 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d439a:	4629      	mov	r1, r5
   d439c:	79a0      	ldrb	r0, [r4, #6]
   d439e:	f001 ff6d 	bl	d627c <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d43a2:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d43a4:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43a8:	79a3      	ldrb	r3, [r4, #6]
   d43aa:	6832      	ldr	r2, [r6, #0]
   d43ac:	011b      	lsls	r3, r3, #4
   d43ae:	18d1      	adds	r1, r2, r3
   d43b0:	f812 a003 	ldrb.w	sl, [r2, r3]
   d43b4:	784b      	ldrb	r3, [r1, #1]
   d43b6:	f003 031f 	and.w	r3, r3, #31
   d43ba:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d43be:	4650      	mov	r0, sl
   d43c0:	f7ff ff61 	bl	d4286 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d43c4:	4650      	mov	r0, sl
   d43c6:	f7ff ff5e 	bl	d4286 <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d43ca:	4580      	cmp	r8, r0
   d43cc:	fa5f f98b 	uxtb.w	r9, fp
   d43d0:	d108      	bne.n	d43e4 <_ZN3DHT4readEv+0x100>
   d43d2:	2001      	movs	r0, #1
   d43d4:	f10b 0b01 	add.w	fp, fp, #1
   d43d8:	f000 f8ea 	bl	d45b0 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d43dc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d43e0:	d1e2      	bne.n	d43a8 <_ZN3DHT4readEv+0xc4>
   d43e2:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d43e4:	79a3      	ldrb	r3, [r4, #6]
   d43e6:	6832      	ldr	r2, [r6, #0]
   d43e8:	011b      	lsls	r3, r3, #4
   d43ea:	18d1      	adds	r1, r2, r3
   d43ec:	f812 8003 	ldrb.w	r8, [r2, r3]
   d43f0:	784b      	ldrb	r3, [r1, #1]
   d43f2:	f003 031f 	and.w	r3, r3, #31
   d43f6:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d43fa:	4640      	mov	r0, r8
   d43fc:	f7ff ff43 	bl	d4286 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4400:	4640      	mov	r0, r8
   d4402:	f7ff ff40 	bl	d4286 <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4406:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d440a:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d440e:	d014      	beq.n	d443a <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4410:	2d03      	cmp	r5, #3
   d4412:	d90e      	bls.n	d4432 <_ZN3DHT4readEv+0x14e>
   d4414:	07eb      	lsls	r3, r5, #31
   d4416:	d40c      	bmi.n	d4432 <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4418:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d441a:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d441c:	5ca3      	ldrb	r3, [r4, r2]
   d441e:	005b      	lsls	r3, r3, #1
   d4420:	b2db      	uxtb	r3, r3
   d4422:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4424:	7a21      	ldrb	r1, [r4, #8]
   d4426:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4428:	bf3c      	itt	cc
   d442a:	f043 0301 	orrcc.w	r3, r3, #1
   d442e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4430:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4432:	3501      	adds	r5, #1
   d4434:	b2ed      	uxtb	r5, r5
   d4436:	2d55      	cmp	r5, #85	; 0x55
   d4438:	d1b4      	bne.n	d43a4 <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d443a:	f001 facb 	bl	d59d4 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d443e:	2f27      	cmp	r7, #39	; 0x27
   d4440:	d90b      	bls.n	d445a <_ZN3DHT4readEv+0x176>
   d4442:	7822      	ldrb	r2, [r4, #0]
   d4444:	7863      	ldrb	r3, [r4, #1]
   d4446:	7921      	ldrb	r1, [r4, #4]
   d4448:	4413      	add	r3, r2
   d444a:	78a2      	ldrb	r2, [r4, #2]
   d444c:	4413      	add	r3, r2
   d444e:	78e2      	ldrb	r2, [r4, #3]
   d4450:	4413      	add	r3, r2
   d4452:	b2db      	uxtb	r3, r3
   d4454:	4299      	cmp	r1, r3
   d4456:	f43f af56 	beq.w	d4306 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d445a:	2000      	movs	r0, #0

}
   d445c:	b003      	add	sp, #12
   d445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4462:	bf00      	nop
   d4464:	2003e294 	.word	0x2003e294

000d4468 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4468:	b510      	push	{r4, lr}
   d446a:	4604      	mov	r4, r0
	float f;

	if (read())
   d446c:	f7ff ff3a 	bl	d42e4 <_ZN3DHT4readEv>
   d4470:	b128      	cbz	r0, d447e <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4472:	78a3      	ldrb	r3, [r4, #2]
   d4474:	ee00 3a10 	vmov	s0, r3
   d4478:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d447c:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d447e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4484 <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4482:	bd10      	pop	{r4, pc}
   d4484:	7fc00000 	.word	0x7fc00000

000d4488 <_ZN3DHT14getTempCelciusEv>:
	return readHumidity();
}

float DHT::getTempCelcius()
{
	return readTemperature();
   d4488:	f7ff bfee 	b.w	d4468 <_ZN3DHT15readTemperatureEv>

000d448c <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d448c:	b510      	push	{r4, lr}
   d448e:	4604      	mov	r4, r0
	float f;

	if (read())
   d4490:	f7ff ff28 	bl	d42e4 <_ZN3DHT4readEv>
   d4494:	b128      	cbz	r0, d44a2 <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4496:	7823      	ldrb	r3, [r4, #0]
   d4498:	ee00 3a10 	vmov	s0, r3
   d449c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d44a0:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d44a2:	ed9f 0a01 	vldr	s0, [pc, #4]	; d44a8 <_ZN3DHT12readHumidityEv+0x1c>
}
   d44a6:	bd10      	pop	{r4, pc}
   d44a8:	7fc00000 	.word	0x7fc00000

000d44ac <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d44ac:	f7ff bfee 	b.w	d448c <_ZN3DHT12readHumidityEv>

000d44b0 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d44b0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44b2:	f000 f815 	bl	d44e0 <HAL_Pin_Map>
   d44b6:	4b01      	ldr	r3, [pc, #4]	; (d44bc <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d44b8:	6018      	str	r0, [r3, #0]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	2003e294 	.word	0x2003e294

000d44c0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <netdb_freeaddrinfo+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	689b      	ldr	r3, [r3, #8]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030268 	.word	0x00030268

000d44d0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <netdb_getaddrinfo+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	68db      	ldr	r3, [r3, #12]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030268 	.word	0x00030268

000d44e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_Pin_Map+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	681b      	ldr	r3, [r3, #0]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	0003022c 	.word	0x0003022c

000d44f0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_Pin_Mode+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	689b      	ldr	r3, [r3, #8]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	0003022c 	.word	0x0003022c

000d4500 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_Interrupts_Enable_All+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6a1b      	ldr	r3, [r3, #32]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	0003022c 	.word	0x0003022c

000d4510 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_Interrupts_Disable_All+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	0003022c 	.word	0x0003022c

000d4520 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_SPI_Init+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	69db      	ldr	r3, [r3, #28]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030230 	.word	0x00030230

000d4530 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_SPI_Is_Enabled+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6a1b      	ldr	r3, [r3, #32]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030230 	.word	0x00030230

000d4540 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <if_name_to_index+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	691b      	ldr	r3, [r3, #16]
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003026c 	.word	0x0003026c

000d4550 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <if_index_to_name+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	695b      	ldr	r3, [r3, #20]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003026c 	.word	0x0003026c

000d4560 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <if_get_by_index+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	699b      	ldr	r3, [r3, #24]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003026c 	.word	0x0003026c

000d4570 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <if_get_addrs+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003026c 	.word	0x0003026c

000d4580 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <if_free_if_addrs+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003026c 	.word	0x0003026c

000d4590 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_RNG_GetRandomNumber+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	685b      	ldr	r3, [r3, #4]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	00030218 	.word	0x00030218

000d45a0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_Delay_Milliseconds+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	689b      	ldr	r3, [r3, #8]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030218 	.word	0x00030218

000d45b0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_Delay_Microseconds+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	68db      	ldr	r3, [r3, #12]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030218 	.word	0x00030218

000d45c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	695b      	ldr	r3, [r3, #20]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030218 	.word	0x00030218

000d45d0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_RTC_Get_UnixTime+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	69db      	ldr	r3, [r3, #28]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030218 	.word	0x00030218

000d45e0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_RTC_Time_Is_Valid+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030218 	.word	0x00030218

000d45f0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <os_thread_create+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	685b      	ldr	r3, [r3, #4]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030248 	.word	0x00030248

000d4600 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <os_thread_is_current+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	689b      	ldr	r3, [r3, #8]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030248 	.word	0x00030248

000d4610 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <os_thread_join+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	691b      	ldr	r3, [r3, #16]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030248 	.word	0x00030248

000d4620 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <os_thread_cleanup+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	695b      	ldr	r3, [r3, #20]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030248 	.word	0x00030248

000d4630 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <os_mutex_create+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030248 	.word	0x00030248

000d4640 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <os_mutex_recursive_create+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030248 	.word	0x00030248

000d4650 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <os_mutex_recursive_lock+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030248 	.word	0x00030248

000d4660 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <os_mutex_recursive_unlock+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030248 	.word	0x00030248

000d4670 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <os_thread_exit+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030248 	.word	0x00030248

000d4680 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <inet_inet_ntop+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	695b      	ldr	r3, [r3, #20]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030264 	.word	0x00030264

000d4690 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <inet_inet_pton+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	699b      	ldr	r3, [r3, #24]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030264 	.word	0x00030264

000d46a0 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <inet_htonl+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6a1b      	ldr	r3, [r3, #32]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030264 	.word	0x00030264

000d46b0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <inet_ntohs+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030264 	.word	0x00030264

000d46c0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <inet_htons+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030264 	.word	0x00030264

000d46d0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <HAL_USART_Init+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	681b      	ldr	r3, [r3, #0]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003023c 	.word	0x0003023c

000d46e0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <HAL_USART_Write_Data+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	68db      	ldr	r3, [r3, #12]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003023c 	.word	0x0003023c

000d46f0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <HAL_USART_Available_Data+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	691b      	ldr	r3, [r3, #16]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003023c 	.word	0x0003023c

000d4700 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USART_Read_Data+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	695b      	ldr	r3, [r3, #20]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003023c 	.word	0x0003023c

000d4710 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USART_Peek_Data+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	699b      	ldr	r3, [r3, #24]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003023c 	.word	0x0003023c

000d4720 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USART_Flush_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	69db      	ldr	r3, [r3, #28]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003023c 	.word	0x0003023c

000d4730 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USART_Is_Enabled+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6a1b      	ldr	r3, [r3, #32]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003023c 	.word	0x0003023c

000d4740 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_USART_Available_Data_For_Write+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003023c 	.word	0x0003023c

000d4750 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_I2C_Write_Data+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6a1b      	ldr	r3, [r3, #32]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030228 	.word	0x00030228

000d4760 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_I2C_Available_Data+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030228 	.word	0x00030228

000d4770 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <HAL_I2C_Read_Data+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030228 	.word	0x00030228

000d4780 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <HAL_I2C_Peek_Data+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030228 	.word	0x00030228

000d4790 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <HAL_I2C_Flush_Data+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030228 	.word	0x00030228

000d47a0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <HAL_I2C_Is_Enabled+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030228 	.word	0x00030228

000d47b0 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <HAL_I2C_Init+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030228 	.word	0x00030228

000d47c0 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <sock_bind+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	685b      	ldr	r3, [r3, #4]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030238 	.word	0x00030238

000d47d0 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <sock_setsockopt+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	699b      	ldr	r3, [r3, #24]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030238 	.word	0x00030238

000d47e0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <sock_close+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	69db      	ldr	r3, [r3, #28]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030238 	.word	0x00030238

000d47f0 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <sock_recvfrom+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030238 	.word	0x00030238

000d4800 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <sock_sendto+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030238 	.word	0x00030238

000d4810 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <sock_socket+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030238 	.word	0x00030238

000d4820 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USB_USART_Init+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	681b      	ldr	r3, [r3, #0]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003024c 	.word	0x0003024c

000d4830 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <HAL_USB_USART_Begin+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	685b      	ldr	r3, [r3, #4]
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	0003024c 	.word	0x0003024c

000d4840 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <HAL_USB_USART_Available_Data+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	691b      	ldr	r3, [r3, #16]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	0003024c 	.word	0x0003024c

000d4850 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	695b      	ldr	r3, [r3, #20]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	0003024c 	.word	0x0003024c

000d4860 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <HAL_USB_USART_Receive_Data+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	699b      	ldr	r3, [r3, #24]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	0003024c 	.word	0x0003024c

000d4870 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <HAL_USB_USART_Send_Data+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	69db      	ldr	r3, [r3, #28]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	0003024c 	.word	0x0003024c

000d4880 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_USB_USART_Flush_Data+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	6a1b      	ldr	r3, [r3, #32]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003024c 	.word	0x0003024c

000d4890 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <panic_+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030260 	.word	0x00030260

000d48a0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <log_message+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030260 	.word	0x00030260

000d48b0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <system_mode+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	681b      	ldr	r3, [r3, #0]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	00030220 	.word	0x00030220

000d48c0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <set_system_mode+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	685b      	ldr	r3, [r3, #4]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	00030220 	.word	0x00030220

000d48d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <system_delay_ms+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	695b      	ldr	r3, [r3, #20]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030220 	.word	0x00030220

000d48e0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <system_thread_get_state+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030220 	.word	0x00030220

000d48f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b03      	ldr	r3, [pc, #12]	; (d4900 <system_ctrl_set_app_request_handler+0x10>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48fa:	9301      	str	r3, [sp, #4]
   d48fc:	bd08      	pop	{r3, pc}
   d48fe:	0000      	.short	0x0000
   d4900:	00030220 	.word	0x00030220

000d4904 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b03      	ldr	r3, [pc, #12]	; (d4914 <system_ctrl_set_result+0x10>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d490e:	9301      	str	r3, [sp, #4]
   d4910:	bd08      	pop	{r3, pc}
   d4912:	0000      	.short	0x0000
   d4914:	00030220 	.word	0x00030220

000d4918 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b03      	ldr	r3, [pc, #12]	; (d4928 <system_invoke_event_handler+0x10>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d4922:	9301      	str	r3, [sp, #4]
   d4924:	bd08      	pop	{r3, pc}
   d4926:	0000      	.short	0x0000
   d4928:	00030220 	.word	0x00030220

000d492c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <network_connect+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	685b      	ldr	r3, [r3, #4]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030240 	.word	0x00030240

000d493c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <network_connecting+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	689b      	ldr	r3, [r3, #8]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030240 	.word	0x00030240

000d494c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <network_disconnect+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	68db      	ldr	r3, [r3, #12]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030240 	.word	0x00030240

000d495c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <network_ready+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	691b      	ldr	r3, [r3, #16]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030240 	.word	0x00030240

000d496c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <network_on+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	695b      	ldr	r3, [r3, #20]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030240 	.word	0x00030240

000d497c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <network_off+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	699b      	ldr	r3, [r3, #24]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	00030240 	.word	0x00030240

000d498c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <network_listen+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	69db      	ldr	r3, [r3, #28]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030240 	.word	0x00030240

000d499c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <network_listening+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	6a1b      	ldr	r3, [r3, #32]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030240 	.word	0x00030240

000d49ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <network_set_listen_timeout+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	00030240 	.word	0x00030240

000d49bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <network_get_listen_timeout+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030240 	.word	0x00030240

000d49cc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <spark_process+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	689b      	ldr	r3, [r3, #8]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030244 	.word	0x00030244

000d49dc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <spark_cloud_flag_connected+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	695b      	ldr	r3, [r3, #20]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030244 	.word	0x00030244

000d49ec <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <spark_deviceID+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	69db      	ldr	r3, [r3, #28]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030244 	.word	0x00030244

000d49fc <spark_sync_time>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <spark_sync_time+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030244 	.word	0x00030244

000d4a0c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <spark_sync_time_pending+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030244 	.word	0x00030244

000d4a1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030244 	.word	0x00030244

000d4a2c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <malloc+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	681b      	ldr	r3, [r3, #0]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	0003021c 	.word	0x0003021c

000d4a3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <free+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	685b      	ldr	r3, [r3, #4]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	0003021c 	.word	0x0003021c

000d4a4c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <realloc+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	689b      	ldr	r3, [r3, #8]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	0003021c 	.word	0x0003021c

000d4a5c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <sprintf+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	68db      	ldr	r3, [r3, #12]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	0003021c 	.word	0x0003021c

000d4a6c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <siprintf+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	691b      	ldr	r3, [r3, #16]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003021c 	.word	0x0003021c

000d4a7c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <siscanf+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	699b      	ldr	r3, [r3, #24]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003021c 	.word	0x0003021c

000d4a8c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <snprintf+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	69db      	ldr	r3, [r3, #28]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003021c 	.word	0x0003021c

000d4a9c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <sniprintf+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6a1b      	ldr	r3, [r3, #32]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003021c 	.word	0x0003021c

000d4aac <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <vsnprintf+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003021c 	.word	0x0003021c

000d4abc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <abort+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003021c 	.word	0x0003021c

000d4acc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <_malloc_r+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003021c 	.word	0x0003021c

000d4adc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4adc:	2200      	movs	r2, #0
   d4ade:	4611      	mov	r1, r2
   d4ae0:	6840      	ldr	r0, [r0, #4]
   d4ae2:	f7ff bf5b 	b.w	d499c <network_listening>

000d4ae6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4ae6:	2200      	movs	r2, #0
   d4ae8:	4611      	mov	r1, r2
   d4aea:	6840      	ldr	r0, [r0, #4]
   d4aec:	f7ff bf66 	b.w	d49bc <network_get_listen_timeout>

000d4af0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4af0:	2200      	movs	r2, #0
   d4af2:	6840      	ldr	r0, [r0, #4]
   d4af4:	f7ff bf5a 	b.w	d49ac <network_set_listen_timeout>

000d4af8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4af8:	2200      	movs	r2, #0
   d4afa:	f081 0101 	eor.w	r1, r1, #1
   d4afe:	6840      	ldr	r0, [r0, #4]
   d4b00:	f7ff bf44 	b.w	d498c <network_listen>

000d4b04 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b04:	2300      	movs	r3, #0
   d4b06:	461a      	mov	r2, r3
   d4b08:	4619      	mov	r1, r3
   d4b0a:	6840      	ldr	r0, [r0, #4]
   d4b0c:	f7ff bf36 	b.w	d497c <network_off>

000d4b10 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b10:	2300      	movs	r3, #0
   d4b12:	461a      	mov	r2, r3
   d4b14:	4619      	mov	r1, r3
   d4b16:	6840      	ldr	r0, [r0, #4]
   d4b18:	f7ff bf28 	b.w	d496c <network_on>

000d4b1c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b1c:	2200      	movs	r2, #0
   d4b1e:	4611      	mov	r1, r2
   d4b20:	6840      	ldr	r0, [r0, #4]
   d4b22:	f7ff bf1b 	b.w	d495c <network_ready>

000d4b26 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b26:	2200      	movs	r2, #0
   d4b28:	4611      	mov	r1, r2
   d4b2a:	6840      	ldr	r0, [r0, #4]
   d4b2c:	f7ff bf06 	b.w	d493c <network_connecting>

000d4b30 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b30:	2200      	movs	r2, #0
   d4b32:	2102      	movs	r1, #2
   d4b34:	6840      	ldr	r0, [r0, #4]
   d4b36:	f7ff bf09 	b.w	d494c <network_disconnect>

000d4b3a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b3a:	2300      	movs	r3, #0
   d4b3c:	461a      	mov	r2, r3
   d4b3e:	6840      	ldr	r0, [r0, #4]
   d4b40:	f7ff bef4 	b.w	d492c <network_connect>

000d4b44 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b44:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b46:	2203      	movs	r2, #3
   d4b48:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b4a:	4a02      	ldr	r2, [pc, #8]	; (d4b54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b4c:	601a      	str	r2, [r3, #0]
   d4b4e:	4770      	bx	lr
   d4b50:	2003e298 	.word	0x2003e298
   d4b54:	000d7f2c 	.word	0x000d7f2c

000d4b58 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4b58:	4770      	bx	lr

000d4b5a <_ZN8SPIClassD0Ev>:
   d4b5a:	b510      	push	{r4, lr}
   d4b5c:	2110      	movs	r1, #16
   d4b5e:	4604      	mov	r4, r0
   d4b60:	f001 fbee 	bl	d6340 <_ZdlPvj>
   d4b64:	4620      	mov	r0, r4
   d4b66:	bd10      	pop	{r4, pc}

000d4b68 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4b68:	b570      	push	{r4, r5, r6, lr}
   d4b6a:	4b08      	ldr	r3, [pc, #32]	; (d4b8c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4b6c:	6003      	str	r3, [r0, #0]
   d4b6e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4b70:	2500      	movs	r5, #0
   d4b72:	460e      	mov	r6, r1
   d4b74:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4b78:	f7ff fd5a 	bl	d4630 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4b7c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4b7e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4b80:	f7ff fcce 	bl	d4520 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4b84:	60a5      	str	r5, [r4, #8]
}
   d4b86:	4620      	mov	r0, r4
   d4b88:	bd70      	pop	{r4, r5, r6, pc}
   d4b8a:	bf00      	nop
   d4b8c:	000d7f60 	.word	0x000d7f60

000d4b90 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4b90:	7900      	ldrb	r0, [r0, #4]
   d4b92:	f7ff bccd 	b.w	d4530 <HAL_SPI_Is_Enabled>
	...

000d4b98 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4b98:	4b04      	ldr	r3, [pc, #16]	; (d4bac <_GLOBAL__sub_I_System+0x14>)
   d4b9a:	2000      	movs	r0, #0
   d4b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4ba0:	7018      	strb	r0, [r3, #0]
   d4ba2:	8058      	strh	r0, [r3, #2]
   d4ba4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ba6:	f7ff be8b 	b.w	d48c0 <set_system_mode>
   d4baa:	bf00      	nop
   d4bac:	2003e2a0 	.word	0x2003e2a0

000d4bb0 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4bb0:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4bb2:	6804      	ldr	r4, [r0, #0]
   d4bb4:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4bb6:	46a4      	mov	ip, r4
    }
   d4bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4bbc:	4760      	bx	ip

000d4bbe <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4bbe:	6803      	ldr	r3, [r0, #0]
   d4bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4bc2:	4718      	bx	r3

000d4bc4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4bc4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4bc6:	4770      	bx	lr

000d4bc8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4bc8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4bca:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4bcc:	1a10      	subs	r0, r2, r0
   d4bce:	4770      	bx	lr

000d4bd0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4bd0:	b513      	push	{r0, r1, r4, lr}
   d4bd2:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d4bd4:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4bd6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d4bda:	68d4      	ldr	r4, [r2, #12]
   d4bdc:	4619      	mov	r1, r3
   d4bde:	2201      	movs	r2, #1
   d4be0:	47a0      	blx	r4
}
   d4be2:	b002      	add	sp, #8
   d4be4:	bd10      	pop	{r4, pc}

000d4be6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4be6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4be8:	6803      	ldr	r3, [r0, #0]
   d4bea:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d4bec:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4bee:	4798      	blx	r3
   d4bf0:	b128      	cbz	r0, d4bfe <_ZN3UDP4readEv+0x18>
   d4bf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4bf4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4bf6:	1c59      	adds	r1, r3, #1
   d4bf8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4bfa:	5cd0      	ldrb	r0, [r2, r3]
   d4bfc:	bd10      	pop	{r4, pc}
   d4bfe:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4c02:	bd10      	pop	{r4, pc}

000d4c04 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4c04:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4c06:	6803      	ldr	r3, [r0, #0]
   d4c08:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4c0a:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4c0c:	4798      	blx	r3
   d4c0e:	b118      	cbz	r0, d4c18 <_ZN3UDP4peekEv+0x14>
   d4c10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4c12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4c14:	5cd0      	ldrb	r0, [r2, r3]
   d4c16:	bd10      	pop	{r4, pc}
   d4c18:	f04f 30ff 	mov.w	r0, #4294967295
}
   d4c1c:	bd10      	pop	{r4, pc}

000d4c1e <_ZN3UDP5flushEv>:

void UDP::flush() {
   d4c1e:	4770      	bx	lr

000d4c20 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4c20:	b410      	push	{r4}
   d4c22:	4603      	mov	r3, r0
   d4c24:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4c26:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d4c28:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d4c2a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d4c2c:	6803      	ldr	r3, [r0, #0]
   d4c2e:	1a52      	subs	r2, r2, r1
   d4c30:	68db      	ldr	r3, [r3, #12]
   d4c32:	4421      	add	r1, r4
}
   d4c34:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4c38:	4718      	bx	r3

000d4c3a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4c3a:	f1a0 0010 	sub.w	r0, r0, #16
   d4c3e:	f7ff bfef 	b.w	d4c20 <_ZNK3UDP7printToER5Print>

000d4c42 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4c42:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d4c44:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4c46:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4c48:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d4c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4c4c:	4604      	mov	r4, r0
   d4c4e:	460f      	mov	r7, r1
   d4c50:	4615      	mov	r5, r2
    stop();
   d4c52:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d4c54:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4c56:	4632      	mov	r2, r6
   d4c58:	2100      	movs	r1, #0
   d4c5a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d4c5c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d4c5e:	f001 ffe1 	bl	d6c24 <memset>
    saddr.sin6_len = sizeof(saddr);
   d4c62:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4c66:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d4c68:	260a      	movs	r6, #10
   d4c6a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d4c6e:	f7ff fd27 	bl	d46c0 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4c72:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d4c74:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4c78:	2102      	movs	r1, #2
   d4c7a:	4630      	mov	r0, r6
   d4c7c:	f7ff fdc8 	bl	d4810 <sock_socket>

    if (_sock < 0) {
   d4c80:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4c82:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d4c84:	db24      	blt.n	d4cd0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4c86:	2204      	movs	r2, #4
   d4c88:	9200      	str	r2, [sp, #0]
   d4c8a:	ab02      	add	r3, sp, #8
   d4c8c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4c90:	f7ff fd9e 	bl	d47d0 <sock_setsockopt>
   d4c94:	b9e0      	cbnz	r0, d4cd0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d4c96:	b195      	cbz	r5, d4cbe <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d4c98:	9003      	str	r0, [sp, #12]
   d4c9a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4c9e:	a903      	add	r1, sp, #12
   d4ca0:	b2e8      	uxtb	r0, r5
   d4ca2:	f7ff fc55 	bl	d4550 <if_index_to_name>
   d4ca6:	b998      	cbnz	r0, d4cd0 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4ca8:	2306      	movs	r3, #6
   d4caa:	9300      	str	r3, [sp, #0]
   d4cac:	f241 020b 	movw	r2, #4107	; 0x100b
   d4cb0:	ab03      	add	r3, sp, #12
   d4cb2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4cb6:	6960      	ldr	r0, [r4, #20]
   d4cb8:	f7ff fd8a 	bl	d47d0 <sock_setsockopt>
   d4cbc:	b940      	cbnz	r0, d4cd0 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4cbe:	221c      	movs	r2, #28
   d4cc0:	a905      	add	r1, sp, #20
   d4cc2:	6960      	ldr	r0, [r4, #20]
   d4cc4:	f7ff fd7c 	bl	d47c0 <sock_bind>
   d4cc8:	b910      	cbnz	r0, d4cd0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d4cca:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d4ccc:	2001      	movs	r0, #1
   d4cce:	e004      	b.n	d4cda <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d4cd0:	6823      	ldr	r3, [r4, #0]
   d4cd2:	4620      	mov	r0, r4
   d4cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cd6:	4798      	blx	r3
   d4cd8:	2000      	movs	r0, #0
    }
    return bound;
}
   d4cda:	b00d      	add	sp, #52	; 0x34
   d4cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cde <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d4cde:	b510      	push	{r4, lr}
   d4ce0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4ce2:	6940      	ldr	r0, [r0, #20]
   d4ce4:	2800      	cmp	r0, #0
   d4ce6:	db01      	blt.n	d4cec <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4ce8:	f7ff fd7a 	bl	d47e0 <sock_close>
    }

    _sock = -1;
   d4cec:	f04f 33ff 	mov.w	r3, #4294967295
   d4cf0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d4cf2:	2300      	movs	r3, #0
   d4cf4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4cf6:	8723      	strh	r3, [r4, #56]	; 0x38
   d4cf8:	bd10      	pop	{r4, pc}

000d4cfa <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4cfa:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4cfc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4cfe:	4605      	mov	r5, r0
   d4d00:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4d02:	b113      	cbz	r3, d4d0a <_ZN3UDP5writeEPKhj+0x10>
   d4d04:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d4d06:	1a24      	subs	r4, r4, r0
   d4d08:	e000      	b.n	d4d0c <_ZN3UDP5writeEPKhj+0x12>
   d4d0a:	461c      	mov	r4, r3
   d4d0c:	4294      	cmp	r4, r2
   d4d0e:	bf28      	it	cs
   d4d10:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d4d12:	4622      	mov	r2, r4
   d4d14:	4418      	add	r0, r3
   d4d16:	f001 ff7a 	bl	d6c0e <memcpy>
    _offset += size;
   d4d1a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4d1c:	4423      	add	r3, r4
   d4d1e:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d4d20:	4620      	mov	r0, r4
   d4d22:	bd38      	pop	{r3, r4, r5, pc}

000d4d24 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4d24:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d4d26:	6803      	ldr	r3, [r0, #0]
   d4d28:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d4d2a:	4604      	mov	r4, r0
   d4d2c:	460e      	mov	r6, r1
   d4d2e:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d4d30:	4798      	blx	r3
   d4d32:	b188      	cbz	r0, d4d58 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d4d34:	6823      	ldr	r3, [r4, #0]
   d4d36:	4620      	mov	r0, r4
   d4d38:	691b      	ldr	r3, [r3, #16]
   d4d3a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4d3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4d3e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4d40:	4285      	cmp	r5, r0
   d4d42:	bfa8      	it	ge
   d4d44:	4605      	movge	r5, r0
   d4d46:	4419      	add	r1, r3
   d4d48:	462a      	mov	r2, r5
   d4d4a:	4630      	mov	r0, r6
   d4d4c:	f001 ff5f 	bl	d6c0e <memcpy>
        _offset += read;
   d4d50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4d52:	442b      	add	r3, r5
   d4d54:	86e3      	strh	r3, [r4, #54]	; 0x36
   d4d56:	e001      	b.n	d4d5c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d4d58:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d4d5c:	4628      	mov	r0, r5
   d4d5e:	bd70      	pop	{r4, r5, r6, pc}

000d4d60 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d4d60:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4d62:	4604      	mov	r4, r0
   d4d64:	4b05      	ldr	r3, [pc, #20]	; (d4d7c <_ZN3UDP8remoteIPEv+0x1c>)
   d4d66:	f844 3b04 	str.w	r3, [r4], #4
   d4d6a:	f101 0520 	add.w	r5, r1, #32
   d4d6e:	4606      	mov	r6, r0
   d4d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d74:	682b      	ldr	r3, [r5, #0]
   d4d76:	7023      	strb	r3, [r4, #0]
   d4d78:	4630      	mov	r0, r6
   d4d7a:	bd70      	pop	{r4, r5, r6, pc}
   d4d7c:	000d80e8 	.word	0x000d80e8

000d4d80 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d82:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4d84:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4d86:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4d88:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d4d8a:	4a0a      	ldr	r2, [pc, #40]	; (d4db4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d4d8c:	9202      	str	r2, [sp, #8]
   d4d8e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d4d90:	468e      	mov	lr, r1
   d4d92:	4606      	mov	r6, r0
   d4d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d96:	ac03      	add	r4, sp, #12
   d4d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d9a:	682b      	ldr	r3, [r5, #0]
   d4d9c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d4d9e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d4da2:	9300      	str	r3, [sp, #0]
   d4da4:	4662      	mov	r2, ip
   d4da6:	ab02      	add	r3, sp, #8
   d4da8:	4671      	mov	r1, lr
   d4daa:	4630      	mov	r0, r6
   d4dac:	47b8      	blx	r7
    }
   d4dae:	b009      	add	sp, #36	; 0x24
   d4db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4db2:	bf00      	nop
   d4db4:	000d80e8 	.word	0x000d80e8

000d4db8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4dba:	6803      	ldr	r3, [r0, #0]
   d4dbc:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d4dc0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4dc2:	4b0d      	ldr	r3, [pc, #52]	; (d4df8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d4dc4:	b089      	sub	sp, #36	; 0x24
   d4dc6:	f100 0620 	add.w	r6, r0, #32
   d4dca:	4604      	mov	r4, r0
   d4dcc:	9302      	str	r3, [sp, #8]
   d4dce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4dd0:	ad03      	add	r5, sp, #12
   d4dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4dd4:	6833      	ldr	r3, [r6, #0]
   d4dd6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4dd8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d4dda:	9300      	str	r3, [sp, #0]
   d4ddc:	4672      	mov	r2, lr
   d4dde:	ab02      	add	r3, sp, #8
   d4de0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d4de2:	4620      	mov	r0, r4
   d4de4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d4de6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d4de8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d4dea:	69db      	ldr	r3, [r3, #28]
   d4dec:	4620      	mov	r0, r4
   d4dee:	4798      	blx	r3
    return result;
}
   d4df0:	4628      	mov	r0, r5
   d4df2:	b009      	add	sp, #36	; 0x24
   d4df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4df6:	bf00      	nop
   d4df8:	000d80e8 	.word	0x000d80e8

000d4dfc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d4dfe:	7843      	ldrb	r3, [r0, #1]
   d4e00:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d4e02:	b08d      	sub	sp, #52	; 0x34
   d4e04:	4605      	mov	r5, r0
   d4e06:	460c      	mov	r4, r1
   d4e08:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d4e0a:	d101      	bne.n	d4e10 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d4e0c:	1d01      	adds	r1, r0, #4
   d4e0e:	e033      	b.n	d4e78 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d4e10:	2b0a      	cmp	r3, #10
   d4e12:	d135      	bne.n	d4e80 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d4e14:	2211      	movs	r2, #17
   d4e16:	2100      	movs	r1, #0
   d4e18:	a801      	add	r0, sp, #4
   d4e1a:	f001 ff03 	bl	d6c24 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d4e1e:	68ab      	ldr	r3, [r5, #8]
   d4e20:	b943      	cbnz	r3, d4e34 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4e22:	68eb      	ldr	r3, [r5, #12]
   d4e24:	b933      	cbnz	r3, d4e34 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d4e26:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d4e2a:	692e      	ldr	r6, [r5, #16]
   d4e2c:	f7ff fc38 	bl	d46a0 <inet_htonl>
   d4e30:	4286      	cmp	r6, r0
   d4e32:	d01f      	beq.n	d4e74 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e34:	f105 0308 	add.w	r3, r5, #8
   d4e38:	ae01      	add	r6, sp, #4
   d4e3a:	f105 0e18 	add.w	lr, r5, #24
   d4e3e:	6818      	ldr	r0, [r3, #0]
   d4e40:	6859      	ldr	r1, [r3, #4]
   d4e42:	4632      	mov	r2, r6
   d4e44:	c203      	stmia	r2!, {r0, r1}
   d4e46:	3308      	adds	r3, #8
   d4e48:	4573      	cmp	r3, lr
   d4e4a:	4616      	mov	r6, r2
   d4e4c:	d1f7      	bne.n	d4e3e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d4e4e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d4e50:	a901      	add	r1, sp, #4
   d4e52:	a806      	add	r0, sp, #24
   d4e54:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d4e56:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d4e5a:	f000 fcf1 	bl	d5840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4e60:	3404      	adds	r4, #4
   d4e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e64:	6833      	ldr	r3, [r6, #0]
   d4e66:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d4e68:	b157      	cbz	r7, d4e80 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d4e6a:	8868      	ldrh	r0, [r5, #2]
   d4e6c:	f7ff fc20 	bl	d46b0 <inet_ntohs>
   d4e70:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d4e72:	e005      	b.n	d4e80 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d4e74:	f105 0114 	add.w	r1, r5, #20
   d4e78:	4620      	mov	r0, r4
   d4e7a:	f000 fd16 	bl	d58aa <_ZN9IPAddressaSEPKh>
   d4e7e:	e7f3      	b.n	d4e68 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d4e80:	b00d      	add	sp, #52	; 0x34
   d4e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e84 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e88:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d4e8a:	ab0e      	add	r3, sp, #56	; 0x38
   d4e8c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d4e8e:	4606      	mov	r6, r0
   d4e90:	4617      	mov	r7, r2
   d4e92:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d4e94:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d4e98:	462a      	mov	r2, r5
   d4e9a:	4629      	mov	r1, r5
   d4e9c:	f7ff fb18 	bl	d44d0 <netdb_getaddrinfo>
   d4ea0:	2800      	cmp	r0, #0
   d4ea2:	db1f      	blt.n	d4ee4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d4ea4:	9b01      	ldr	r3, [sp, #4]
   d4ea6:	b1fb      	cbz	r3, d4ee8 <_ZN3UDP11beginPacketEPKct+0x64>
   d4ea8:	695b      	ldr	r3, [r3, #20]
   d4eaa:	b1eb      	cbz	r3, d4ee8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d4eac:	a802      	add	r0, sp, #8
   d4eae:	f000 fcb9 	bl	d5824 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d4eb2:	9b01      	ldr	r3, [sp, #4]
   d4eb4:	462a      	mov	r2, r5
   d4eb6:	6958      	ldr	r0, [r3, #20]
   d4eb8:	a902      	add	r1, sp, #8
   d4eba:	f7ff ff9f 	bl	d4dfc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d4ebe:	a802      	add	r0, sp, #8
   d4ec0:	f000 fcd0 	bl	d5864 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d4ec4:	b180      	cbz	r0, d4ee8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d4ec6:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4ec8:	ad03      	add	r5, sp, #12
   d4eca:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4ece:	4b0b      	ldr	r3, [pc, #44]	; (d4efc <_ZN3UDP11beginPacketEPKct+0x78>)
   d4ed0:	9308      	str	r3, [sp, #32]
   d4ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ed4:	ac09      	add	r4, sp, #36	; 0x24
   d4ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ed8:	682b      	ldr	r3, [r5, #0]
   d4eda:	7023      	strb	r3, [r4, #0]
   d4edc:	463a      	mov	r2, r7
   d4ede:	a908      	add	r1, sp, #32
   d4ee0:	4630      	mov	r0, r6
   d4ee2:	47c0      	blx	r8
   d4ee4:	4604      	mov	r4, r0
   d4ee6:	e001      	b.n	d4eec <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d4ee8:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d4eec:	9801      	ldr	r0, [sp, #4]
   d4eee:	f7ff fae7 	bl	d44c0 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d4ef2:	4620      	mov	r0, r4
   d4ef4:	b00e      	add	sp, #56	; 0x38
   d4ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4efa:	bf00      	nop
   d4efc:	000d80e8 	.word	0x000d80e8

000d4f00 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4f04:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d4f08:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d4f0c:	b08c      	sub	sp, #48	; 0x30
   d4f0e:	4605      	mov	r5, r0
   d4f10:	460c      	mov	r4, r1
   d4f12:	4617      	mov	r7, r2
   d4f14:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d4f16:	db00      	blt.n	d4f1a <_ZN3UDP13receivePacketEPhjm+0x1a>
   d4f18:	b911      	cbnz	r1, d4f20 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d4f1a:	f04f 30ff 	mov.w	r0, #4294967295
   d4f1e:	e035      	b.n	d4f8c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d4f20:	f04f 0a1c 	mov.w	sl, #28
   d4f24:	ae05      	add	r6, sp, #20
   d4f26:	4652      	mov	r2, sl
   d4f28:	2100      	movs	r1, #0
   d4f2a:	4630      	mov	r0, r6
   d4f2c:	f001 fe7a 	bl	d6c24 <memset>
        socklen_t slen = sizeof(saddr);
   d4f30:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d4f34:	f1b9 0f00 	cmp.w	r9, #0
   d4f38:	d014      	beq.n	d4f64 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d4f3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4f3e:	fbb9 f1f2 	udiv	r1, r9, r2
   d4f42:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d4f44:	fb02 9111 	mls	r1, r2, r1, r9
   d4f48:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4f4a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d4f4c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d4f4e:	9300      	str	r3, [sp, #0]
   d4f50:	f241 0206 	movw	r2, #4102	; 0x1006
   d4f54:	ab03      	add	r3, sp, #12
   d4f56:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4f5a:	4640      	mov	r0, r8
   d4f5c:	f7ff fc38 	bl	d47d0 <sock_setsockopt>
            if (ret) {
   d4f60:	b108      	cbz	r0, d4f66 <_ZN3UDP13receivePacketEPhjm+0x66>
   d4f62:	e013      	b.n	d4f8c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d4f64:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4f66:	ab02      	add	r3, sp, #8
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	4621      	mov	r1, r4
   d4f6c:	4603      	mov	r3, r0
   d4f6e:	9600      	str	r6, [sp, #0]
   d4f70:	463a      	mov	r2, r7
   d4f72:	6968      	ldr	r0, [r5, #20]
   d4f74:	f7ff fc3c 	bl	d47f0 <sock_recvfrom>
        if (ret >= 0) {
   d4f78:	1e04      	subs	r4, r0, #0
   d4f7a:	db06      	blt.n	d4f8a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d4f7c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d4f80:	f105 011c 	add.w	r1, r5, #28
   d4f84:	4630      	mov	r0, r6
   d4f86:	f7ff ff39 	bl	d4dfc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d4f8a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d4f8c:	b00c      	add	sp, #48	; 0x30
   d4f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4f92 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4f92:	b538      	push	{r3, r4, r5, lr}
   d4f94:	4605      	mov	r5, r0
   d4f96:	4614      	mov	r4, r2
   d4f98:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d4f9a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d4f9c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d4f9e:	d111      	bne.n	d4fc4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d4fa0:	231c      	movs	r3, #28
   d4fa2:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d4fa4:	230a      	movs	r3, #10
   d4fa6:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d4fa8:	f7ff fb8a 	bl	d46c0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4fac:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d4fae:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d4fb2:	1d2b      	adds	r3, r5, #4
   d4fb4:	3514      	adds	r5, #20
   d4fb6:	f853 2b04 	ldr.w	r2, [r3], #4
   d4fba:	f844 2b04 	str.w	r2, [r4], #4
   d4fbe:	42ab      	cmp	r3, r5
   d4fc0:	d1f9      	bne.n	d4fb6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d4fc2:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d4fc4:	2b04      	cmp	r3, #4
   d4fc6:	d10a      	bne.n	d4fde <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d4fc8:	2310      	movs	r3, #16
   d4fca:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d4fcc:	2302      	movs	r3, #2
   d4fce:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d4fd0:	f7ff fb76 	bl	d46c0 <inet_htons>
   d4fd4:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d4fd6:	6868      	ldr	r0, [r5, #4]
   d4fd8:	f7ff fb62 	bl	d46a0 <inet_htonl>
   d4fdc:	6060      	str	r0, [r4, #4]
   d4fde:	bd38      	pop	{r3, r4, r5, pc}

000d4fe0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4fe4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4fe6:	ac03      	add	r4, sp, #12
   d4fe8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d4fea:	4699      	mov	r9, r3
   d4fec:	4606      	mov	r6, r0
   d4fee:	460f      	mov	r7, r1
   d4ff0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d4ff2:	2100      	movs	r1, #0
   d4ff4:	462a      	mov	r2, r5
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	f001 fe14 	bl	d6c24 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d4ffc:	4622      	mov	r2, r4
   d4ffe:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d5002:	4648      	mov	r0, r9
   d5004:	f7ff ffc5 	bl	d4f92 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5008:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d500c:	b143      	cbz	r3, d5020 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d500e:	e88d 0030 	stmia.w	sp, {r4, r5}
   d5012:	2300      	movs	r3, #0
   d5014:	4642      	mov	r2, r8
   d5016:	4639      	mov	r1, r7
   d5018:	6970      	ldr	r0, [r6, #20]
   d501a:	f7ff fbf1 	bl	d4800 <sock_sendto>
   d501e:	e001      	b.n	d5024 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5020:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5024:	b00b      	add	sp, #44	; 0x2c
   d5026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d502a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d502a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d502c:	b091      	sub	sp, #68	; 0x44
   d502e:	460c      	mov	r4, r1
   d5030:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5032:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5034:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5036:	a809      	add	r0, sp, #36	; 0x24
   d5038:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d503a:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d503c:	f001 fdf2 	bl	d6c24 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5040:	aa09      	add	r2, sp, #36	; 0x24
   d5042:	2100      	movs	r1, #0
   d5044:	4620      	mov	r0, r4
   d5046:	f7ff ffa4 	bl	d4f92 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d504a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d504e:	2b02      	cmp	r3, #2
   d5050:	d12e      	bne.n	d50b0 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d5052:	2300      	movs	r3, #0
   d5054:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5058:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d505a:	b1dd      	cbz	r5, d5094 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d505c:	a902      	add	r1, sp, #8
   d505e:	4628      	mov	r0, r5
   d5060:	f7ff fa7e 	bl	d4560 <if_get_by_index>
   d5064:	b9b0      	cbnz	r0, d5094 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d5066:	a910      	add	r1, sp, #64	; 0x40
   d5068:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d506c:	9802      	ldr	r0, [sp, #8]
   d506e:	f7ff fa7f 	bl	d4570 <if_get_addrs>
   d5072:	b960      	cbnz	r0, d508e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5074:	9b03      	ldr	r3, [sp, #12]
   d5076:	b153      	cbz	r3, d508e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5078:	68da      	ldr	r2, [r3, #12]
   d507a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d507c:	7851      	ldrb	r1, [r2, #1]
   d507e:	2902      	cmp	r1, #2
   d5080:	d103      	bne.n	d508a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5082:	6852      	ldr	r2, [r2, #4]
   d5084:	b10a      	cbz	r2, d508a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5086:	9205      	str	r2, [sp, #20]
   d5088:	e001      	b.n	d508e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d508a:	681b      	ldr	r3, [r3, #0]
   d508c:	e7f3      	b.n	d5076 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d508e:	9803      	ldr	r0, [sp, #12]
   d5090:	f7ff fa76 	bl	d4580 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5094:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5096:	f04f 0308 	mov.w	r3, #8
   d509a:	9300      	str	r3, [sp, #0]
   d509c:	bf18      	it	ne
   d509e:	2203      	movne	r2, #3
   d50a0:	ab04      	add	r3, sp, #16
   d50a2:	bf08      	it	eq
   d50a4:	2204      	moveq	r2, #4
   d50a6:	2100      	movs	r1, #0
   d50a8:	4630      	mov	r0, r6
   d50aa:	f7ff fb91 	bl	d47d0 <sock_setsockopt>
   d50ae:	e01e      	b.n	d50ee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d50b0:	2b0a      	cmp	r3, #10
   d50b2:	d11a      	bne.n	d50ea <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d50b4:	ac04      	add	r4, sp, #16
   d50b6:	2214      	movs	r2, #20
   d50b8:	2100      	movs	r1, #0
   d50ba:	4620      	mov	r0, r4
   d50bc:	f001 fdb2 	bl	d6c24 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d50c0:	ab0b      	add	r3, sp, #44	; 0x2c
   d50c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d50c4:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d50c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d50ca:	f04f 0314 	mov.w	r3, #20
   d50ce:	9300      	str	r3, [sp, #0]
   d50d0:	bf18      	it	ne
   d50d2:	220c      	movne	r2, #12
   d50d4:	4623      	mov	r3, r4
   d50d6:	bf08      	it	eq
   d50d8:	220d      	moveq	r2, #13
   d50da:	2129      	movs	r1, #41	; 0x29
   d50dc:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d50de:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d50e0:	f7ff fb76 	bl	d47d0 <sock_setsockopt>
   d50e4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d50e8:	e001      	b.n	d50ee <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d50ea:	f04f 30ff 	mov.w	r0, #4294967295
}
   d50ee:	b011      	add	sp, #68	; 0x44
   d50f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d50f4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d50f4:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d50f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d50fa:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d50fc:	4b0b      	ldr	r3, [pc, #44]	; (d512c <_ZN3UDPC1Ev+0x38>)
   d50fe:	f103 0208 	add.w	r2, r3, #8
   d5102:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5104:	2500      	movs	r5, #0
   d5106:	6103      	str	r3, [r0, #16]
   d5108:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d510c:	4604      	mov	r4, r0
   d510e:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5110:	6002      	str	r2, [r0, #0]
   d5112:	6143      	str	r3, [r0, #20]
   d5114:	301c      	adds	r0, #28
   d5116:	f000 fb85 	bl	d5824 <_ZN9IPAddressC1Ev>
   d511a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d511e:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5120:	8725      	strh	r5, [r4, #56]	; 0x38
   d5122:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5124:	6423      	str	r3, [r4, #64]	; 0x40
   d5126:	6465      	str	r5, [r4, #68]	; 0x44
}
   d5128:	4620      	mov	r0, r4
   d512a:	bd38      	pop	{r3, r4, r5, pc}
   d512c:	000d7f68 	.word	0x000d7f68

000d5130 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5130:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5132:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d5136:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5138:	b123      	cbz	r3, d5144 <_ZN3UDP13releaseBufferEv+0x14>
   d513a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d513c:	b110      	cbz	r0, d5144 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d513e:	2101      	movs	r1, #1
   d5140:	f001 f8fe 	bl	d6340 <_ZdlPvj>
    }
    _buffer = NULL;
   d5144:	2300      	movs	r3, #0
   d5146:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5148:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d514c:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d514e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5150:	8723      	strh	r3, [r4, #56]	; 0x38
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5154:	b570      	push	{r4, r5, r6, lr}
   d5156:	4604      	mov	r4, r0
   d5158:	4616      	mov	r6, r2
   d515a:	460d      	mov	r5, r1
    releaseBuffer();
   d515c:	f7ff ffe8 	bl	d5130 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d5160:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d5162:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5164:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5166:	b93e      	cbnz	r6, d5178 <_ZN3UDP9setBufferEjPh+0x24>
   d5168:	b135      	cbz	r5, d5178 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d516a:	4628      	mov	r0, r5
   d516c:	f7fe ff95 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d5170:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d5172:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5174:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d5178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d517a:	b103      	cbz	r3, d517e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d517c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d517e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5180:	3000      	adds	r0, #0
   d5182:	bf18      	it	ne
   d5184:	2001      	movne	r0, #1
   d5186:	bd70      	pop	{r4, r5, r6, pc}

000d5188 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d518a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d518c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d518e:	4605      	mov	r5, r0
   d5190:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d5192:	b91a      	cbnz	r2, d519c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5194:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5196:	b109      	cbz	r1, d519c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5198:	f7ff ffdc 	bl	d5154 <_ZN3UDP9setBufferEjPh>
   d519c:	3404      	adds	r4, #4
   d519e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d51a0:	f105 0620 	add.w	r6, r5, #32
   d51a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d51a6:	6823      	ldr	r3, [r4, #0]
   d51a8:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d51aa:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d51ac:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d51ae:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d51b0:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d51b2:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d51b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51b6 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d51b6:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d51b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d51ba:	4604      	mov	r4, r0
   d51bc:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d51be:	b91a      	cbnz	r2, d51c8 <_ZN3UDP11parsePacketEm+0x12>
   d51c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d51c2:	b109      	cbz	r1, d51c8 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d51c4:	f7ff ffc6 	bl	d5154 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d51c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d51ca:	2200      	movs	r2, #0
   d51cc:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d51ce:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d51d0:	b149      	cbz	r1, d51e6 <_ZN3UDP11parsePacketEm+0x30>
   d51d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d51d4:	b13a      	cbz	r2, d51e6 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d51d6:	6823      	ldr	r3, [r4, #0]
   d51d8:	4620      	mov	r0, r4
   d51da:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d51dc:	4633      	mov	r3, r6
   d51de:	47a8      	blx	r5
        if (result > 0) {
   d51e0:	2800      	cmp	r0, #0
            _total = result;
   d51e2:	bfc8      	it	gt
   d51e4:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d51e6:	6823      	ldr	r3, [r4, #0]
   d51e8:	4620      	mov	r0, r4
   d51ea:	691b      	ldr	r3, [r3, #16]
}
   d51ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d51f0:	4718      	bx	r3
	...

000d51f4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d51f4:	b510      	push	{r4, lr}
   d51f6:	4b07      	ldr	r3, [pc, #28]	; (d5214 <_ZN3UDPD1Ev+0x20>)
   d51f8:	f103 0208 	add.w	r2, r3, #8
   d51fc:	336c      	adds	r3, #108	; 0x6c
   d51fe:	4604      	mov	r4, r0
   d5200:	6002      	str	r2, [r0, #0]
   d5202:	6103      	str	r3, [r0, #16]
   d5204:	f7ff fd6b 	bl	d4cde <_ZN3UDP4stopEv>
   d5208:	4620      	mov	r0, r4
   d520a:	f7ff ff91 	bl	d5130 <_ZN3UDP13releaseBufferEv>
   d520e:	4620      	mov	r0, r4
   d5210:	bd10      	pop	{r4, pc}
   d5212:	bf00      	nop
   d5214:	000d7f68 	.word	0x000d7f68

000d5218 <_ZN3UDPD0Ev>:
   d5218:	b510      	push	{r4, lr}
   d521a:	4604      	mov	r4, r0
   d521c:	f7ff ffea 	bl	d51f4 <_ZN3UDPD1Ev>
   d5220:	4620      	mov	r0, r4
   d5222:	214c      	movs	r1, #76	; 0x4c
   d5224:	f001 f88c 	bl	d6340 <_ZdlPvj>
   d5228:	4620      	mov	r0, r4
   d522a:	bd10      	pop	{r4, pc}

000d522c <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d522c:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d522e:	6940      	ldr	r0, [r0, #20]
   d5230:	2800      	cmp	r0, #0
   d5232:	db04      	blt.n	d523e <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d5234:	2301      	movs	r3, #1
   d5236:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d523a:	f7ff bef6 	b.w	d502a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d523e:	f04f 30ff 	mov.w	r0, #4294967295
   d5242:	4770      	bx	lr

000d5244 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5244:	b510      	push	{r4, lr}
   d5246:	4604      	mov	r4, r0
{
	free(buffer);
   d5248:	6800      	ldr	r0, [r0, #0]
   d524a:	f7ff fbf7 	bl	d4a3c <free>
}
   d524e:	4620      	mov	r0, r4
   d5250:	bd10      	pop	{r4, pc}

000d5252 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5252:	b510      	push	{r4, lr}
   d5254:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5256:	6800      	ldr	r0, [r0, #0]
   d5258:	b108      	cbz	r0, d525e <_ZN6String10invalidateEv+0xc>
   d525a:	f7ff fbef 	bl	d4a3c <free>
	buffer = NULL;
   d525e:	2300      	movs	r3, #0
   d5260:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5262:	60a3      	str	r3, [r4, #8]
   d5264:	6063      	str	r3, [r4, #4]
   d5266:	bd10      	pop	{r4, pc}

000d5268 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5268:	b538      	push	{r3, r4, r5, lr}
   d526a:	4604      	mov	r4, r0
   d526c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d526e:	6800      	ldr	r0, [r0, #0]
   d5270:	3101      	adds	r1, #1
   d5272:	f7ff fbeb 	bl	d4a4c <realloc>
	if (newbuffer) {
   d5276:	b110      	cbz	r0, d527e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5278:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d527c:	2001      	movs	r0, #1
	}
	return 0;
}
   d527e:	bd38      	pop	{r3, r4, r5, pc}

000d5280 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5280:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5282:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5284:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5286:	b113      	cbz	r3, d528e <_ZN6String7reserveEj+0xe>
   d5288:	6843      	ldr	r3, [r0, #4]
   d528a:	428b      	cmp	r3, r1
   d528c:	d207      	bcs.n	d529e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d528e:	4620      	mov	r0, r4
   d5290:	f7ff ffea 	bl	d5268 <_ZN6String12changeBufferEj>
   d5294:	b120      	cbz	r0, d52a0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5296:	68a3      	ldr	r3, [r4, #8]
   d5298:	b90b      	cbnz	r3, d529e <_ZN6String7reserveEj+0x1e>
   d529a:	6822      	ldr	r2, [r4, #0]
   d529c:	7013      	strb	r3, [r2, #0]
   d529e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d52a0:	bd10      	pop	{r4, pc}

000d52a2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d52a2:	b570      	push	{r4, r5, r6, lr}
   d52a4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d52a6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d52a8:	4604      	mov	r4, r0
   d52aa:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d52ac:	f7ff ffe8 	bl	d5280 <_ZN6String7reserveEj>
   d52b0:	b918      	cbnz	r0, d52ba <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d52b2:	4620      	mov	r0, r4
   d52b4:	f7ff ffcd 	bl	d5252 <_ZN6String10invalidateEv>
		return *this;
   d52b8:	e009      	b.n	d52ce <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d52ba:	462a      	mov	r2, r5
   d52bc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d52be:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d52c0:	6820      	ldr	r0, [r4, #0]
   d52c2:	f001 fca4 	bl	d6c0e <memcpy>
	buffer[len] = 0;
   d52c6:	6822      	ldr	r2, [r4, #0]
   d52c8:	68a3      	ldr	r3, [r4, #8]
   d52ca:	2100      	movs	r1, #0
   d52cc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d52ce:	4620      	mov	r0, r4
   d52d0:	bd70      	pop	{r4, r5, r6, pc}

000d52d2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d52d2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52d4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d52d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d52da:	6043      	str	r3, [r0, #4]
	len = 0;
   d52dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d52de:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d52e0:	460d      	mov	r5, r1
   d52e2:	b139      	cbz	r1, d52f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d52e4:	4608      	mov	r0, r1
   d52e6:	f002 f9f3 	bl	d76d0 <strlen>
   d52ea:	4629      	mov	r1, r5
   d52ec:	4602      	mov	r2, r0
   d52ee:	4620      	mov	r0, r4
   d52f0:	f7ff ffd7 	bl	d52a2 <_ZN6String4copyEPKcj>
}
   d52f4:	4620      	mov	r0, r4
   d52f6:	bd38      	pop	{r3, r4, r5, pc}

000d52f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d52f8:	4802      	ldr	r0, [pc, #8]	; (d5304 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d52fa:	2300      	movs	r3, #0
   d52fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d52fe:	f7ff b99f 	b.w	d4640 <os_mutex_recursive_create>
   d5302:	bf00      	nop
   d5304:	2003e2a8 	.word	0x2003e2a8

000d5308 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d530a:	4606      	mov	r6, r0
   d530c:	460d      	mov	r5, r1
   d530e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5310:	2400      	movs	r4, #0
  while (size--) {
   d5312:	42bd      	cmp	r5, r7
   d5314:	d00c      	beq.n	d5330 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5316:	6833      	ldr	r3, [r6, #0]
   d5318:	f815 1b01 	ldrb.w	r1, [r5], #1
   d531c:	689b      	ldr	r3, [r3, #8]
   d531e:	4630      	mov	r0, r6
   d5320:	4798      	blx	r3
     if (chunk>=0)
   d5322:	2800      	cmp	r0, #0
   d5324:	db01      	blt.n	d532a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5326:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5328:	e7f3      	b.n	d5312 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d532a:	2c00      	cmp	r4, #0
   d532c:	bf08      	it	eq
   d532e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5330:	4620      	mov	r0, r4
   d5332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5334 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5334:	b570      	push	{r4, r5, r6, lr}
   d5336:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5338:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d533a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d533c:	b149      	cbz	r1, d5352 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d533e:	f002 f9c7 	bl	d76d0 <strlen>
   d5342:	682b      	ldr	r3, [r5, #0]
   d5344:	4602      	mov	r2, r0
   d5346:	4621      	mov	r1, r4
   d5348:	4628      	mov	r0, r5
   d534a:	68db      	ldr	r3, [r3, #12]
    }
   d534c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5350:	4718      	bx	r3
    }
   d5352:	bd70      	pop	{r4, r5, r6, pc}

000d5354 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5354:	6803      	ldr	r3, [r0, #0]
   d5356:	689b      	ldr	r3, [r3, #8]
   d5358:	4718      	bx	r3

000d535a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d535a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d535c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d535e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5360:	f7ff fff8 	bl	d5354 <_ZN5Print5printEc>
  n += print('\n');
   d5364:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5366:	4604      	mov	r4, r0
  n += print('\n');
   d5368:	4628      	mov	r0, r5
   d536a:	f7ff fff3 	bl	d5354 <_ZN5Print5printEc>
  return n;
}
   d536e:	4420      	add	r0, r4
   d5370:	bd38      	pop	{r3, r4, r5, pc}

000d5372 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5372:	b538      	push	{r3, r4, r5, lr}
   d5374:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5376:	f7ff ffdd 	bl	d5334 <_ZN5Print5writeEPKc>
   d537a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d537c:	4628      	mov	r0, r5
   d537e:	f7ff ffec 	bl	d535a <_ZN5Print7printlnEv>
  return n;
}
   d5382:	4420      	add	r0, r4
   d5384:	bd38      	pop	{r3, r4, r5, pc}

000d5386 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5386:	b530      	push	{r4, r5, lr}
   d5388:	b08b      	sub	sp, #44	; 0x2c
   d538a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d538c:	2100      	movs	r1, #0
   d538e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5392:	2a01      	cmp	r2, #1
   d5394:	bf98      	it	ls
   d5396:	220a      	movls	r2, #10
   d5398:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d539c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d53a0:	fb05 3312 	mls	r3, r5, r2, r3
   d53a4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53a8:	2b09      	cmp	r3, #9
   d53aa:	bf94      	ite	ls
   d53ac:	3330      	addls	r3, #48	; 0x30
   d53ae:	3337      	addhi	r3, #55	; 0x37
   d53b0:	b2db      	uxtb	r3, r3
   d53b2:	4621      	mov	r1, r4
   d53b4:	f804 3901 	strb.w	r3, [r4], #-1
   d53b8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53ba:	2d00      	cmp	r5, #0
   d53bc:	d1ee      	bne.n	d539c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d53be:	f7ff ffb9 	bl	d5334 <_ZN5Print5writeEPKc>
}
   d53c2:	b00b      	add	sp, #44	; 0x2c
   d53c4:	bd30      	pop	{r4, r5, pc}

000d53c6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d53c6:	b410      	push	{r4}
  if (base == 0) return write(n);
   d53c8:	b92a      	cbnz	r2, d53d6 <_ZN5Print5printEmi+0x10>
   d53ca:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d53cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d53d0:	689b      	ldr	r3, [r3, #8]
   d53d2:	b2c9      	uxtb	r1, r1
   d53d4:	4718      	bx	r3
  else return printNumber(n, base);
   d53d6:	b2d2      	uxtb	r2, r2
}
   d53d8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d53dc:	f7ff bfd3 	b.w	d5386 <_ZN5Print11printNumberEmh>

000d53e0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d53e0:	f7ff bff1 	b.w	d53c6 <_ZN5Print5printEmi>

000d53e4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d53e4:	b40c      	push	{r2, r3}
   d53e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53ea:	b087      	sub	sp, #28
   d53ec:	af00      	add	r7, sp, #0
   d53ee:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d53f2:	4605      	mov	r5, r0
   d53f4:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d53f8:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d53fa:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d53fc:	4623      	mov	r3, r4
   d53fe:	464a      	mov	r2, r9
   d5400:	2114      	movs	r1, #20
   d5402:	1d38      	adds	r0, r7, #4
   d5404:	f7ff fb52 	bl	d4aac <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5408:	2813      	cmp	r0, #19
   d540a:	d805      	bhi.n	d5418 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d540c:	1d39      	adds	r1, r7, #4
   d540e:	4628      	mov	r0, r5
   d5410:	f7ff ff90 	bl	d5334 <_ZN5Print5writeEPKc>
   d5414:	4604      	mov	r4, r0
   d5416:	e013      	b.n	d5440 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5418:	f100 0308 	add.w	r3, r0, #8
   d541c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5420:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5422:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5426:	1c41      	adds	r1, r0, #1
   d5428:	4623      	mov	r3, r4
   d542a:	464a      	mov	r2, r9
   d542c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d542e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5430:	f7ff fb3c 	bl	d4aac <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5434:	4669      	mov	r1, sp
   d5436:	4628      	mov	r0, r5
   d5438:	f7ff ff7c 	bl	d5334 <_ZN5Print5writeEPKc>
   d543c:	4604      	mov	r4, r0
   d543e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5440:	b11e      	cbz	r6, d544a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5442:	4628      	mov	r0, r5
   d5444:	f7ff ff89 	bl	d535a <_ZN5Print7printlnEv>
   d5448:	4404      	add	r4, r0
    return n;
}
   d544a:	4620      	mov	r0, r4
   d544c:	371c      	adds	r7, #28
   d544e:	46bd      	mov	sp, r7
   d5450:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5454:	b002      	add	sp, #8
   d5456:	4770      	bx	lr

000d5458 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5458:	6800      	ldr	r0, [r0, #0]
   d545a:	f7ff b8f9 	b.w	d4650 <os_mutex_recursive_lock>
	...

000d5460 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5460:	4b01      	ldr	r3, [pc, #4]	; (d5468 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5462:	4a02      	ldr	r2, [pc, #8]	; (d546c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5464:	601a      	str	r2, [r3, #0]
   d5466:	4770      	bx	lr
   d5468:	2003e2ac 	.word	0x2003e2ac
   d546c:	000d804b 	.word	0x000d804b

000d5470 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5470:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5472:	2000      	movs	r0, #0
   d5474:	f7ff faca 	bl	d4a0c <spark_sync_time_pending>
   d5478:	b128      	cbz	r0, d5486 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d547a:	f7ff faaf 	bl	d49dc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d547e:	f080 0001 	eor.w	r0, r0, #1
   d5482:	b2c0      	uxtb	r0, r0
   d5484:	bd08      	pop	{r3, pc}
   d5486:	2001      	movs	r0, #1
    }
   d5488:	bd08      	pop	{r3, pc}
	...

000d548c <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d548c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d5490:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d5494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d5498:	d40f      	bmi.n	d54ba <_ZN9TimeClass4zoneEf+0x2e>
   d549a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d549e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d54a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d54a6:	dc08      	bgt.n	d54ba <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d54a8:	eddf 7a04 	vldr	s15, [pc, #16]	; d54bc <_ZN9TimeClass4zoneEf+0x30>
   d54ac:	4b04      	ldr	r3, [pc, #16]	; (d54c0 <_ZN9TimeClass4zoneEf+0x34>)
   d54ae:	ee20 0a27 	vmul.f32	s0, s0, s15
   d54b2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d54b6:	ed83 0a00 	vstr	s0, [r3]
   d54ba:	4770      	bx	lr
   d54bc:	45610000 	.word	0x45610000
   d54c0:	2003e2bc 	.word	0x2003e2bc

000d54c4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d54c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d54c6:	4b0e      	ldr	r3, [pc, #56]	; (d5500 <_ZN9TimeClass7timeStrEl+0x3c>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	4419      	add	r1, r3
   d54cc:	4b0d      	ldr	r3, [pc, #52]	; (d5504 <_ZN9TimeClass7timeStrEl+0x40>)
   d54ce:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d54d0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d54d2:	a802      	add	r0, sp, #8
   d54d4:	4419      	add	r1, r3
   d54d6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d54da:	f001 fa91 	bl	d6a00 <localtime>
        char* ascstr = asctime(calendar_time);
   d54de:	f001 fa45 	bl	d696c <asctime>
   d54e2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d54e4:	f002 f8f4 	bl	d76d0 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d54e8:	4428      	add	r0, r5
   d54ea:	2300      	movs	r3, #0
   d54ec:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d54f0:	4629      	mov	r1, r5
   d54f2:	4620      	mov	r0, r4
   d54f4:	f7ff feed 	bl	d52d2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d54f8:	4620      	mov	r0, r4
   d54fa:	b003      	add	sp, #12
   d54fc:	bd30      	pop	{r4, r5, pc}
   d54fe:	bf00      	nop
   d5500:	2003e2bc 	.word	0x2003e2bc
   d5504:	2003e2b8 	.word	0x2003e2b8

000d5508 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d5508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d550c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
   d550e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d5510:	4607      	mov	r7, r0
   d5512:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
   d5514:	4620      	mov	r0, r4
   d5516:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d5518:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
   d551a:	f001 fbbd 	bl	d6c98 <strcpy>
    size_t len = strlen(format_str);
   d551e:	4620      	mov	r0, r4
   d5520:	f002 f8d6 	bl	d76d0 <strlen>
   d5524:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d5526:	b925      	cbnz	r5, d5532 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
   d5528:	4924      	ldr	r1, [pc, #144]	; (d55bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
   d552a:	a803      	add	r0, sp, #12
   d552c:	f001 fbb4 	bl	d6c98 <strcpy>
   d5530:	e013      	b.n	d555a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d5532:	213c      	movs	r1, #60	; 0x3c
   d5534:	fb95 f2f1 	sdiv	r2, r5, r1
   d5538:	2a00      	cmp	r2, #0
   d553a:	bfb8      	it	lt
   d553c:	4252      	neglt	r2, r2
   d553e:	fb92 f3f1 	sdiv	r3, r2, r1
   d5542:	fb01 2213 	mls	r2, r1, r3, r2
   d5546:	9200      	str	r2, [sp, #0]
   d5548:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d554c:	4a1c      	ldr	r2, [pc, #112]	; (d55c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
   d554e:	fb95 f3f3 	sdiv	r3, r5, r3
   d5552:	2110      	movs	r1, #16
   d5554:	a803      	add	r0, sp, #12
   d5556:	f7ff fa99 	bl	d4a8c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d555a:	4625      	mov	r5, r4
   d555c:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d555e:	f108 3aff 	add.w	sl, r8, #4294967295
   d5562:	45b2      	cmp	sl, r6
   d5564:	d91b      	bls.n	d559e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d5566:	782b      	ldrb	r3, [r5, #0]
   d5568:	2b25      	cmp	r3, #37	; 0x25
   d556a:	d116      	bne.n	d559a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
   d556c:	786b      	ldrb	r3, [r5, #1]
   d556e:	2b7a      	cmp	r3, #122	; 0x7a
   d5570:	d113      	bne.n	d559a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
   d5572:	a803      	add	r0, sp, #12
   d5574:	f002 f8ac 	bl	d76d0 <strlen>
   d5578:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d557a:	4430      	add	r0, r6
   d557c:	ebc6 020a 	rsb	r2, r6, sl
   d5580:	1ca9      	adds	r1, r5, #2
   d5582:	4420      	add	r0, r4
   d5584:	f001 fb43 	bl	d6c0e <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d5588:	4642      	mov	r2, r8
   d558a:	a903      	add	r1, sp, #12
   d558c:	4628      	mov	r0, r5
   d558e:	f001 fb3e 	bl	d6c0e <memcpy>
            len = strlen(format_str);
   d5592:	4620      	mov	r0, r4
   d5594:	f002 f89c 	bl	d76d0 <strlen>
   d5598:	4680      	mov	r8, r0
   d559a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d559c:	e7de      	b.n	d555c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d559e:	464b      	mov	r3, r9
   d55a0:	4622      	mov	r2, r4
   d55a2:	2132      	movs	r1, #50	; 0x32
   d55a4:	a807      	add	r0, sp, #28
   d55a6:	f001 fbdf 	bl	d6d68 <strftime>
    return String(buf);
   d55aa:	a907      	add	r1, sp, #28
   d55ac:	4638      	mov	r0, r7
   d55ae:	f7ff fe90 	bl	d52d2 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d55b2:	4638      	mov	r0, r7
   d55b4:	b024      	add	sp, #144	; 0x90
   d55b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d55ba:	bf00      	nop
   d55bc:	000d86bd 	.word	0x000d86bd
   d55c0:	000d80b6 	.word	0x000d80b6

000d55c4 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d55c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d55c6:	4605      	mov	r5, r0
   d55c8:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d55ca:	461c      	mov	r4, r3
   d55cc:	b913      	cbnz	r3, d55d4 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d55ce:	4b12      	ldr	r3, [pc, #72]	; (d5618 <_ZN9TimeClass6formatElPKc+0x54>)
   d55d0:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d55d2:	b12c      	cbz	r4, d55e0 <_ZN9TimeClass6formatElPKc+0x1c>
   d55d4:	4b11      	ldr	r3, [pc, #68]	; (d561c <_ZN9TimeClass6formatElPKc+0x58>)
   d55d6:	4620      	mov	r0, r4
   d55d8:	6819      	ldr	r1, [r3, #0]
   d55da:	f001 fb53 	bl	d6c84 <strcmp>
   d55de:	b920      	cbnz	r0, d55ea <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d55e0:	9901      	ldr	r1, [sp, #4]
   d55e2:	4628      	mov	r0, r5
   d55e4:	f7ff ff6e 	bl	d54c4 <_ZN9TimeClass7timeStrEl>
   d55e8:	e013      	b.n	d5612 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d55ea:	4f0d      	ldr	r7, [pc, #52]	; (d5620 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d55ec:	9a01      	ldr	r2, [sp, #4]
   d55ee:	683b      	ldr	r3, [r7, #0]
   d55f0:	4e0c      	ldr	r6, [pc, #48]	; (d5624 <_ZN9TimeClass6formatElPKc+0x60>)
   d55f2:	441a      	add	r2, r3
   d55f4:	6833      	ldr	r3, [r6, #0]
   d55f6:	a802      	add	r0, sp, #8
   d55f8:	4413      	add	r3, r2
   d55fa:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d55fe:	f001 f9ff 	bl	d6a00 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d5602:	683a      	ldr	r2, [r7, #0]
   d5604:	6833      	ldr	r3, [r6, #0]
   d5606:	4601      	mov	r1, r0
   d5608:	4413      	add	r3, r2
   d560a:	4628      	mov	r0, r5
   d560c:	4622      	mov	r2, r4
   d560e:	f7ff ff7b 	bl	d5508 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d5612:	4628      	mov	r0, r5
   d5614:	b003      	add	sp, #12
   d5616:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5618:	2003e2b4 	.word	0x2003e2b4
   d561c:	2003e1b4 	.word	0x2003e1b4
   d5620:	2003e2bc 	.word	0x2003e2bc
   d5624:	2003e2b8 	.word	0x2003e2b8

000d5628 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5628:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d562a:	2000      	movs	r0, #0
   d562c:	f7fe ffd8 	bl	d45e0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5630:	4604      	mov	r4, r0
   d5632:	b968      	cbnz	r0, d5650 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5634:	f7ff f93c 	bl	d48b0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5638:	2801      	cmp	r0, #1
   d563a:	d10b      	bne.n	d5654 <_ZN9TimeClass7isValidEv+0x2c>
   d563c:	4620      	mov	r0, r4
   d563e:	f7ff f94f 	bl	d48e0 <system_thread_get_state>
   d5642:	b938      	cbnz	r0, d5654 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5644:	f7ff ff14 	bl	d5470 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5648:	b930      	cbnz	r0, d5658 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d564a:	f7ff f9bf 	bl	d49cc <spark_process>
   d564e:	e7f9      	b.n	d5644 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5650:	2001      	movs	r0, #1
   d5652:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5654:	2000      	movs	r0, #0
   d5656:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5658:	f7ff ff0a 	bl	d5470 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d565c:	2000      	movs	r0, #0
   d565e:	f7fe ffbf 	bl	d45e0 <HAL_RTC_Time_Is_Valid>
   d5662:	3000      	adds	r0, #0
   d5664:	bf18      	it	ne
   d5666:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5668:	bd10      	pop	{r4, pc}

000d566a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d566a:	b508      	push	{r3, lr}
    (void)isValid();
   d566c:	f7ff ffdc 	bl	d5628 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5674:	f7fe bfac 	b.w	d45d0 <HAL_RTC_Get_UnixTime>

000d5678 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5678:	4b02      	ldr	r3, [pc, #8]	; (d5684 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d567a:	681a      	ldr	r2, [r3, #0]
   d567c:	4b02      	ldr	r3, [pc, #8]	; (d5688 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d567e:	601a      	str	r2, [r3, #0]
   d5680:	4770      	bx	lr
   d5682:	bf00      	nop
   d5684:	2003e1b4 	.word	0x2003e1b4
   d5688:	2003e2b4 	.word	0x2003e2b4

000d568c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d568c:	2100      	movs	r1, #0
   d568e:	f7ff b91f 	b.w	d48d0 <system_delay_ms>

000d5692 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5692:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5694:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5696:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5698:	b113      	cbz	r3, d56a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d569a:	2203      	movs	r2, #3
   d569c:	4601      	mov	r1, r0
   d569e:	4798      	blx	r3
    }
   d56a0:	4620      	mov	r0, r4
   d56a2:	bd10      	pop	{r4, pc}

000d56a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d56a4:	b510      	push	{r4, lr}
   d56a6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56a8:	f7ff fff3 	bl	d5692 <_ZNSt14_Function_baseD1Ev>
   d56ac:	4620      	mov	r0, r4
   d56ae:	bd10      	pop	{r4, pc}

000d56b0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d56b0:	4803      	ldr	r0, [pc, #12]	; (d56c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d56b2:	4a04      	ldr	r2, [pc, #16]	; (d56c4 <_GLOBAL__sub_I_RGB+0x14>)
   d56b4:	4904      	ldr	r1, [pc, #16]	; (d56c8 <_GLOBAL__sub_I_RGB+0x18>)
   d56b6:	2300      	movs	r3, #0
   d56b8:	6083      	str	r3, [r0, #8]
   d56ba:	f000 be33 	b.w	d6324 <__aeabi_atexit>
   d56be:	bf00      	nop
   d56c0:	2003e2c0 	.word	0x2003e2c0
   d56c4:	2003e26c 	.word	0x2003e26c
   d56c8:	000d56a5 	.word	0x000d56a5

000d56cc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d56cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d56ce:	4b0f      	ldr	r3, [pc, #60]	; (d570c <serialEventRun+0x40>)
   d56d0:	b133      	cbz	r3, d56e0 <serialEventRun+0x14>
   d56d2:	f000 f957 	bl	d5984 <_Z16_fetch_usbserialv>
   d56d6:	6803      	ldr	r3, [r0, #0]
   d56d8:	691b      	ldr	r3, [r3, #16]
   d56da:	4798      	blx	r3
   d56dc:	2800      	cmp	r0, #0
   d56de:	dc0d      	bgt.n	d56fc <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d56e0:	4b0b      	ldr	r3, [pc, #44]	; (d5710 <serialEventRun+0x44>)
   d56e2:	b133      	cbz	r3, d56f2 <serialEventRun+0x26>
   d56e4:	f000 f9d4 	bl	d5a90 <_Z22__fetch_global_Serial1v>
   d56e8:	6803      	ldr	r3, [r0, #0]
   d56ea:	691b      	ldr	r3, [r3, #16]
   d56ec:	4798      	blx	r3
   d56ee:	2800      	cmp	r0, #0
   d56f0:	dc07      	bgt.n	d5702 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d56f2:	4b08      	ldr	r3, [pc, #32]	; (d5714 <serialEventRun+0x48>)
   d56f4:	b143      	cbz	r3, d5708 <serialEventRun+0x3c>
   d56f6:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d56fa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d56fc:	f3af 8000 	nop.w
   d5700:	e7ee      	b.n	d56e0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5702:	f3af 8000 	nop.w
   d5706:	e7f4      	b.n	d56f2 <serialEventRun+0x26>
   d5708:	bd08      	pop	{r3, pc}
   d570a:	bf00      	nop
	...

000d5718 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5718:	b508      	push	{r3, lr}
	serialEventRun();
   d571a:	f7ff ffd7 	bl	d56cc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d571e:	f7fe ff4f 	bl	d45c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5722:	4b01      	ldr	r3, [pc, #4]	; (d5728 <_post_loop+0x10>)
   d5724:	6018      	str	r0, [r3, #0]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	2003e608 	.word	0x2003e608

000d572c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d572c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d572e:	2300      	movs	r3, #0
   d5730:	9300      	str	r3, [sp, #0]
   d5732:	461a      	mov	r2, r3
   d5734:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5738:	f7ff f8e4 	bl	d4904 <system_ctrl_set_result>
}
   d573c:	b003      	add	sp, #12
   d573e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5744 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5744:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5746:	8843      	ldrh	r3, [r0, #2]
   d5748:	2b0a      	cmp	r3, #10
   d574a:	d008      	beq.n	d575e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d574c:	2b50      	cmp	r3, #80	; 0x50
   d574e:	d109      	bne.n	d5764 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5750:	4b09      	ldr	r3, [pc, #36]	; (d5778 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5752:	681b      	ldr	r3, [r3, #0]
   d5754:	b13b      	cbz	r3, d5766 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5756:	b003      	add	sp, #12
   d5758:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d575c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d575e:	f7ff ffe5 	bl	d572c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5762:	e006      	b.n	d5772 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5764:	2300      	movs	r3, #0
   d5766:	9300      	str	r3, [sp, #0]
   d5768:	461a      	mov	r2, r3
   d576a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d576e:	f7ff f8c9 	bl	d4904 <system_ctrl_set_result>
        break;
    }
}
   d5772:	b003      	add	sp, #12
   d5774:	f85d fb04 	ldr.w	pc, [sp], #4
   d5778:	2003e2d0 	.word	0x2003e2d0

000d577c <module_user_init_hook>:

void module_user_init_hook()
{
   d577c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d577e:	f7fe ff07 	bl	d4590 <HAL_RNG_GetRandomNumber>
   d5782:	4604      	mov	r4, r0
    srand(seed);
   d5784:	f001 fa56 	bl	d6c34 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5788:	4b07      	ldr	r3, [pc, #28]	; (d57a8 <module_user_init_hook+0x2c>)
   d578a:	b113      	cbz	r3, d5792 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d578c:	4620      	mov	r0, r4
   d578e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5792:	2100      	movs	r1, #0
   d5794:	4804      	ldr	r0, [pc, #16]	; (d57a8 <module_user_init_hook+0x2c>)
   d5796:	f7ff f941 	bl	d4a1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d579a:	2100      	movs	r1, #0
   d579c:	4803      	ldr	r0, [pc, #12]	; (d57ac <module_user_init_hook+0x30>)
}
   d579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d57a2:	f7ff b8a5 	b.w	d48f0 <system_ctrl_set_app_request_handler>
   d57a6:	bf00      	nop
   d57a8:	00000000 	.word	0x00000000
   d57ac:	000d5745 	.word	0x000d5745

000d57b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d57b0:	4770      	bx	lr

000d57b2 <_ZN9IPAddressD0Ev>:
   d57b2:	b510      	push	{r4, lr}
   d57b4:	2118      	movs	r1, #24
   d57b6:	4604      	mov	r4, r0
   d57b8:	f000 fdc2 	bl	d6340 <_ZdlPvj>
   d57bc:	4620      	mov	r0, r4
   d57be:	bd10      	pop	{r4, pc}

000d57c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57c2:	7d03      	ldrb	r3, [r0, #20]
   d57c4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d57c6:	b08d      	sub	sp, #52	; 0x34
   d57c8:	460e      	mov	r6, r1
   d57ca:	f100 0704 	add.w	r7, r0, #4
   d57ce:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d57d2:	d002      	beq.n	d57da <_ZNK9IPAddress7printToER5Print+0x1a>
   d57d4:	f100 0508 	add.w	r5, r0, #8
   d57d8:	e018      	b.n	d580c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d57da:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57dc:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d57de:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57e2:	232f      	movs	r3, #47	; 0x2f
   d57e4:	462a      	mov	r2, r5
   d57e6:	200a      	movs	r0, #10
   d57e8:	f7fe ff4a 	bl	d4680 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d57ec:	4628      	mov	r0, r5
   d57ee:	f001 ff6f 	bl	d76d0 <strlen>
   d57f2:	6833      	ldr	r3, [r6, #0]
   d57f4:	4602      	mov	r2, r0
   d57f6:	68db      	ldr	r3, [r3, #12]
   d57f8:	4629      	mov	r1, r5
   d57fa:	4630      	mov	r0, r6
   d57fc:	4798      	blx	r3
   d57fe:	e00f      	b.n	d5820 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5800:	b124      	cbz	r4, d580c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5802:	212e      	movs	r1, #46	; 0x2e
   d5804:	4630      	mov	r0, r6
   d5806:	f7ff fda5 	bl	d5354 <_ZN5Print5printEc>
   d580a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d580c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5810:	220a      	movs	r2, #10
   d5812:	4630      	mov	r0, r6
   d5814:	f7ff fde4 	bl	d53e0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5818:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d581a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d581c:	d1f0      	bne.n	d5800 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d581e:	4620      	mov	r0, r4
    }
    return n;
}
   d5820:	b00d      	add	sp, #52	; 0x34
   d5822:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5824 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5824:	b510      	push	{r4, lr}
   d5826:	4b05      	ldr	r3, [pc, #20]	; (d583c <_ZN9IPAddressC1Ev+0x18>)
   d5828:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d582a:	2211      	movs	r2, #17
   d582c:	f840 3b04 	str.w	r3, [r0], #4
   d5830:	2100      	movs	r1, #0
   d5832:	f001 f9f7 	bl	d6c24 <memset>
{
    clear();
}
   d5836:	4620      	mov	r0, r4
   d5838:	bd10      	pop	{r4, pc}
   d583a:	bf00      	nop
   d583c:	000d80e8 	.word	0x000d80e8

000d5840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5840:	4603      	mov	r3, r0
   d5842:	4a07      	ldr	r2, [pc, #28]	; (d5860 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5844:	b510      	push	{r4, lr}
   d5846:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d584a:	f101 0210 	add.w	r2, r1, #16
   d584e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5852:	f843 4b04 	str.w	r4, [r3], #4
   d5856:	4291      	cmp	r1, r2
   d5858:	d1f9      	bne.n	d584e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d585a:	780a      	ldrb	r2, [r1, #0]
   d585c:	701a      	strb	r2, [r3, #0]
}
   d585e:	bd10      	pop	{r4, pc}
   d5860:	000d80e8 	.word	0x000d80e8

000d5864 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5864:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5866:	2b04      	cmp	r3, #4
   d5868:	d101      	bne.n	d586e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d586a:	6840      	ldr	r0, [r0, #4]
   d586c:	e008      	b.n	d5880 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d586e:	2b06      	cmp	r3, #6
   d5870:	d10a      	bne.n	d5888 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5872:	6843      	ldr	r3, [r0, #4]
   d5874:	b953      	cbnz	r3, d588c <_ZNK9IPAddresscvbEv+0x28>
   d5876:	6883      	ldr	r3, [r0, #8]
   d5878:	b943      	cbnz	r3, d588c <_ZNK9IPAddresscvbEv+0x28>
   d587a:	68c3      	ldr	r3, [r0, #12]
   d587c:	b933      	cbnz	r3, d588c <_ZNK9IPAddresscvbEv+0x28>
   d587e:	6900      	ldr	r0, [r0, #16]
   d5880:	3000      	adds	r0, #0
   d5882:	bf18      	it	ne
   d5884:	2001      	movne	r0, #1
   d5886:	4770      	bx	lr
    } else {
        return false;
   d5888:	2000      	movs	r0, #0
   d588a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d588c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d588e:	4770      	bx	lr

000d5890 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5890:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5892:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5896:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d589a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d589e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d58a2:	2304      	movs	r3, #4
   d58a4:	6041      	str	r1, [r0, #4]
   d58a6:	7503      	strb	r3, [r0, #20]
   d58a8:	bd10      	pop	{r4, pc}

000d58aa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d58aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d58ac:	780d      	ldrb	r5, [r1, #0]
   d58ae:	788b      	ldrb	r3, [r1, #2]
   d58b0:	784a      	ldrb	r2, [r1, #1]
   d58b2:	78c9      	ldrb	r1, [r1, #3]
   d58b4:	9100      	str	r1, [sp, #0]
   d58b6:	4629      	mov	r1, r5
   d58b8:	f7ff ffea 	bl	d5890 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d58bc:	b003      	add	sp, #12
   d58be:	bd30      	pop	{r4, r5, pc}

000d58c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d58c0:	7441      	strb	r1, [r0, #17]
   d58c2:	4770      	bx	lr

000d58c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d58c4:	4770      	bx	lr

000d58c6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d58c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d58c8:	2100      	movs	r1, #0
   d58ca:	7c00      	ldrb	r0, [r0, #16]
   d58cc:	f7fe ffc8 	bl	d4860 <HAL_USB_USART_Receive_Data>
}
   d58d0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58d4:	bf28      	it	cs
   d58d6:	f04f 30ff 	movcs.w	r0, #4294967295
   d58da:	bd08      	pop	{r3, pc}

000d58dc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d58dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d58de:	2101      	movs	r1, #1
   d58e0:	7c00      	ldrb	r0, [r0, #16]
   d58e2:	f7fe ffbd 	bl	d4860 <HAL_USB_USART_Receive_Data>
}
   d58e6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58ea:	bf28      	it	cs
   d58ec:	f04f 30ff 	movcs.w	r0, #4294967295
   d58f0:	bd08      	pop	{r3, pc}

000d58f2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d58f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d58f4:	7c00      	ldrb	r0, [r0, #16]
   d58f6:	f7fe ffab 	bl	d4850 <HAL_USB_USART_Available_Data_For_Write>
}
   d58fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d58fe:	bd08      	pop	{r3, pc}

000d5900 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5900:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5902:	7c00      	ldrb	r0, [r0, #16]
   d5904:	f7fe ff9c 	bl	d4840 <HAL_USB_USART_Available_Data>
}
   d5908:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d590c:	bd08      	pop	{r3, pc}

000d590e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d590e:	7c00      	ldrb	r0, [r0, #16]
   d5910:	f7fe bfb6 	b.w	d4880 <HAL_USB_USART_Flush_Data>

000d5914 <_ZN9USBSerialD0Ev>:
   d5914:	b510      	push	{r4, lr}
   d5916:	2114      	movs	r1, #20
   d5918:	4604      	mov	r4, r0
   d591a:	f000 fd11 	bl	d6340 <_ZdlPvj>
   d591e:	4620      	mov	r0, r4
   d5920:	bd10      	pop	{r4, pc}

000d5922 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5922:	b538      	push	{r3, r4, r5, lr}
   d5924:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5926:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5928:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d592a:	f7fe ff91 	bl	d4850 <HAL_USB_USART_Available_Data_For_Write>
   d592e:	2800      	cmp	r0, #0
   d5930:	dc01      	bgt.n	d5936 <_ZN9USBSerial5writeEh+0x14>
   d5932:	7c60      	ldrb	r0, [r4, #17]
   d5934:	b128      	cbz	r0, d5942 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5936:	4629      	mov	r1, r5
   d5938:	7c20      	ldrb	r0, [r4, #16]
   d593a:	f7fe ff99 	bl	d4870 <HAL_USB_USART_Send_Data>
   d593e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5942:	bd38      	pop	{r3, r4, r5, pc}

000d5944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5944:	b510      	push	{r4, lr}
   d5946:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5948:	2300      	movs	r3, #0
   d594a:	6063      	str	r3, [r4, #4]
   d594c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5950:	60a3      	str	r3, [r4, #8]
   d5952:	4b05      	ldr	r3, [pc, #20]	; (d5968 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5954:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5956:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5958:	4608      	mov	r0, r1
{
  _serial = serial;
   d595a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d595c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d595e:	4611      	mov	r1, r2
   d5960:	f7fe ff5e 	bl	d4820 <HAL_USB_USART_Init>
}
   d5964:	4620      	mov	r0, r4
   d5966:	bd10      	pop	{r4, pc}
   d5968:	000d80fc 	.word	0x000d80fc

000d596c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d596c:	2200      	movs	r2, #0
   d596e:	7c00      	ldrb	r0, [r0, #16]
   d5970:	f7fe bf5e 	b.w	d4830 <HAL_USB_USART_Begin>

000d5974 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5974:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5976:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5978:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d597a:	2100      	movs	r1, #0
   d597c:	f001 f952 	bl	d6c24 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5980:	4620      	mov	r0, r4
   d5982:	bd10      	pop	{r4, pc}

000d5984 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5984:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5986:	4d0e      	ldr	r5, [pc, #56]	; (d59c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5988:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d598a:	a801      	add	r0, sp, #4
   d598c:	f7ff fff2 	bl	d5974 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5990:	6829      	ldr	r1, [r5, #0]
   d5992:	f011 0401 	ands.w	r4, r1, #1
   d5996:	d110      	bne.n	d59ba <_Z16_fetch_usbserialv+0x36>
   d5998:	4628      	mov	r0, r5
   d599a:	f7fe fb84 	bl	d40a6 <__cxa_guard_acquire>
   d599e:	b160      	cbz	r0, d59ba <_Z16_fetch_usbserialv+0x36>
   d59a0:	aa01      	add	r2, sp, #4
   d59a2:	4621      	mov	r1, r4
   d59a4:	4807      	ldr	r0, [pc, #28]	; (d59c4 <_Z16_fetch_usbserialv+0x40>)
   d59a6:	f7ff ffcd 	bl	d5944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d59aa:	4628      	mov	r0, r5
   d59ac:	f7fe fb80 	bl	d40b0 <__cxa_guard_release>
   d59b0:	4a05      	ldr	r2, [pc, #20]	; (d59c8 <_Z16_fetch_usbserialv+0x44>)
   d59b2:	4906      	ldr	r1, [pc, #24]	; (d59cc <_Z16_fetch_usbserialv+0x48>)
   d59b4:	4803      	ldr	r0, [pc, #12]	; (d59c4 <_Z16_fetch_usbserialv+0x40>)
   d59b6:	f000 fcb5 	bl	d6324 <__aeabi_atexit>
	return _usbserial;
}
   d59ba:	4802      	ldr	r0, [pc, #8]	; (d59c4 <_Z16_fetch_usbserialv+0x40>)
   d59bc:	b007      	add	sp, #28
   d59be:	bd30      	pop	{r4, r5, pc}
   d59c0:	2003e2d4 	.word	0x2003e2d4
   d59c4:	2003e2d8 	.word	0x2003e2d8
   d59c8:	2003e26c 	.word	0x2003e26c
   d59cc:	000d58c5 	.word	0x000d58c5

000d59d0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d59d0:	f7fe bd9e 	b.w	d4510 <HAL_Interrupts_Disable_All>

000d59d4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d59d4:	f7fe bd94 	b.w	d4500 <HAL_Interrupts_Enable_All>

000d59d8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d59d8:	4770      	bx	lr

000d59da <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d59da:	7441      	strb	r1, [r0, #17]
   d59dc:	4770      	bx	lr

000d59de <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d59de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d59e0:	7c00      	ldrb	r0, [r0, #16]
   d59e2:	f7fe fead 	bl	d4740 <HAL_USART_Available_Data_For_Write>
}
   d59e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59ea:	bd08      	pop	{r3, pc}

000d59ec <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d59ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d59ee:	7c00      	ldrb	r0, [r0, #16]
   d59f0:	f7fe fe7e 	bl	d46f0 <HAL_USART_Available_Data>
}
   d59f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d59f8:	bd08      	pop	{r3, pc}

000d59fa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d59fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d59fc:	7c00      	ldrb	r0, [r0, #16]
   d59fe:	f7fe fe87 	bl	d4710 <HAL_USART_Peek_Data>
}
   d5a02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a06:	bf28      	it	cs
   d5a08:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a0c:	bd08      	pop	{r3, pc}

000d5a0e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5a0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5a10:	7c00      	ldrb	r0, [r0, #16]
   d5a12:	f7fe fe75 	bl	d4700 <HAL_USART_Read_Data>
}
   d5a16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a1a:	bf28      	it	cs
   d5a1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a20:	bd08      	pop	{r3, pc}

000d5a22 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5a22:	7c00      	ldrb	r0, [r0, #16]
   d5a24:	f7fe be7c 	b.w	d4720 <HAL_USART_Flush_Data>

000d5a28 <_ZN11USARTSerialD0Ev>:
   d5a28:	b510      	push	{r4, lr}
   d5a2a:	2114      	movs	r1, #20
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	f000 fc87 	bl	d6340 <_ZdlPvj>
   d5a32:	4620      	mov	r0, r4
   d5a34:	bd10      	pop	{r4, pc}

000d5a36 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5a36:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a38:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5a3e:	b925      	cbnz	r5, d5a4a <_ZN11USARTSerial5writeEh+0x14>
   d5a40:	7c00      	ldrb	r0, [r0, #16]
   d5a42:	f7fe fe7d 	bl	d4740 <HAL_USART_Available_Data_For_Write>
   d5a46:	2800      	cmp	r0, #0
   d5a48:	dd05      	ble.n	d5a56 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a4a:	4631      	mov	r1, r6
   d5a4c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5a52:	f7fe be45 	b.w	d46e0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5a56:	4628      	mov	r0, r5
   d5a58:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5a5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5a5c:	b510      	push	{r4, lr}
   d5a5e:	4604      	mov	r4, r0
   d5a60:	4608      	mov	r0, r1
   d5a62:	4611      	mov	r1, r2
   d5a64:	2200      	movs	r2, #0
   d5a66:	6062      	str	r2, [r4, #4]
   d5a68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a6c:	60a2      	str	r2, [r4, #8]
   d5a6e:	4a05      	ldr	r2, [pc, #20]	; (d5a84 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5a70:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5a72:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5a74:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5a76:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5a78:	461a      	mov	r2, r3
   d5a7a:	f7fe fe29 	bl	d46d0 <HAL_USART_Init>
}
   d5a7e:	4620      	mov	r0, r4
   d5a80:	bd10      	pop	{r4, pc}
   d5a82:	bf00      	nop
   d5a84:	000d812c 	.word	0x000d812c

000d5a88 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5a88:	7c00      	ldrb	r0, [r0, #16]
   d5a8a:	f7fe be51 	b.w	d4730 <HAL_USART_Is_Enabled>
	...

000d5a90 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5a90:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5a92:	4d0c      	ldr	r5, [pc, #48]	; (d5ac4 <_Z22__fetch_global_Serial1v+0x34>)
   d5a94:	6829      	ldr	r1, [r5, #0]
   d5a96:	f011 0401 	ands.w	r4, r1, #1
   d5a9a:	d111      	bne.n	d5ac0 <_Z22__fetch_global_Serial1v+0x30>
   d5a9c:	4628      	mov	r0, r5
   d5a9e:	f7fe fb02 	bl	d40a6 <__cxa_guard_acquire>
   d5aa2:	b168      	cbz	r0, d5ac0 <_Z22__fetch_global_Serial1v+0x30>
   d5aa4:	4a08      	ldr	r2, [pc, #32]	; (d5ac8 <_Z22__fetch_global_Serial1v+0x38>)
   d5aa6:	4b09      	ldr	r3, [pc, #36]	; (d5acc <_Z22__fetch_global_Serial1v+0x3c>)
   d5aa8:	4809      	ldr	r0, [pc, #36]	; (d5ad0 <_Z22__fetch_global_Serial1v+0x40>)
   d5aaa:	4621      	mov	r1, r4
   d5aac:	f7ff ffd6 	bl	d5a5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5ab0:	4628      	mov	r0, r5
   d5ab2:	f7fe fafd 	bl	d40b0 <__cxa_guard_release>
   d5ab6:	4a07      	ldr	r2, [pc, #28]	; (d5ad4 <_Z22__fetch_global_Serial1v+0x44>)
   d5ab8:	4907      	ldr	r1, [pc, #28]	; (d5ad8 <_Z22__fetch_global_Serial1v+0x48>)
   d5aba:	4805      	ldr	r0, [pc, #20]	; (d5ad0 <_Z22__fetch_global_Serial1v+0x40>)
   d5abc:	f000 fc32 	bl	d6324 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5ac0:	4803      	ldr	r0, [pc, #12]	; (d5ad0 <_Z22__fetch_global_Serial1v+0x40>)
   d5ac2:	bd38      	pop	{r3, r4, r5, pc}
   d5ac4:	2003e384 	.word	0x2003e384
   d5ac8:	2003e388 	.word	0x2003e388
   d5acc:	2003e300 	.word	0x2003e300
   d5ad0:	2003e2ec 	.word	0x2003e2ec
   d5ad4:	2003e26c 	.word	0x2003e26c
   d5ad8:	000d59d9 	.word	0x000d59d9

000d5adc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5adc:	4770      	bx	lr

000d5ade <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ae0:	4606      	mov	r6, r0
   d5ae2:	4615      	mov	r5, r2
   d5ae4:	460c      	mov	r4, r1
   d5ae6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ae8:	42bc      	cmp	r4, r7
   d5aea:	d006      	beq.n	d5afa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5aec:	6833      	ldr	r3, [r6, #0]
   d5aee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5af2:	689b      	ldr	r3, [r3, #8]
   d5af4:	4630      	mov	r0, r6
   d5af6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5af8:	e7f6      	b.n	d5ae8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5afa:	4628      	mov	r0, r5
   d5afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5afe <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5afe:	2200      	movs	r2, #0
   d5b00:	7c00      	ldrb	r0, [r0, #16]
   d5b02:	f7fe be25 	b.w	d4750 <HAL_I2C_Write_Data>

000d5b06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5b06:	2100      	movs	r1, #0
   d5b08:	7c00      	ldrb	r0, [r0, #16]
   d5b0a:	f7fe be29 	b.w	d4760 <HAL_I2C_Available_Data>

000d5b0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5b0e:	2100      	movs	r1, #0
   d5b10:	7c00      	ldrb	r0, [r0, #16]
   d5b12:	f7fe be2d 	b.w	d4770 <HAL_I2C_Read_Data>

000d5b16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5b16:	2100      	movs	r1, #0
   d5b18:	7c00      	ldrb	r0, [r0, #16]
   d5b1a:	f7fe be31 	b.w	d4780 <HAL_I2C_Peek_Data>

000d5b1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5b1e:	2100      	movs	r1, #0
   d5b20:	7c00      	ldrb	r0, [r0, #16]
   d5b22:	f7fe be35 	b.w	d4790 <HAL_I2C_Flush_Data>

000d5b26 <_ZN7TwoWireD0Ev>:
   d5b26:	b510      	push	{r4, lr}
   d5b28:	2114      	movs	r1, #20
   d5b2a:	4604      	mov	r4, r0
   d5b2c:	f000 fc08 	bl	d6340 <_ZdlPvj>
   d5b30:	4620      	mov	r0, r4
   d5b32:	bd10      	pop	{r4, pc}

000d5b34 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b34:	b510      	push	{r4, lr}
   d5b36:	4604      	mov	r4, r0
   d5b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b3c:	4608      	mov	r0, r1
   d5b3e:	60a3      	str	r3, [r4, #8]
   d5b40:	2100      	movs	r1, #0
   d5b42:	4b04      	ldr	r3, [pc, #16]	; (d5b54 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5b44:	7420      	strb	r0, [r4, #16]
   d5b46:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b48:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5b4a:	f7fe fe31 	bl	d47b0 <HAL_I2C_Init>

}
   d5b4e:	4620      	mov	r0, r4
   d5b50:	bd10      	pop	{r4, pc}
   d5b52:	bf00      	nop
   d5b54:	000d815c 	.word	0x000d815c

000d5b58 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5b58:	2100      	movs	r1, #0
   d5b5a:	7c00      	ldrb	r0, [r0, #16]
   d5b5c:	f7fe be20 	b.w	d47a0 <HAL_I2C_Is_Enabled>

000d5b60 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5b60:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5b62:	2301      	movs	r3, #1
   d5b64:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5b66:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5b68:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d5b6a:	b10b      	cbz	r3, d5b70 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d5b6c:	68c0      	ldr	r0, [r0, #12]
   d5b6e:	e006      	b.n	d5b7e <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5b70:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5b72:	b128      	cbz	r0, d5b80 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5b74:	6883      	ldr	r3, [r0, #8]
   d5b76:	b90b      	cbnz	r3, d5b7c <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d5b78:	f000 fbf5 	bl	d6366 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5b7c:	68c3      	ldr	r3, [r0, #12]
   d5b7e:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d5b80:	2301      	movs	r3, #1
   d5b82:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5b84:	2000      	movs	r0, #0
    }
   d5b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d5b8a:	f7fe bd71 	b.w	d4670 <os_thread_exit>

000d5b8e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b8e:	2200      	movs	r2, #0
   d5b90:	4611      	mov	r1, r2
   d5b92:	6840      	ldr	r0, [r0, #4]
   d5b94:	f7fe bf02 	b.w	d499c <network_listening>

000d5b98 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b98:	2200      	movs	r2, #0
   d5b9a:	4611      	mov	r1, r2
   d5b9c:	6840      	ldr	r0, [r0, #4]
   d5b9e:	f7fe bf0d 	b.w	d49bc <network_get_listen_timeout>

000d5ba2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ba2:	2200      	movs	r2, #0
   d5ba4:	6840      	ldr	r0, [r0, #4]
   d5ba6:	f7fe bf01 	b.w	d49ac <network_set_listen_timeout>

000d5baa <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5baa:	2200      	movs	r2, #0
   d5bac:	f081 0101 	eor.w	r1, r1, #1
   d5bb0:	6840      	ldr	r0, [r0, #4]
   d5bb2:	f7fe beeb 	b.w	d498c <network_listen>

000d5bb6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5bb6:	2300      	movs	r3, #0
   d5bb8:	461a      	mov	r2, r3
   d5bba:	2101      	movs	r1, #1
   d5bbc:	6840      	ldr	r0, [r0, #4]
   d5bbe:	f7fe bedd 	b.w	d497c <network_off>

000d5bc2 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5bc2:	2300      	movs	r3, #0
   d5bc4:	461a      	mov	r2, r3
   d5bc6:	4619      	mov	r1, r3
   d5bc8:	6840      	ldr	r0, [r0, #4]
   d5bca:	f7fe becf 	b.w	d496c <network_on>

000d5bce <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5bce:	2200      	movs	r2, #0
   d5bd0:	4611      	mov	r1, r2
   d5bd2:	6840      	ldr	r0, [r0, #4]
   d5bd4:	f7fe bec2 	b.w	d495c <network_ready>

000d5bd8 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bd8:	2200      	movs	r2, #0
   d5bda:	4611      	mov	r1, r2
   d5bdc:	6840      	ldr	r0, [r0, #4]
   d5bde:	f7fe bead 	b.w	d493c <network_connecting>

000d5be2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5be2:	2200      	movs	r2, #0
   d5be4:	2102      	movs	r1, #2
   d5be6:	6840      	ldr	r0, [r0, #4]
   d5be8:	f7fe beb0 	b.w	d494c <network_disconnect>

000d5bec <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5bec:	2300      	movs	r3, #0
   d5bee:	461a      	mov	r2, r3
   d5bf0:	6840      	ldr	r0, [r0, #4]
   d5bf2:	f7fe be9b 	b.w	d492c <network_connect>

000d5bf6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5bf6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5bf8:	4605      	mov	r5, r0
   d5bfa:	b188      	cbz	r0, d5c20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5bfc:	6804      	ldr	r4, [r0, #0]
   d5bfe:	b14c      	cbz	r4, d5c14 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5c00:	68a3      	ldr	r3, [r4, #8]
   d5c02:	b11b      	cbz	r3, d5c0c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c04:	2203      	movs	r2, #3
   d5c06:	4621      	mov	r1, r4
   d5c08:	4620      	mov	r0, r4
   d5c0a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c0c:	2110      	movs	r1, #16
   d5c0e:	4620      	mov	r0, r4
   d5c10:	f000 fb96 	bl	d6340 <_ZdlPvj>
   d5c14:	4628      	mov	r0, r5
   d5c16:	2114      	movs	r1, #20
      }
   d5c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c1c:	f000 bb90 	b.w	d6340 <_ZdlPvj>
   d5c20:	bd38      	pop	{r3, r4, r5, pc}

000d5c22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5c22:	b110      	cbz	r0, d5c2a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5c24:	6803      	ldr	r3, [r0, #0]
   d5c26:	685b      	ldr	r3, [r3, #4]
   d5c28:	4718      	bx	r3
   d5c2a:	4770      	bx	lr

000d5c2c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5c2c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5c2e:	6803      	ldr	r3, [r0, #0]
   d5c30:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5c32:	b1bb      	cbz	r3, d5c64 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5c34:	6858      	ldr	r0, [r3, #4]
   d5c36:	f7fe fce3 	bl	d4600 <os_thread_is_current>
   d5c3a:	b978      	cbnz	r0, d5c5c <_ZN6ThreadD1Ev+0x30>
   d5c3c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5c3e:	7c5a      	ldrb	r2, [r3, #17]
   d5c40:	b912      	cbnz	r2, d5c48 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5c42:	6858      	ldr	r0, [r3, #4]
   d5c44:	f7fe fce4 	bl	d4610 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5c48:	6823      	ldr	r3, [r4, #0]
   d5c4a:	6858      	ldr	r0, [r3, #4]
   d5c4c:	f7fe fce8 	bl	d4620 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c50:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5c52:	2300      	movs	r3, #0
   d5c54:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5c56:	b128      	cbz	r0, d5c64 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5c58:	f7ff ffcd 	bl	d5bf6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c5c:	6820      	ldr	r0, [r4, #0]
   d5c5e:	b108      	cbz	r0, d5c64 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5c60:	f7ff ffc9 	bl	d5bf6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5c64:	4620      	mov	r0, r4
   d5c66:	bd10      	pop	{r4, pc}

000d5c68 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5c68:	b538      	push	{r3, r4, r5, lr}
   d5c6a:	4b0c      	ldr	r3, [pc, #48]	; (d5c9c <_ZN5spark9MeshClassD1Ev+0x34>)
   d5c6c:	6003      	str	r3, [r0, #0]
   d5c6e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c70:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5c74:	b108      	cbz	r0, d5c7a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5c76:	f7fe fa14 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c7a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5c7e:	b135      	cbz	r5, d5c8e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5c80:	4628      	mov	r0, r5
   d5c82:	f7ff ffd3 	bl	d5c2c <_ZN6ThreadD1Ev>
   d5c86:	2104      	movs	r1, #4
   d5c88:	4628      	mov	r0, r5
   d5c8a:	f000 fb59 	bl	d6340 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5c8e:	68a0      	ldr	r0, [r4, #8]
   d5c90:	b108      	cbz	r0, d5c96 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5c92:	f7ff ffc6 	bl	d5c22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5c96:	4620      	mov	r0, r4
   d5c98:	bd38      	pop	{r3, r4, r5, pc}
   d5c9a:	bf00      	nop
   d5c9c:	000d8184 	.word	0x000d8184

000d5ca0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5ca4:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d5ca6:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d5ca8:	460d      	mov	r5, r1
   d5caa:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d5cac:	f001 fd10 	bl	d76d0 <strlen>
   d5cb0:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d5cb4:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d5cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5cb8:	b1ab      	cbz	r3, d5ce6 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5cba:	2140      	movs	r1, #64	; 0x40
   d5cbc:	4620      	mov	r0, r4
   d5cbe:	f001 fd24 	bl	d770a <strnlen>

        if (event_name_length < filter_length)
   d5cc2:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d5cc4:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d5cc6:	d30b      	bcc.n	d5ce0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d5cc8:	4629      	mov	r1, r5
   d5cca:	4620      	mov	r0, r4
   d5ccc:	f000 ff90 	bl	d6bf0 <memcmp>
        if (0 == cmp)
   d5cd0:	b930      	cbnz	r0, d5ce0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d5cd2:	9000      	str	r0, [sp, #0]
   d5cd4:	4643      	mov	r3, r8
   d5cd6:	462a      	mov	r2, r5
   d5cd8:	4621      	mov	r1, r4
   d5cda:	2058      	movs	r0, #88	; 0x58
   d5cdc:	f7fe fe1c 	bl	d4918 <system_invoke_event_handler>
   d5ce0:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d5ce2:	42b4      	cmp	r4, r6
   d5ce4:	d1e7      	bne.n	d5cb6 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d5ce6:	b002      	add	sp, #8
   d5ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cec <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d5cec:	b530      	push	{r4, r5, lr}
   d5cee:	b08d      	sub	sp, #52	; 0x34
   d5cf0:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d5cf2:	2211      	movs	r2, #17
   d5cf4:	2100      	movs	r1, #0
   d5cf6:	a801      	add	r0, sp, #4
   d5cf8:	f000 ff94 	bl	d6c24 <memset>
    addr.v = 6;
   d5cfc:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5cfe:	aa01      	add	r2, sp, #4
   d5d00:	4909      	ldr	r1, [pc, #36]	; (d5d28 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d5d02:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d5d06:	200a      	movs	r0, #10
   d5d08:	f7fe fcc2 	bl	d4690 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5d0c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d5d0e:	a901      	add	r1, sp, #4
   d5d10:	a806      	add	r0, sp, #24
   d5d12:	f7ff fd95 	bl	d5840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d18:	3404      	adds	r4, #4
   d5d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d1c:	682b      	ldr	r3, [r5, #0]
   d5d1e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d5d20:	2000      	movs	r0, #0
   d5d22:	b00d      	add	sp, #52	; 0x34
   d5d24:	bd30      	pop	{r4, r5, pc}
   d5d26:	bf00      	nop
   d5d28:	000d81b0 	.word	0x000d81b0

000d5d2c <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d30:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d5d32:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d5d36:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d5d38:	4630      	mov	r0, r6
   d5d3a:	f7ff fb8d 	bl	d5458 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5d3e:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5d40:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5d44:	f7fe fc8c 	bl	d4660 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   d5d48:	2c00      	cmp	r4, #0
   d5d4a:	d063      	beq.n	d5e14 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d5d4c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5d50:	b163      	cbz	r3, d5d6c <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d5d52:	6823      	ldr	r3, [r4, #0]
   d5d54:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d5d58:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d5d5a:	4620      	mov	r0, r4
   d5d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d60:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d5d64:	47b8      	blx	r7
        if (len > 0) {
   d5d66:	1e04      	subs	r4, r0, #0
   d5d68:	dc13      	bgt.n	d5d92 <_ZN5spark11MeshPublish4pollEv+0x66>
   d5d6a:	e056      	b.n	d5e1a <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d5d6c:	492d      	ldr	r1, [pc, #180]	; (d5e24 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d5d6e:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d5d72:	f000 fae7 	bl	d6344 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d76:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d5d7a:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d5d7e:	b113      	cbz	r3, d5d86 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d80:	4618      	mov	r0, r3
   d5d82:	f7fe f98e 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d5d86:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d5d8a:	2b00      	cmp	r3, #0
   d5d8c:	d1e1      	bne.n	d5d52 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d5d8e:	4826      	ldr	r0, [pc, #152]	; (d5e28 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d5d90:	e044      	b.n	d5e1c <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d5d92:	2320      	movs	r3, #32
   d5d94:	4a25      	ldr	r2, [pc, #148]	; (d5e2c <_ZN5spark11MeshPublish4pollEv+0x100>)
   d5d96:	9302      	str	r3, [sp, #8]
   d5d98:	9200      	str	r2, [sp, #0]
   d5d9a:	2300      	movs	r3, #0
   d5d9c:	9401      	str	r4, [sp, #4]
   d5d9e:	aa02      	add	r2, sp, #8
   d5da0:	4923      	ldr	r1, [pc, #140]	; (d5e30 <_ZN5spark11MeshPublish4pollEv+0x104>)
   d5da2:	9303      	str	r3, [sp, #12]
   d5da4:	2001      	movs	r0, #1
   d5da6:	f7fe fd7b 	bl	d48a0 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5daa:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d5dae:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d5db0:	781b      	ldrb	r3, [r3, #0]
   d5db2:	bb6b      	cbnz	r3, d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d5db4:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d5db6:	4621      	mov	r1, r4
   d5db8:	4638      	mov	r0, r7
   d5dba:	f001 fca6 	bl	d770a <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d5dbe:	b338      	cbz	r0, d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d5dc0:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5dc2:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d5dc4:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5dc8:	dd22      	ble.n	d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5dca:	5c3b      	ldrb	r3, [r7, r0]
   d5dcc:	bb03      	cbnz	r3, d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d5dce:	3c01      	subs	r4, #1
   d5dd0:	d00e      	beq.n	d5df0 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d5dd2:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d5dd6:	4621      	mov	r1, r4
   d5dd8:	4640      	mov	r0, r8
   d5dda:	f001 fc96 	bl	d770a <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d5dde:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d5de0:	2c00      	cmp	r4, #0
   d5de2:	dd15      	ble.n	d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d5de4:	f818 3000 	ldrb.w	r3, [r8, r0]
   d5de8:	b993      	cbnz	r3, d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d5dea:	2c01      	cmp	r4, #1
   d5dec:	d002      	beq.n	d5df4 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d5dee:	e00f      	b.n	d5e10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d5df0:	f8df 8044 	ldr.w	r8, [pc, #68]	; d5e38 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d5df4:	4630      	mov	r0, r6
   d5df6:	f7ff fb2f 	bl	d5458 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   d5dfa:	4642      	mov	r2, r8
   d5dfc:	4639      	mov	r1, r7
   d5dfe:	1d28      	adds	r0, r5, #4
   d5e00:	f7ff ff4e 	bl	d5ca0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d5e04:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5e08:	f7fe fc2a 	bl	d4660 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5e0c:	2000      	movs	r0, #0
   d5e0e:	e005      	b.n	d5e1c <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d5e10:	4808      	ldr	r0, [pc, #32]	; (d5e34 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d5e12:	e003      	b.n	d5e1c <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d5e14:	2064      	movs	r0, #100	; 0x64
   d5e16:	f7fe fbc3 	bl	d45a0 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d5e1a:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d5e1c:	b00a      	add	sp, #40	; 0x28
   d5e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e22:	bf00      	nop
   d5e24:	000d8214 	.word	0x000d8214
   d5e28:	fffffefc 	.word	0xfffffefc
   d5e2c:	000d81c4 	.word	0x000d81c4
   d5e30:	000d81bd 	.word	0x000d81bd
   d5e34:	fffffee8 	.word	0xfffffee8
   d5e38:	000d807c 	.word	0x000d807c

000d5e3c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5e3c:	b510      	push	{r4, lr}
   d5e3e:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5e40:	f3bf 8f5f 	dmb	sy
   d5e44:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   d5e48:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   d5e4c:	b91b      	cbnz	r3, d5e56 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   d5e4e:	4620      	mov	r0, r4
   d5e50:	f7ff ff6c 	bl	d5d2c <_ZN5spark11MeshPublish4pollEv>
   d5e54:	e7f4      	b.n	d5e40 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   d5e56:	bd10      	pop	{r4, pc}

000d5e58 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   d5e58:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e5a:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e5c:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e5e:	b144      	cbz	r4, d5e72 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e60:	4620      	mov	r0, r4
   d5e62:	f7ff fee3 	bl	d5c2c <_ZN6ThreadD1Ev>
   d5e66:	4620      	mov	r0, r4
   d5e68:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   d5e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e6e:	f000 ba67 	b.w	d6340 <_ZdlPvj>
   d5e72:	bd10      	pop	{r4, pc}

000d5e74 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   d5e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e78:	4605      	mov	r5, r0
   d5e7a:	b08a      	sub	sp, #40	; 0x28
   d5e7c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d5e80:	f7ff faea 	bl	d5458 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   d5e84:	682c      	ldr	r4, [r5, #0]
   d5e86:	2c00      	cmp	r4, #0
   d5e88:	d17b      	bne.n	d5f82 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   d5e8a:	204c      	movs	r0, #76	; 0x4c
   d5e8c:	f7fe f903 	bl	d4096 <_Znwj>
   d5e90:	4606      	mov	r6, r0
   d5e92:	2800      	cmp	r0, #0
   d5e94:	d073      	beq.n	d5f7e <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   d5e96:	f7ff f92d 	bl	d50f4 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d5e9a:	4622      	mov	r2, r4
   d5e9c:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5ea0:	4630      	mov	r0, r6
   d5ea2:	f7ff f957 	bl	d5154 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5ea6:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   d5ea8:	483a      	ldr	r0, [pc, #232]	; (d5f94 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5eaa:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5eae:	f7fe fb47 	bl	d4540 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5eb2:	6833      	ldr	r3, [r6, #0]
   d5eb4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5eb8:	6a1b      	ldr	r3, [r3, #32]
   d5eba:	f249 0169 	movw	r1, #36969	; 0x9069
   d5ebe:	4630      	mov	r0, r6
   d5ec0:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   d5ec2:	a804      	add	r0, sp, #16
   d5ec4:	f7ff fcae 	bl	d5824 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5ec8:	a804      	add	r0, sp, #16
   d5eca:	f7ff ff0f 	bl	d5cec <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5ece:	2800      	cmp	r0, #0
   d5ed0:	db4a      	blt.n	d5f68 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   d5ed2:	a904      	add	r1, sp, #16
   d5ed4:	4630      	mov	r0, r6
   d5ed6:	f7ff f9a9 	bl	d522c <_ZN3UDP13joinMulticastERK9IPAddress>
   d5eda:	2800      	cmp	r0, #0
   d5edc:	db44      	blt.n	d5f68 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5ede:	f3bf 8f5f 	dmb	sy
   d5ee2:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   d5ee6:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d5eea:	492b      	ldr	r1, [pc, #172]	; (d5f98 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d5eec:	2004      	movs	r0, #4
   d5eee:	f000 fa2b 	bl	d6348 <_ZnwjRKSt9nothrow_t>
   d5ef2:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   d5ef6:	4607      	mov	r7, r0
   d5ef8:	b348      	cbz	r0, d5f4e <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d5efa:	4927      	ldr	r1, [pc, #156]	; (d5f98 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   d5efc:	2014      	movs	r0, #20
   d5efe:	f000 fa23 	bl	d6348 <_ZnwjRKSt9nothrow_t>
   d5f02:	b128      	cbz	r0, d5f10 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d5f04:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5f06:	6004      	str	r4, [r0, #0]
   d5f08:	6044      	str	r4, [r0, #4]
   d5f0a:	6084      	str	r4, [r0, #8]
   d5f0c:	60c4      	str	r4, [r0, #12]
   d5f0e:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f10:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d5f12:	b1b0      	cbz	r0, d5f42 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   d5f14:	4b21      	ldr	r3, [pc, #132]	; (d5f9c <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   d5f16:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f18:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5f1a:	4921      	ldr	r1, [pc, #132]	; (d5fa0 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d5f1c:	60dd      	str	r5, [r3, #12]
   d5f1e:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5f20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d5f24:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5f28:	2203      	movs	r2, #3
   d5f2a:	4b1e      	ldr	r3, [pc, #120]	; (d5fa4 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   d5f2c:	3004      	adds	r0, #4
   d5f2e:	f7fe fb5f 	bl	d45f0 <os_thread_create>
   d5f32:	b930      	cbnz	r0, d5f42 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   d5f34:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   d5f36:	7c1b      	ldrb	r3, [r3, #16]
   d5f38:	b94b      	cbnz	r3, d5f4e <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   d5f3a:	2001      	movs	r0, #1
   d5f3c:	f7fe fb30 	bl	d45a0 <HAL_Delay_Milliseconds>
   d5f40:	e7f8      	b.n	d5f34 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f42:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f44:	2300      	movs	r3, #0
   d5f46:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5f48:	b108      	cbz	r0, d5f4e <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   d5f4a:	f7ff fe54 	bl	d5bf6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   d5f4e:	4639      	mov	r1, r7
   d5f50:	4640      	mov	r0, r8
   d5f52:	f7ff ff81 	bl	d5e58 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   d5f56:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   d5f5a:	b13b      	cbz	r3, d5f6c <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f5c:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f5e:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5f60:	b130      	cbz	r0, d5f70 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   d5f62:	f7ff fe5e 	bl	d5c22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5f66:	e00c      	b.n	d5f82 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   d5f68:	4604      	mov	r4, r0
   d5f6a:	e003      	b.n	d5f74 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   d5f6c:	4c0e      	ldr	r4, [pc, #56]	; (d5fa8 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d5f6e:	e001      	b.n	d5f74 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   d5f70:	4604      	mov	r4, r0
   d5f72:	e007      	b.n	d5f84 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5f74:	b136      	cbz	r6, d5f84 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   d5f76:	4630      	mov	r0, r6
   d5f78:	f7ff fe53 	bl	d5c22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5f7c:	e002      	b.n	d5f84 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5f7e:	4c0a      	ldr	r4, [pc, #40]	; (d5fa8 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   d5f80:	e000      	b.n	d5f84 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   d5f82:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5f84:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5f88:	f7fe fb6a 	bl	d4660 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	b00a      	add	sp, #40	; 0x28
   d5f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f94:	000d81d4 	.word	0x000d81d4
   d5f98:	000d8214 	.word	0x000d8214
   d5f9c:	000d5e3d 	.word	0x000d5e3d
   d5fa0:	000d81d8 	.word	0x000d81d8
   d5fa4:	000d5b61 	.word	0x000d5b61
   d5fa8:	fffffefc 	.word	0xfffffefc

000d5fac <_ZN5spark11MeshPublish7publishEPKcS2_>:
    exit_ = false;

    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d5fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5fb0:	4605      	mov	r5, r0
   d5fb2:	b08c      	sub	sp, #48	; 0x30
   d5fb4:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d5fb6:	460f      	mov	r7, r1
   d5fb8:	b109      	cbz	r1, d5fbe <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d5fba:	780b      	ldrb	r3, [r1, #0]
   d5fbc:	b90b      	cbnz	r3, d5fc2 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d5fbe:	4c35      	ldr	r4, [pc, #212]	; (d6094 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d5fc0:	e064      	b.n	d608c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d5fc2:	4608      	mov	r0, r1
   d5fc4:	f001 fb84 	bl	d76d0 <strlen>
   d5fc8:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5fca:	2e00      	cmp	r6, #0
   d5fcc:	d05c      	beq.n	d6088 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d5fce:	4630      	mov	r0, r6
   d5fd0:	f001 fb7e 	bl	d76d0 <strlen>
   d5fd4:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5fd6:	f108 0302 	add.w	r3, r8, #2
   d5fda:	4423      	add	r3, r4
   d5fdc:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d5fe0:	d84f      	bhi.n	d6082 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d5fe2:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d5fe6:	f7ff fa37 	bl	d5458 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   d5fea:	4628      	mov	r0, r5
   d5fec:	f7ff ff42 	bl	d5e74 <_ZN5spark11MeshPublish13initializeUdpEv>
   d5ff0:	2800      	cmp	r0, #0
   d5ff2:	db40      	blt.n	d6076 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5ff4:	4668      	mov	r0, sp
   d5ff6:	f7ff fc15 	bl	d5824 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5ffa:	4668      	mov	r0, sp
   d5ffc:	f7ff fe76 	bl	d5cec <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6000:	2800      	cmp	r0, #0
   d6002:	db38      	blt.n	d6076 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6004:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp_->beginPacket(mcastAddr, PORT));
   d6008:	f8da 3000 	ldr.w	r3, [sl]
   d600c:	f10d 0c04 	add.w	ip, sp, #4
   d6010:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d6014:	4b20      	ldr	r3, [pc, #128]	; (d6098 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d6016:	9306      	str	r3, [sp, #24]
   d6018:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d601c:	f10d 0e1c 	add.w	lr, sp, #28
   d6020:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6024:	f8dc 3000 	ldr.w	r3, [ip]
   d6028:	f88e 3000 	strb.w	r3, [lr]
   d602c:	f249 0269 	movw	r2, #36969	; 0x9069
   d6030:	a906      	add	r1, sp, #24
   d6032:	4650      	mov	r0, sl
   d6034:	47c8      	blx	r9
   d6036:	2800      	cmp	r0, #0
   d6038:	db1d      	blt.n	d6076 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d603a:	2300      	movs	r3, #0
   d603c:	6828      	ldr	r0, [r5, #0]
   d603e:	f88d 3018 	strb.w	r3, [sp, #24]
    udp_->write(&version, 1);
   d6042:	6803      	ldr	r3, [r0, #0]
   d6044:	2201      	movs	r2, #1
   d6046:	68db      	ldr	r3, [r3, #12]
   d6048:	a906      	add	r1, sp, #24
   d604a:	4798      	blx	r3
   d604c:	6828      	ldr	r0, [r5, #0]
    udp_->write((const uint8_t*)topic, topicLen);
   d604e:	6803      	ldr	r3, [r0, #0]
   d6050:	f108 0201 	add.w	r2, r8, #1
   d6054:	68db      	ldr	r3, [r3, #12]
   d6056:	4639      	mov	r1, r7
   d6058:	4798      	blx	r3
    if (dataLen > 0) {
   d605a:	b12c      	cbz	r4, d6068 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d605c:	6828      	ldr	r0, [r5, #0]
        udp_->write((const uint8_t*)data, dataLen);
   d605e:	6803      	ldr	r3, [r0, #0]
   d6060:	4622      	mov	r2, r4
   d6062:	68db      	ldr	r3, [r3, #12]
   d6064:	4631      	mov	r1, r6
   d6066:	4798      	blx	r3
   d6068:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp_->endPacket());
   d606a:	6803      	ldr	r3, [r0, #0]
   d606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d606e:	4798      	blx	r3
   d6070:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6074:	e000      	b.n	d6078 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6076:	4604      	mov	r4, r0
   d6078:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d607c:	f7fe faf0 	bl	d4660 <os_mutex_recursive_unlock>
   d6080:	e004      	b.n	d608c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6082:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6086:	e001      	b.n	d608c <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6088:	4634      	mov	r4, r6
   d608a:	e7a4      	b.n	d5fd6 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp_->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d608c:	4620      	mov	r0, r4
   d608e:	b00c      	add	sp, #48	; 0x30
   d6090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6094:	fffffef2 	.word	0xfffffef2
   d6098:	000d80e8 	.word	0x000d80e8

000d609c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d609c:	b538      	push	{r3, r4, r5, lr}
   d609e:	4c0e      	ldr	r4, [pc, #56]	; (d60d8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d60a0:	4b0e      	ldr	r3, [pc, #56]	; (d60dc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d60a2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d60a4:	2500      	movs	r5, #0
   d60a6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d60a8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d60ac:	6063      	str	r3, [r4, #4]
   d60ae:	60a5      	str	r5, [r4, #8]
   d60b0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d60b4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d60b8:	f7fe fac2 	bl	d4640 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d60bc:	4b08      	ldr	r3, [pc, #32]	; (d60e0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d60be:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d60c2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d60c6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d60c8:	4620      	mov	r0, r4
   d60ca:	4a06      	ldr	r2, [pc, #24]	; (d60e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d60cc:	4906      	ldr	r1, [pc, #24]	; (d60e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d60ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d60d2:	f000 b927 	b.w	d6324 <__aeabi_atexit>
   d60d6:	bf00      	nop
   d60d8:	2003e40c 	.word	0x2003e40c
   d60dc:	000d81e8 	.word	0x000d81e8
   d60e0:	000d8184 	.word	0x000d8184
   d60e4:	2003e26c 	.word	0x2003e26c
   d60e8:	000d5c69 	.word	0x000d5c69

000d60ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d60ec:	2300      	movs	r3, #0
   d60ee:	461a      	mov	r2, r3
   d60f0:	6840      	ldr	r0, [r0, #4]
   d60f2:	f7fe bc1b 	b.w	d492c <network_connect>

000d60f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d60f6:	2200      	movs	r2, #0
   d60f8:	2102      	movs	r1, #2
   d60fa:	6840      	ldr	r0, [r0, #4]
   d60fc:	f7fe bc26 	b.w	d494c <network_disconnect>

000d6100 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6100:	2200      	movs	r2, #0
   d6102:	4611      	mov	r1, r2
   d6104:	6840      	ldr	r0, [r0, #4]
   d6106:	f7fe bc19 	b.w	d493c <network_connecting>

000d610a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d610a:	2200      	movs	r2, #0
   d610c:	4611      	mov	r1, r2
   d610e:	6840      	ldr	r0, [r0, #4]
   d6110:	f7fe bc24 	b.w	d495c <network_ready>

000d6114 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6114:	2300      	movs	r3, #0
   d6116:	461a      	mov	r2, r3
   d6118:	4619      	mov	r1, r3
   d611a:	6840      	ldr	r0, [r0, #4]
   d611c:	f7fe bc26 	b.w	d496c <network_on>

000d6120 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6120:	2300      	movs	r3, #0
   d6122:	461a      	mov	r2, r3
   d6124:	4619      	mov	r1, r3
   d6126:	6840      	ldr	r0, [r0, #4]
   d6128:	f7fe bc28 	b.w	d497c <network_off>

000d612c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d612c:	2200      	movs	r2, #0
   d612e:	f081 0101 	eor.w	r1, r1, #1
   d6132:	6840      	ldr	r0, [r0, #4]
   d6134:	f7fe bc2a 	b.w	d498c <network_listen>

000d6138 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6138:	2200      	movs	r2, #0
   d613a:	6840      	ldr	r0, [r0, #4]
   d613c:	f7fe bc36 	b.w	d49ac <network_set_listen_timeout>

000d6140 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6140:	2200      	movs	r2, #0
   d6142:	4611      	mov	r1, r2
   d6144:	6840      	ldr	r0, [r0, #4]
   d6146:	f7fe bc39 	b.w	d49bc <network_get_listen_timeout>

000d614a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d614a:	2200      	movs	r2, #0
   d614c:	4611      	mov	r1, r2
   d614e:	6840      	ldr	r0, [r0, #4]
   d6150:	f7fe bc24 	b.w	d499c <network_listening>

000d6154 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6158:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d615a:	b095      	sub	sp, #84	; 0x54
   d615c:	4616      	mov	r6, r2
   d615e:	460d      	mov	r5, r1
   d6160:	4607      	mov	r7, r0
    IPAddress addr;
   d6162:	f7ff fb5f 	bl	d5824 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6166:	4621      	mov	r1, r4
   d6168:	2220      	movs	r2, #32
   d616a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d616c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d616e:	f000 fd59 	bl	d6c24 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6172:	2340      	movs	r3, #64	; 0x40
   d6174:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6176:	4621      	mov	r1, r4
   d6178:	466b      	mov	r3, sp
   d617a:	aa0c      	add	r2, sp, #48	; 0x30
   d617c:	4630      	mov	r0, r6
   d617e:	f7fe f9a7 	bl	d44d0 <netdb_getaddrinfo>
    if (!r) {
   d6182:	4604      	mov	r4, r0
   d6184:	2800      	cmp	r0, #0
   d6186:	d144      	bne.n	d6212 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6188:	4602      	mov	r2, r0
   d618a:	2101      	movs	r1, #1
   d618c:	6868      	ldr	r0, [r5, #4]
   d618e:	f7fe fbe5 	bl	d495c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6192:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6194:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6196:	4622      	mov	r2, r4
   d6198:	6868      	ldr	r0, [r5, #4]
   d619a:	f7fe fbdf 	bl	d495c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d619e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61a0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d61a2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61a4:	2e00      	cmp	r6, #0
   d61a6:	d034      	beq.n	d6212 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61a8:	2900      	cmp	r1, #0
   d61aa:	d132      	bne.n	d6212 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61ac:	6873      	ldr	r3, [r6, #4]
   d61ae:	2b02      	cmp	r3, #2
   d61b0:	d002      	beq.n	d61b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61b2:	2b0a      	cmp	r3, #10
   d61b4:	d009      	beq.n	d61ca <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61b6:	e02a      	b.n	d620e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d61b8:	f1b8 0f00 	cmp.w	r8, #0
   d61bc:	d027      	beq.n	d620e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d61be:	6971      	ldr	r1, [r6, #20]
   d61c0:	4638      	mov	r0, r7
   d61c2:	3104      	adds	r1, #4
   d61c4:	f7ff fb71 	bl	d58aa <_ZN9IPAddressaSEPKh>
   d61c8:	e020      	b.n	d620c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d61ca:	f1b9 0f00 	cmp.w	r9, #0
   d61ce:	d01e      	beq.n	d620e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d61d0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d61d2:	2211      	movs	r2, #17
   d61d4:	a801      	add	r0, sp, #4
   d61d6:	f000 fd25 	bl	d6c24 <memset>
                    a.v = 6;
   d61da:	2306      	movs	r3, #6
   d61dc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d61e0:	ad01      	add	r5, sp, #4
   d61e2:	f104 0308 	add.w	r3, r4, #8
   d61e6:	3418      	adds	r4, #24
   d61e8:	6818      	ldr	r0, [r3, #0]
   d61ea:	6859      	ldr	r1, [r3, #4]
   d61ec:	462a      	mov	r2, r5
   d61ee:	c203      	stmia	r2!, {r0, r1}
   d61f0:	3308      	adds	r3, #8
   d61f2:	42a3      	cmp	r3, r4
   d61f4:	4615      	mov	r5, r2
   d61f6:	d1f7      	bne.n	d61e8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d61f8:	a901      	add	r1, sp, #4
   d61fa:	a806      	add	r0, sp, #24
   d61fc:	ad07      	add	r5, sp, #28
   d61fe:	f7ff fb1f 	bl	d5840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6204:	1d3c      	adds	r4, r7, #4
   d6206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6208:	682b      	ldr	r3, [r5, #0]
   d620a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d620c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d620e:	69f6      	ldr	r6, [r6, #28]
   d6210:	e7c8      	b.n	d61a4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6212:	9800      	ldr	r0, [sp, #0]
   d6214:	f7fe f954 	bl	d44c0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6218:	4638      	mov	r0, r7
   d621a:	b015      	add	sp, #84	; 0x54
   d621c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6220 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6220:	4b02      	ldr	r3, [pc, #8]	; (d622c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6222:	4a03      	ldr	r2, [pc, #12]	; (d6230 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6224:	601a      	str	r2, [r3, #0]
   d6226:	2200      	movs	r2, #0
   d6228:	605a      	str	r2, [r3, #4]
   d622a:	4770      	bx	lr
   d622c:	2003e5e0 	.word	0x2003e5e0
   d6230:	000d81e8 	.word	0x000d81e8

000d6234 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6234:	b510      	push	{r4, lr}
   d6236:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6238:	480f      	ldr	r0, [pc, #60]	; (d6278 <pinAvailable+0x44>)
   d623a:	f7fe fca9 	bl	d4b90 <_ZN8SPIClass9isEnabledEv>
   d623e:	b128      	cbz	r0, d624c <pinAvailable+0x18>
   d6240:	f1a4 030b 	sub.w	r3, r4, #11
   d6244:	2b02      	cmp	r3, #2
   d6246:	d801      	bhi.n	d624c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6248:	2000      	movs	r0, #0
   d624a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d624c:	f000 f84a 	bl	d62e4 <_Z19__fetch_global_Wirev>
   d6250:	f7ff fc82 	bl	d5b58 <_ZN7TwoWire9isEnabledEv>
   d6254:	b108      	cbz	r0, d625a <pinAvailable+0x26>
   d6256:	2c01      	cmp	r4, #1
   d6258:	d9f6      	bls.n	d6248 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d625a:	f7ff fc19 	bl	d5a90 <_Z22__fetch_global_Serial1v>
   d625e:	f7ff fc13 	bl	d5a88 <_ZN11USARTSerial9isEnabledEv>
   d6262:	b118      	cbz	r0, d626c <pinAvailable+0x38>
   d6264:	f1a4 0309 	sub.w	r3, r4, #9
   d6268:	2b01      	cmp	r3, #1
   d626a:	d9ed      	bls.n	d6248 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d626c:	2c1e      	cmp	r4, #30
   d626e:	bf8c      	ite	hi
   d6270:	2000      	movhi	r0, #0
   d6272:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6274:	bd10      	pop	{r4, pc}
   d6276:	bf00      	nop
   d6278:	2003e5e8 	.word	0x2003e5e8

000d627c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d627c:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d627e:	b538      	push	{r3, r4, r5, lr}
   d6280:	4604      	mov	r4, r0
   d6282:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6284:	d80a      	bhi.n	d629c <pinMode+0x20>
   d6286:	29ff      	cmp	r1, #255	; 0xff
   d6288:	d008      	beq.n	d629c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d628a:	f7ff ffd3 	bl	d6234 <pinAvailable>
   d628e:	b128      	cbz	r0, d629c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6290:	4629      	mov	r1, r5
   d6292:	4620      	mov	r0, r4
}
   d6294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6298:	f7fe b92a 	b.w	d44f0 <HAL_Pin_Mode>
   d629c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d62a0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d62a0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d62a2:	4c0c      	ldr	r4, [pc, #48]	; (d62d4 <_GLOBAL__sub_I_SPI+0x34>)
   d62a4:	4e0c      	ldr	r6, [pc, #48]	; (d62d8 <_GLOBAL__sub_I_SPI+0x38>)
   d62a6:	4d0d      	ldr	r5, [pc, #52]	; (d62dc <_GLOBAL__sub_I_SPI+0x3c>)
   d62a8:	2100      	movs	r1, #0
   d62aa:	4620      	mov	r0, r4
   d62ac:	f7fe fc5c 	bl	d4b68 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d62b0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d62b2:	4c0b      	ldr	r4, [pc, #44]	; (d62e0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d62b4:	4632      	mov	r2, r6
   d62b6:	4629      	mov	r1, r5
   d62b8:	f000 f834 	bl	d6324 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d62bc:	2101      	movs	r1, #1
   d62be:	4620      	mov	r0, r4
   d62c0:	f7fe fc52 	bl	d4b68 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d62c4:	4632      	mov	r2, r6
   d62c6:	4629      	mov	r1, r5
   d62c8:	4620      	mov	r0, r4
   d62ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d62ce:	f000 b829 	b.w	d6324 <__aeabi_atexit>
   d62d2:	bf00      	nop
   d62d4:	2003e5e8 	.word	0x2003e5e8
   d62d8:	2003e26c 	.word	0x2003e26c
   d62dc:	000d4b59 	.word	0x000d4b59
   d62e0:	2003e5f8 	.word	0x2003e5f8

000d62e4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d62e4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d62e6:	4d0b      	ldr	r5, [pc, #44]	; (d6314 <_Z19__fetch_global_Wirev+0x30>)
   d62e8:	6829      	ldr	r1, [r5, #0]
   d62ea:	f011 0401 	ands.w	r4, r1, #1
   d62ee:	d10f      	bne.n	d6310 <_Z19__fetch_global_Wirev+0x2c>
   d62f0:	4628      	mov	r0, r5
   d62f2:	f7fd fed8 	bl	d40a6 <__cxa_guard_acquire>
   d62f6:	b158      	cbz	r0, d6310 <_Z19__fetch_global_Wirev+0x2c>
   d62f8:	4621      	mov	r1, r4
   d62fa:	4807      	ldr	r0, [pc, #28]	; (d6318 <_Z19__fetch_global_Wirev+0x34>)
   d62fc:	f7ff fc1a 	bl	d5b34 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6300:	4628      	mov	r0, r5
   d6302:	f7fd fed5 	bl	d40b0 <__cxa_guard_release>
   d6306:	4a05      	ldr	r2, [pc, #20]	; (d631c <_Z19__fetch_global_Wirev+0x38>)
   d6308:	4905      	ldr	r1, [pc, #20]	; (d6320 <_Z19__fetch_global_Wirev+0x3c>)
   d630a:	4803      	ldr	r0, [pc, #12]	; (d6318 <_Z19__fetch_global_Wirev+0x34>)
   d630c:	f000 f80a 	bl	d6324 <__aeabi_atexit>
	return wire;
}
   d6310:	4801      	ldr	r0, [pc, #4]	; (d6318 <_Z19__fetch_global_Wirev+0x34>)
   d6312:	bd38      	pop	{r3, r4, r5, pc}
   d6314:	2003e60c 	.word	0x2003e60c
   d6318:	2003e610 	.word	0x2003e610
   d631c:	2003e26c 	.word	0x2003e26c
   d6320:	000d5add 	.word	0x000d5add

000d6324 <__aeabi_atexit>:
   d6324:	460b      	mov	r3, r1
   d6326:	4601      	mov	r1, r0
   d6328:	4618      	mov	r0, r3
   d632a:	f000 bb5b 	b.w	d69e4 <__cxa_atexit>
	...

000d6330 <_ZSt15get_new_handlerv>:
   d6330:	4b02      	ldr	r3, [pc, #8]	; (d633c <_ZSt15get_new_handlerv+0xc>)
   d6332:	6818      	ldr	r0, [r3, #0]
   d6334:	f3bf 8f5f 	dmb	sy
   d6338:	4770      	bx	lr
   d633a:	bf00      	nop
   d633c:	2003e624 	.word	0x2003e624

000d6340 <_ZdlPvj>:
   d6340:	f7fd bead 	b.w	d409e <_ZdlPv>

000d6344 <_ZnajRKSt9nothrow_t>:
   d6344:	f000 b800 	b.w	d6348 <_ZnwjRKSt9nothrow_t>

000d6348 <_ZnwjRKSt9nothrow_t>:
   d6348:	b510      	push	{r4, lr}
   d634a:	2800      	cmp	r0, #0
   d634c:	bf14      	ite	ne
   d634e:	4604      	movne	r4, r0
   d6350:	2401      	moveq	r4, #1
   d6352:	4620      	mov	r0, r4
   d6354:	f7fe fb6a 	bl	d4a2c <malloc>
   d6358:	b920      	cbnz	r0, d6364 <_ZnwjRKSt9nothrow_t+0x1c>
   d635a:	f7ff ffe9 	bl	d6330 <_ZSt15get_new_handlerv>
   d635e:	b108      	cbz	r0, d6364 <_ZnwjRKSt9nothrow_t+0x1c>
   d6360:	4780      	blx	r0
   d6362:	e7f6      	b.n	d6352 <_ZnwjRKSt9nothrow_t+0xa>
   d6364:	bd10      	pop	{r4, pc}

000d6366 <_ZSt25__throw_bad_function_callv>:
   d6366:	b508      	push	{r3, lr}
   d6368:	f7fe fba8 	bl	d4abc <abort>

000d636c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d636c:	4b18      	ldr	r3, [pc, #96]	; (d63d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d636e:	681a      	ldr	r2, [r3, #0]
   d6370:	07d1      	lsls	r1, r2, #31
   d6372:	bf5c      	itt	pl
   d6374:	2201      	movpl	r2, #1
   d6376:	601a      	strpl	r2, [r3, #0]
   d6378:	4b16      	ldr	r3, [pc, #88]	; (d63d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d637a:	681a      	ldr	r2, [r3, #0]
   d637c:	07d2      	lsls	r2, r2, #31
   d637e:	bf5c      	itt	pl
   d6380:	2201      	movpl	r2, #1
   d6382:	601a      	strpl	r2, [r3, #0]
   d6384:	4b14      	ldr	r3, [pc, #80]	; (d63d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6386:	681a      	ldr	r2, [r3, #0]
   d6388:	07d0      	lsls	r0, r2, #31
   d638a:	bf5c      	itt	pl
   d638c:	2201      	movpl	r2, #1
   d638e:	601a      	strpl	r2, [r3, #0]
   d6390:	4b12      	ldr	r3, [pc, #72]	; (d63dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6392:	681a      	ldr	r2, [r3, #0]
   d6394:	07d1      	lsls	r1, r2, #31
   d6396:	bf5c      	itt	pl
   d6398:	2201      	movpl	r2, #1
   d639a:	601a      	strpl	r2, [r3, #0]
   d639c:	4b10      	ldr	r3, [pc, #64]	; (d63e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d639e:	681a      	ldr	r2, [r3, #0]
   d63a0:	07d2      	lsls	r2, r2, #31
   d63a2:	bf5c      	itt	pl
   d63a4:	2201      	movpl	r2, #1
   d63a6:	601a      	strpl	r2, [r3, #0]
   d63a8:	4b0e      	ldr	r3, [pc, #56]	; (d63e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d63aa:	681a      	ldr	r2, [r3, #0]
   d63ac:	07d0      	lsls	r0, r2, #31
   d63ae:	bf5c      	itt	pl
   d63b0:	2201      	movpl	r2, #1
   d63b2:	601a      	strpl	r2, [r3, #0]
   d63b4:	4b0c      	ldr	r3, [pc, #48]	; (d63e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d63b6:	681a      	ldr	r2, [r3, #0]
   d63b8:	07d1      	lsls	r1, r2, #31
   d63ba:	bf5c      	itt	pl
   d63bc:	2201      	movpl	r2, #1
   d63be:	601a      	strpl	r2, [r3, #0]
   d63c0:	4b0a      	ldr	r3, [pc, #40]	; (d63ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d63c2:	681a      	ldr	r2, [r3, #0]
   d63c4:	07d2      	lsls	r2, r2, #31
   d63c6:	bf5c      	itt	pl
   d63c8:	2201      	movpl	r2, #1
   d63ca:	601a      	strpl	r2, [r3, #0]
   d63cc:	4770      	bx	lr
   d63ce:	bf00      	nop
   d63d0:	2003e644 	.word	0x2003e644
   d63d4:	2003e640 	.word	0x2003e640
   d63d8:	2003e63c 	.word	0x2003e63c
   d63dc:	2003e638 	.word	0x2003e638
   d63e0:	2003e634 	.word	0x2003e634
   d63e4:	2003e630 	.word	0x2003e630
   d63e8:	2003e62c 	.word	0x2003e62c
   d63ec:	2003e628 	.word	0x2003e628

000d63f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d63f0:	4b24      	ldr	r3, [pc, #144]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d63f2:	681a      	ldr	r2, [r3, #0]
   d63f4:	07d0      	lsls	r0, r2, #31
   d63f6:	bf5c      	itt	pl
   d63f8:	2201      	movpl	r2, #1
   d63fa:	601a      	strpl	r2, [r3, #0]
   d63fc:	4b22      	ldr	r3, [pc, #136]	; (d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d63fe:	681a      	ldr	r2, [r3, #0]
   d6400:	07d1      	lsls	r1, r2, #31
   d6402:	bf5c      	itt	pl
   d6404:	2201      	movpl	r2, #1
   d6406:	601a      	strpl	r2, [r3, #0]
   d6408:	4b20      	ldr	r3, [pc, #128]	; (d648c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d640a:	681a      	ldr	r2, [r3, #0]
   d640c:	07d2      	lsls	r2, r2, #31
   d640e:	bf5c      	itt	pl
   d6410:	2201      	movpl	r2, #1
   d6412:	601a      	strpl	r2, [r3, #0]
   d6414:	4b1e      	ldr	r3, [pc, #120]	; (d6490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6416:	681a      	ldr	r2, [r3, #0]
   d6418:	07d0      	lsls	r0, r2, #31
   d641a:	bf5c      	itt	pl
   d641c:	2201      	movpl	r2, #1
   d641e:	601a      	strpl	r2, [r3, #0]
   d6420:	4b1c      	ldr	r3, [pc, #112]	; (d6494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6422:	681a      	ldr	r2, [r3, #0]
   d6424:	07d1      	lsls	r1, r2, #31
   d6426:	bf5c      	itt	pl
   d6428:	2201      	movpl	r2, #1
   d642a:	601a      	strpl	r2, [r3, #0]
   d642c:	4b1a      	ldr	r3, [pc, #104]	; (d6498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d642e:	681a      	ldr	r2, [r3, #0]
   d6430:	07d2      	lsls	r2, r2, #31
   d6432:	bf5c      	itt	pl
   d6434:	2201      	movpl	r2, #1
   d6436:	601a      	strpl	r2, [r3, #0]
   d6438:	4b18      	ldr	r3, [pc, #96]	; (d649c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d643a:	681a      	ldr	r2, [r3, #0]
   d643c:	07d0      	lsls	r0, r2, #31
   d643e:	bf5c      	itt	pl
   d6440:	2201      	movpl	r2, #1
   d6442:	601a      	strpl	r2, [r3, #0]
   d6444:	4b16      	ldr	r3, [pc, #88]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6446:	681a      	ldr	r2, [r3, #0]
   d6448:	07d1      	lsls	r1, r2, #31
   d644a:	bf5c      	itt	pl
   d644c:	2201      	movpl	r2, #1
   d644e:	601a      	strpl	r2, [r3, #0]
   d6450:	4b14      	ldr	r3, [pc, #80]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6452:	681a      	ldr	r2, [r3, #0]
   d6454:	07d2      	lsls	r2, r2, #31
   d6456:	bf5c      	itt	pl
   d6458:	2201      	movpl	r2, #1
   d645a:	601a      	strpl	r2, [r3, #0]
   d645c:	4b12      	ldr	r3, [pc, #72]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d645e:	681a      	ldr	r2, [r3, #0]
   d6460:	07d0      	lsls	r0, r2, #31
   d6462:	bf5c      	itt	pl
   d6464:	2201      	movpl	r2, #1
   d6466:	601a      	strpl	r2, [r3, #0]
   d6468:	4b10      	ldr	r3, [pc, #64]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d646a:	681a      	ldr	r2, [r3, #0]
   d646c:	07d1      	lsls	r1, r2, #31
   d646e:	bf5c      	itt	pl
   d6470:	2201      	movpl	r2, #1
   d6472:	601a      	strpl	r2, [r3, #0]
   d6474:	4b0e      	ldr	r3, [pc, #56]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6476:	681a      	ldr	r2, [r3, #0]
   d6478:	07d2      	lsls	r2, r2, #31
   d647a:	bf5c      	itt	pl
   d647c:	2201      	movpl	r2, #1
   d647e:	601a      	strpl	r2, [r3, #0]
   d6480:	4770      	bx	lr
   d6482:	bf00      	nop
   d6484:	2003e674 	.word	0x2003e674
   d6488:	2003e670 	.word	0x2003e670
   d648c:	2003e66c 	.word	0x2003e66c
   d6490:	2003e668 	.word	0x2003e668
   d6494:	2003e664 	.word	0x2003e664
   d6498:	2003e660 	.word	0x2003e660
   d649c:	2003e65c 	.word	0x2003e65c
   d64a0:	2003e658 	.word	0x2003e658
   d64a4:	2003e654 	.word	0x2003e654
   d64a8:	2003e650 	.word	0x2003e650
   d64ac:	2003e64c 	.word	0x2003e64c
   d64b0:	2003e648 	.word	0x2003e648

000d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d64b4:	4b24      	ldr	r3, [pc, #144]	; (d6548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d0      	lsls	r0, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b22      	ldr	r3, [pc, #136]	; (d654c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d1      	lsls	r1, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b20      	ldr	r3, [pc, #128]	; (d6550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d2      	lsls	r2, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b1e      	ldr	r3, [pc, #120]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d0      	lsls	r0, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b1c      	ldr	r3, [pc, #112]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d1      	lsls	r1, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b1a      	ldr	r3, [pc, #104]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d2      	lsls	r2, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b18      	ldr	r3, [pc, #96]	; (d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d0      	lsls	r0, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b16      	ldr	r3, [pc, #88]	; (d6564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d1      	lsls	r1, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b14      	ldr	r3, [pc, #80]	; (d6568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d2      	lsls	r2, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4b12      	ldr	r3, [pc, #72]	; (d656c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d0      	lsls	r0, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b10      	ldr	r3, [pc, #64]	; (d6570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d1      	lsls	r1, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4b0e      	ldr	r3, [pc, #56]	; (d6574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d653a:	681a      	ldr	r2, [r3, #0]
   d653c:	07d2      	lsls	r2, r2, #31
   d653e:	bf5c      	itt	pl
   d6540:	2201      	movpl	r2, #1
   d6542:	601a      	strpl	r2, [r3, #0]
   d6544:	4770      	bx	lr
   d6546:	bf00      	nop
   d6548:	2003e6a4 	.word	0x2003e6a4
   d654c:	2003e6a0 	.word	0x2003e6a0
   d6550:	2003e69c 	.word	0x2003e69c
   d6554:	2003e698 	.word	0x2003e698
   d6558:	2003e694 	.word	0x2003e694
   d655c:	2003e690 	.word	0x2003e690
   d6560:	2003e68c 	.word	0x2003e68c
   d6564:	2003e688 	.word	0x2003e688
   d6568:	2003e684 	.word	0x2003e684
   d656c:	2003e680 	.word	0x2003e680
   d6570:	2003e67c 	.word	0x2003e67c
   d6574:	2003e678 	.word	0x2003e678

000d6578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6578:	4b18      	ldr	r3, [pc, #96]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d657a:	681a      	ldr	r2, [r3, #0]
   d657c:	07d1      	lsls	r1, r2, #31
   d657e:	bf5c      	itt	pl
   d6580:	2201      	movpl	r2, #1
   d6582:	601a      	strpl	r2, [r3, #0]
   d6584:	4b16      	ldr	r3, [pc, #88]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d2      	lsls	r2, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b14      	ldr	r3, [pc, #80]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d0      	lsls	r0, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b12      	ldr	r3, [pc, #72]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d1      	lsls	r1, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b10      	ldr	r3, [pc, #64]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d2      	lsls	r2, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b0e      	ldr	r3, [pc, #56]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d0      	lsls	r0, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b0c      	ldr	r3, [pc, #48]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d1      	lsls	r1, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4b0a      	ldr	r3, [pc, #40]	; (d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d65ce:	681a      	ldr	r2, [r3, #0]
   d65d0:	07d2      	lsls	r2, r2, #31
   d65d2:	bf5c      	itt	pl
   d65d4:	2201      	movpl	r2, #1
   d65d6:	601a      	strpl	r2, [r3, #0]
   d65d8:	4770      	bx	lr
   d65da:	bf00      	nop
   d65dc:	2003e6c4 	.word	0x2003e6c4
   d65e0:	2003e6c0 	.word	0x2003e6c0
   d65e4:	2003e6bc 	.word	0x2003e6bc
   d65e8:	2003e6b8 	.word	0x2003e6b8
   d65ec:	2003e6b4 	.word	0x2003e6b4
   d65f0:	2003e6b0 	.word	0x2003e6b0
   d65f4:	2003e6ac 	.word	0x2003e6ac
   d65f8:	2003e6a8 	.word	0x2003e6a8

000d65fc <__aeabi_drsub>:
   d65fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6600:	e002      	b.n	d6608 <__adddf3>
   d6602:	bf00      	nop

000d6604 <__aeabi_dsub>:
   d6604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6608 <__adddf3>:
   d6608:	b530      	push	{r4, r5, lr}
   d660a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d660e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6612:	ea94 0f05 	teq	r4, r5
   d6616:	bf08      	it	eq
   d6618:	ea90 0f02 	teqeq	r0, r2
   d661c:	bf1f      	itttt	ne
   d661e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6622:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6626:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d662a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d662e:	f000 80e2 	beq.w	d67f6 <__adddf3+0x1ee>
   d6632:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6636:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d663a:	bfb8      	it	lt
   d663c:	426d      	neglt	r5, r5
   d663e:	dd0c      	ble.n	d665a <__adddf3+0x52>
   d6640:	442c      	add	r4, r5
   d6642:	ea80 0202 	eor.w	r2, r0, r2
   d6646:	ea81 0303 	eor.w	r3, r1, r3
   d664a:	ea82 0000 	eor.w	r0, r2, r0
   d664e:	ea83 0101 	eor.w	r1, r3, r1
   d6652:	ea80 0202 	eor.w	r2, r0, r2
   d6656:	ea81 0303 	eor.w	r3, r1, r3
   d665a:	2d36      	cmp	r5, #54	; 0x36
   d665c:	bf88      	it	hi
   d665e:	bd30      	pophi	{r4, r5, pc}
   d6660:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6664:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6668:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d666c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6670:	d002      	beq.n	d6678 <__adddf3+0x70>
   d6672:	4240      	negs	r0, r0
   d6674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6678:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d667c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6680:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6684:	d002      	beq.n	d668c <__adddf3+0x84>
   d6686:	4252      	negs	r2, r2
   d6688:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d668c:	ea94 0f05 	teq	r4, r5
   d6690:	f000 80a7 	beq.w	d67e2 <__adddf3+0x1da>
   d6694:	f1a4 0401 	sub.w	r4, r4, #1
   d6698:	f1d5 0e20 	rsbs	lr, r5, #32
   d669c:	db0d      	blt.n	d66ba <__adddf3+0xb2>
   d669e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d66a2:	fa22 f205 	lsr.w	r2, r2, r5
   d66a6:	1880      	adds	r0, r0, r2
   d66a8:	f141 0100 	adc.w	r1, r1, #0
   d66ac:	fa03 f20e 	lsl.w	r2, r3, lr
   d66b0:	1880      	adds	r0, r0, r2
   d66b2:	fa43 f305 	asr.w	r3, r3, r5
   d66b6:	4159      	adcs	r1, r3
   d66b8:	e00e      	b.n	d66d8 <__adddf3+0xd0>
   d66ba:	f1a5 0520 	sub.w	r5, r5, #32
   d66be:	f10e 0e20 	add.w	lr, lr, #32
   d66c2:	2a01      	cmp	r2, #1
   d66c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d66c8:	bf28      	it	cs
   d66ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   d66ce:	fa43 f305 	asr.w	r3, r3, r5
   d66d2:	18c0      	adds	r0, r0, r3
   d66d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d66d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d66dc:	d507      	bpl.n	d66ee <__adddf3+0xe6>
   d66de:	f04f 0e00 	mov.w	lr, #0
   d66e2:	f1dc 0c00 	rsbs	ip, ip, #0
   d66e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d66ea:	eb6e 0101 	sbc.w	r1, lr, r1
   d66ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d66f2:	d31b      	bcc.n	d672c <__adddf3+0x124>
   d66f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d66f8:	d30c      	bcc.n	d6714 <__adddf3+0x10c>
   d66fa:	0849      	lsrs	r1, r1, #1
   d66fc:	ea5f 0030 	movs.w	r0, r0, rrx
   d6700:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6704:	f104 0401 	add.w	r4, r4, #1
   d6708:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d670c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6710:	f080 809a 	bcs.w	d6848 <__adddf3+0x240>
   d6714:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6718:	bf08      	it	eq
   d671a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d671e:	f150 0000 	adcs.w	r0, r0, #0
   d6722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6726:	ea41 0105 	orr.w	r1, r1, r5
   d672a:	bd30      	pop	{r4, r5, pc}
   d672c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6730:	4140      	adcs	r0, r0
   d6732:	eb41 0101 	adc.w	r1, r1, r1
   d6736:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d673a:	f1a4 0401 	sub.w	r4, r4, #1
   d673e:	d1e9      	bne.n	d6714 <__adddf3+0x10c>
   d6740:	f091 0f00 	teq	r1, #0
   d6744:	bf04      	itt	eq
   d6746:	4601      	moveq	r1, r0
   d6748:	2000      	moveq	r0, #0
   d674a:	fab1 f381 	clz	r3, r1
   d674e:	bf08      	it	eq
   d6750:	3320      	addeq	r3, #32
   d6752:	f1a3 030b 	sub.w	r3, r3, #11
   d6756:	f1b3 0220 	subs.w	r2, r3, #32
   d675a:	da0c      	bge.n	d6776 <__adddf3+0x16e>
   d675c:	320c      	adds	r2, #12
   d675e:	dd08      	ble.n	d6772 <__adddf3+0x16a>
   d6760:	f102 0c14 	add.w	ip, r2, #20
   d6764:	f1c2 020c 	rsb	r2, r2, #12
   d6768:	fa01 f00c 	lsl.w	r0, r1, ip
   d676c:	fa21 f102 	lsr.w	r1, r1, r2
   d6770:	e00c      	b.n	d678c <__adddf3+0x184>
   d6772:	f102 0214 	add.w	r2, r2, #20
   d6776:	bfd8      	it	le
   d6778:	f1c2 0c20 	rsble	ip, r2, #32
   d677c:	fa01 f102 	lsl.w	r1, r1, r2
   d6780:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6784:	bfdc      	itt	le
   d6786:	ea41 010c 	orrle.w	r1, r1, ip
   d678a:	4090      	lslle	r0, r2
   d678c:	1ae4      	subs	r4, r4, r3
   d678e:	bfa2      	ittt	ge
   d6790:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6794:	4329      	orrge	r1, r5
   d6796:	bd30      	popge	{r4, r5, pc}
   d6798:	ea6f 0404 	mvn.w	r4, r4
   d679c:	3c1f      	subs	r4, #31
   d679e:	da1c      	bge.n	d67da <__adddf3+0x1d2>
   d67a0:	340c      	adds	r4, #12
   d67a2:	dc0e      	bgt.n	d67c2 <__adddf3+0x1ba>
   d67a4:	f104 0414 	add.w	r4, r4, #20
   d67a8:	f1c4 0220 	rsb	r2, r4, #32
   d67ac:	fa20 f004 	lsr.w	r0, r0, r4
   d67b0:	fa01 f302 	lsl.w	r3, r1, r2
   d67b4:	ea40 0003 	orr.w	r0, r0, r3
   d67b8:	fa21 f304 	lsr.w	r3, r1, r4
   d67bc:	ea45 0103 	orr.w	r1, r5, r3
   d67c0:	bd30      	pop	{r4, r5, pc}
   d67c2:	f1c4 040c 	rsb	r4, r4, #12
   d67c6:	f1c4 0220 	rsb	r2, r4, #32
   d67ca:	fa20 f002 	lsr.w	r0, r0, r2
   d67ce:	fa01 f304 	lsl.w	r3, r1, r4
   d67d2:	ea40 0003 	orr.w	r0, r0, r3
   d67d6:	4629      	mov	r1, r5
   d67d8:	bd30      	pop	{r4, r5, pc}
   d67da:	fa21 f004 	lsr.w	r0, r1, r4
   d67de:	4629      	mov	r1, r5
   d67e0:	bd30      	pop	{r4, r5, pc}
   d67e2:	f094 0f00 	teq	r4, #0
   d67e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d67ea:	bf06      	itte	eq
   d67ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d67f0:	3401      	addeq	r4, #1
   d67f2:	3d01      	subne	r5, #1
   d67f4:	e74e      	b.n	d6694 <__adddf3+0x8c>
   d67f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d67fa:	bf18      	it	ne
   d67fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6800:	d029      	beq.n	d6856 <__adddf3+0x24e>
   d6802:	ea94 0f05 	teq	r4, r5
   d6806:	bf08      	it	eq
   d6808:	ea90 0f02 	teqeq	r0, r2
   d680c:	d005      	beq.n	d681a <__adddf3+0x212>
   d680e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6812:	bf04      	itt	eq
   d6814:	4619      	moveq	r1, r3
   d6816:	4610      	moveq	r0, r2
   d6818:	bd30      	pop	{r4, r5, pc}
   d681a:	ea91 0f03 	teq	r1, r3
   d681e:	bf1e      	ittt	ne
   d6820:	2100      	movne	r1, #0
   d6822:	2000      	movne	r0, #0
   d6824:	bd30      	popne	{r4, r5, pc}
   d6826:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d682a:	d105      	bne.n	d6838 <__adddf3+0x230>
   d682c:	0040      	lsls	r0, r0, #1
   d682e:	4149      	adcs	r1, r1
   d6830:	bf28      	it	cs
   d6832:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6836:	bd30      	pop	{r4, r5, pc}
   d6838:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d683c:	bf3c      	itt	cc
   d683e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6842:	bd30      	popcc	{r4, r5, pc}
   d6844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6848:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d684c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6850:	f04f 0000 	mov.w	r0, #0
   d6854:	bd30      	pop	{r4, r5, pc}
   d6856:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d685a:	bf1a      	itte	ne
   d685c:	4619      	movne	r1, r3
   d685e:	4610      	movne	r0, r2
   d6860:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6864:	bf1c      	itt	ne
   d6866:	460b      	movne	r3, r1
   d6868:	4602      	movne	r2, r0
   d686a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d686e:	bf06      	itte	eq
   d6870:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6874:	ea91 0f03 	teqeq	r1, r3
   d6878:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d687c:	bd30      	pop	{r4, r5, pc}
   d687e:	bf00      	nop

000d6880 <__aeabi_ui2d>:
   d6880:	f090 0f00 	teq	r0, #0
   d6884:	bf04      	itt	eq
   d6886:	2100      	moveq	r1, #0
   d6888:	4770      	bxeq	lr
   d688a:	b530      	push	{r4, r5, lr}
   d688c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6890:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6894:	f04f 0500 	mov.w	r5, #0
   d6898:	f04f 0100 	mov.w	r1, #0
   d689c:	e750      	b.n	d6740 <__adddf3+0x138>
   d689e:	bf00      	nop

000d68a0 <__aeabi_i2d>:
   d68a0:	f090 0f00 	teq	r0, #0
   d68a4:	bf04      	itt	eq
   d68a6:	2100      	moveq	r1, #0
   d68a8:	4770      	bxeq	lr
   d68aa:	b530      	push	{r4, r5, lr}
   d68ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d68b8:	bf48      	it	mi
   d68ba:	4240      	negmi	r0, r0
   d68bc:	f04f 0100 	mov.w	r1, #0
   d68c0:	e73e      	b.n	d6740 <__adddf3+0x138>
   d68c2:	bf00      	nop

000d68c4 <__aeabi_f2d>:
   d68c4:	0042      	lsls	r2, r0, #1
   d68c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d68ca:	ea4f 0131 	mov.w	r1, r1, rrx
   d68ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d68d2:	bf1f      	itttt	ne
   d68d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d68d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d68dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d68e0:	4770      	bxne	lr
   d68e2:	f092 0f00 	teq	r2, #0
   d68e6:	bf14      	ite	ne
   d68e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d68ec:	4770      	bxeq	lr
   d68ee:	b530      	push	{r4, r5, lr}
   d68f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d68f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d68fc:	e720      	b.n	d6740 <__adddf3+0x138>
   d68fe:	bf00      	nop

000d6900 <__aeabi_ul2d>:
   d6900:	ea50 0201 	orrs.w	r2, r0, r1
   d6904:	bf08      	it	eq
   d6906:	4770      	bxeq	lr
   d6908:	b530      	push	{r4, r5, lr}
   d690a:	f04f 0500 	mov.w	r5, #0
   d690e:	e00a      	b.n	d6926 <__aeabi_l2d+0x16>

000d6910 <__aeabi_l2d>:
   d6910:	ea50 0201 	orrs.w	r2, r0, r1
   d6914:	bf08      	it	eq
   d6916:	4770      	bxeq	lr
   d6918:	b530      	push	{r4, r5, lr}
   d691a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d691e:	d502      	bpl.n	d6926 <__aeabi_l2d+0x16>
   d6920:	4240      	negs	r0, r0
   d6922:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6926:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d692a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d692e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6932:	f43f aedc 	beq.w	d66ee <__adddf3+0xe6>
   d6936:	f04f 0203 	mov.w	r2, #3
   d693a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d693e:	bf18      	it	ne
   d6940:	3203      	addne	r2, #3
   d6942:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6946:	bf18      	it	ne
   d6948:	3203      	addne	r2, #3
   d694a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d694e:	f1c2 0320 	rsb	r3, r2, #32
   d6952:	fa00 fc03 	lsl.w	ip, r0, r3
   d6956:	fa20 f002 	lsr.w	r0, r0, r2
   d695a:	fa01 fe03 	lsl.w	lr, r1, r3
   d695e:	ea40 000e 	orr.w	r0, r0, lr
   d6962:	fa21 f102 	lsr.w	r1, r1, r2
   d6966:	4414      	add	r4, r2
   d6968:	e6c1      	b.n	d66ee <__adddf3+0xe6>
   d696a:	bf00      	nop

000d696c <asctime>:
   d696c:	4b09      	ldr	r3, [pc, #36]	; (d6994 <asctime+0x28>)
   d696e:	b570      	push	{r4, r5, r6, lr}
   d6970:	681c      	ldr	r4, [r3, #0]
   d6972:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d6974:	4606      	mov	r6, r0
   d6976:	b93d      	cbnz	r5, d6988 <asctime+0x1c>
   d6978:	201a      	movs	r0, #26
   d697a:	f7fe f857 	bl	d4a2c <malloc>
   d697e:	221a      	movs	r2, #26
   d6980:	6420      	str	r0, [r4, #64]	; 0x40
   d6982:	4629      	mov	r1, r5
   d6984:	f000 f94e 	bl	d6c24 <memset>
   d6988:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d698a:	4630      	mov	r0, r6
   d698c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6990:	f000 b802 	b.w	d6998 <asctime_r>
   d6994:	2003e21c 	.word	0x2003e21c

000d6998 <asctime_r>:
   d6998:	b510      	push	{r4, lr}
   d699a:	460c      	mov	r4, r1
   d699c:	6941      	ldr	r1, [r0, #20]
   d699e:	6903      	ldr	r3, [r0, #16]
   d69a0:	6982      	ldr	r2, [r0, #24]
   d69a2:	b086      	sub	sp, #24
   d69a4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d69a8:	9104      	str	r1, [sp, #16]
   d69aa:	6801      	ldr	r1, [r0, #0]
   d69ac:	9103      	str	r1, [sp, #12]
   d69ae:	6841      	ldr	r1, [r0, #4]
   d69b0:	9102      	str	r1, [sp, #8]
   d69b2:	6881      	ldr	r1, [r0, #8]
   d69b4:	9101      	str	r1, [sp, #4]
   d69b6:	68c1      	ldr	r1, [r0, #12]
   d69b8:	9100      	str	r1, [sp, #0]
   d69ba:	4907      	ldr	r1, [pc, #28]	; (d69d8 <asctime_r+0x40>)
   d69bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d69c0:	440b      	add	r3, r1
   d69c2:	4906      	ldr	r1, [pc, #24]	; (d69dc <asctime_r+0x44>)
   d69c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d69c8:	440a      	add	r2, r1
   d69ca:	4620      	mov	r0, r4
   d69cc:	4904      	ldr	r1, [pc, #16]	; (d69e0 <asctime_r+0x48>)
   d69ce:	f7fe f84d 	bl	d4a6c <siprintf>
   d69d2:	4620      	mov	r0, r4
   d69d4:	b006      	add	sp, #24
   d69d6:	bd10      	pop	{r4, pc}
   d69d8:	000d822a 	.word	0x000d822a
   d69dc:	000d8215 	.word	0x000d8215
   d69e0:	000d824e 	.word	0x000d824e

000d69e4 <__cxa_atexit>:
   d69e4:	b510      	push	{r4, lr}
   d69e6:	4c05      	ldr	r4, [pc, #20]	; (d69fc <__cxa_atexit+0x18>)
   d69e8:	4613      	mov	r3, r2
   d69ea:	b12c      	cbz	r4, d69f8 <__cxa_atexit+0x14>
   d69ec:	460a      	mov	r2, r1
   d69ee:	4601      	mov	r1, r0
   d69f0:	2002      	movs	r0, #2
   d69f2:	f3af 8000 	nop.w
   d69f6:	bd10      	pop	{r4, pc}
   d69f8:	4620      	mov	r0, r4
   d69fa:	bd10      	pop	{r4, pc}
   d69fc:	00000000 	.word	0x00000000

000d6a00 <localtime>:
   d6a00:	b538      	push	{r3, r4, r5, lr}
   d6a02:	4b07      	ldr	r3, [pc, #28]	; (d6a20 <localtime+0x20>)
   d6a04:	681c      	ldr	r4, [r3, #0]
   d6a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6a08:	4605      	mov	r5, r0
   d6a0a:	b91b      	cbnz	r3, d6a14 <localtime+0x14>
   d6a0c:	2024      	movs	r0, #36	; 0x24
   d6a0e:	f7fe f80d 	bl	d4a2c <malloc>
   d6a12:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6a14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6a16:	4628      	mov	r0, r5
   d6a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6a1c:	f000 b802 	b.w	d6a24 <localtime_r>
   d6a20:	2003e21c 	.word	0x2003e21c

000d6a24 <localtime_r>:
   d6a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a28:	460c      	mov	r4, r1
   d6a2a:	4680      	mov	r8, r0
   d6a2c:	f001 f98a 	bl	d7d44 <__gettzinfo>
   d6a30:	4621      	mov	r1, r4
   d6a32:	4607      	mov	r7, r0
   d6a34:	4640      	mov	r0, r8
   d6a36:	f001 f989 	bl	d7d4c <gmtime_r>
   d6a3a:	6946      	ldr	r6, [r0, #20]
   d6a3c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d6a40:	07b3      	lsls	r3, r6, #30
   d6a42:	4604      	mov	r4, r0
   d6a44:	d105      	bne.n	d6a52 <localtime_r+0x2e>
   d6a46:	2264      	movs	r2, #100	; 0x64
   d6a48:	fb96 f3f2 	sdiv	r3, r6, r2
   d6a4c:	fb02 6313 	mls	r3, r2, r3, r6
   d6a50:	b94b      	cbnz	r3, d6a66 <localtime_r+0x42>
   d6a52:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6a56:	fb96 f3f5 	sdiv	r3, r6, r5
   d6a5a:	fb05 6513 	mls	r5, r5, r3, r6
   d6a5e:	fab5 f385 	clz	r3, r5
   d6a62:	095b      	lsrs	r3, r3, #5
   d6a64:	e000      	b.n	d6a68 <localtime_r+0x44>
   d6a66:	2301      	movs	r3, #1
   d6a68:	4a5f      	ldr	r2, [pc, #380]	; (d6be8 <localtime_r+0x1c4>)
   d6a6a:	2530      	movs	r5, #48	; 0x30
   d6a6c:	fb05 2503 	mla	r5, r5, r3, r2
   d6a70:	f000 ff98 	bl	d79a4 <__tz_lock>
   d6a74:	f000 ff98 	bl	d79a8 <_tzset_unlocked>
   d6a78:	4b5c      	ldr	r3, [pc, #368]	; (d6bec <localtime_r+0x1c8>)
   d6a7a:	681b      	ldr	r3, [r3, #0]
   d6a7c:	b1f3      	cbz	r3, d6abc <localtime_r+0x98>
   d6a7e:	687b      	ldr	r3, [r7, #4]
   d6a80:	429e      	cmp	r6, r3
   d6a82:	d105      	bne.n	d6a90 <localtime_r+0x6c>
   d6a84:	6839      	ldr	r1, [r7, #0]
   d6a86:	f8d8 3000 	ldr.w	r3, [r8]
   d6a8a:	69fa      	ldr	r2, [r7, #28]
   d6a8c:	b941      	cbnz	r1, d6aa0 <localtime_r+0x7c>
   d6a8e:	e00a      	b.n	d6aa6 <localtime_r+0x82>
   d6a90:	4630      	mov	r0, r6
   d6a92:	f000 fedf 	bl	d7854 <__tzcalc_limits>
   d6a96:	2800      	cmp	r0, #0
   d6a98:	d1f4      	bne.n	d6a84 <localtime_r+0x60>
   d6a9a:	f04f 33ff 	mov.w	r3, #4294967295
   d6a9e:	e00d      	b.n	d6abc <localtime_r+0x98>
   d6aa0:	4293      	cmp	r3, r2
   d6aa2:	db08      	blt.n	d6ab6 <localtime_r+0x92>
   d6aa4:	e001      	b.n	d6aaa <localtime_r+0x86>
   d6aa6:	4293      	cmp	r3, r2
   d6aa8:	da07      	bge.n	d6aba <localtime_r+0x96>
   d6aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d6aac:	4293      	cmp	r3, r2
   d6aae:	bfac      	ite	ge
   d6ab0:	2300      	movge	r3, #0
   d6ab2:	2301      	movlt	r3, #1
   d6ab4:	e002      	b.n	d6abc <localtime_r+0x98>
   d6ab6:	2300      	movs	r3, #0
   d6ab8:	e000      	b.n	d6abc <localtime_r+0x98>
   d6aba:	2301      	movs	r3, #1
   d6abc:	6223      	str	r3, [r4, #32]
   d6abe:	6a23      	ldr	r3, [r4, #32]
   d6ac0:	2b01      	cmp	r3, #1
   d6ac2:	bf0c      	ite	eq
   d6ac4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d6ac6:	6a39      	ldrne	r1, [r7, #32]
   d6ac8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d6acc:	203c      	movs	r0, #60	; 0x3c
   d6ace:	fb91 f6f3 	sdiv	r6, r1, r3
   d6ad2:	fb03 1316 	mls	r3, r3, r6, r1
   d6ad6:	6861      	ldr	r1, [r4, #4]
   d6ad8:	fb93 f2f0 	sdiv	r2, r3, r0
   d6adc:	fb00 3012 	mls	r0, r0, r2, r3
   d6ae0:	6823      	ldr	r3, [r4, #0]
   d6ae2:	1a89      	subs	r1, r1, r2
   d6ae4:	68a2      	ldr	r2, [r4, #8]
   d6ae6:	6061      	str	r1, [r4, #4]
   d6ae8:	1a1b      	subs	r3, r3, r0
   d6aea:	1b92      	subs	r2, r2, r6
   d6aec:	2b3b      	cmp	r3, #59	; 0x3b
   d6aee:	6023      	str	r3, [r4, #0]
   d6af0:	60a2      	str	r2, [r4, #8]
   d6af2:	dd03      	ble.n	d6afc <localtime_r+0xd8>
   d6af4:	3101      	adds	r1, #1
   d6af6:	6061      	str	r1, [r4, #4]
   d6af8:	3b3c      	subs	r3, #60	; 0x3c
   d6afa:	e004      	b.n	d6b06 <localtime_r+0xe2>
   d6afc:	2b00      	cmp	r3, #0
   d6afe:	da03      	bge.n	d6b08 <localtime_r+0xe4>
   d6b00:	3901      	subs	r1, #1
   d6b02:	6061      	str	r1, [r4, #4]
   d6b04:	333c      	adds	r3, #60	; 0x3c
   d6b06:	6023      	str	r3, [r4, #0]
   d6b08:	6863      	ldr	r3, [r4, #4]
   d6b0a:	2b3b      	cmp	r3, #59	; 0x3b
   d6b0c:	dd03      	ble.n	d6b16 <localtime_r+0xf2>
   d6b0e:	3201      	adds	r2, #1
   d6b10:	60a2      	str	r2, [r4, #8]
   d6b12:	3b3c      	subs	r3, #60	; 0x3c
   d6b14:	e004      	b.n	d6b20 <localtime_r+0xfc>
   d6b16:	2b00      	cmp	r3, #0
   d6b18:	da03      	bge.n	d6b22 <localtime_r+0xfe>
   d6b1a:	3a01      	subs	r2, #1
   d6b1c:	60a2      	str	r2, [r4, #8]
   d6b1e:	333c      	adds	r3, #60	; 0x3c
   d6b20:	6063      	str	r3, [r4, #4]
   d6b22:	68a3      	ldr	r3, [r4, #8]
   d6b24:	2b17      	cmp	r3, #23
   d6b26:	dd22      	ble.n	d6b6e <localtime_r+0x14a>
   d6b28:	69e2      	ldr	r2, [r4, #28]
   d6b2a:	3201      	adds	r2, #1
   d6b2c:	61e2      	str	r2, [r4, #28]
   d6b2e:	69a2      	ldr	r2, [r4, #24]
   d6b30:	3201      	adds	r2, #1
   d6b32:	2a06      	cmp	r2, #6
   d6b34:	bfc8      	it	gt
   d6b36:	2200      	movgt	r2, #0
   d6b38:	61a2      	str	r2, [r4, #24]
   d6b3a:	68e2      	ldr	r2, [r4, #12]
   d6b3c:	3b18      	subs	r3, #24
   d6b3e:	3201      	adds	r2, #1
   d6b40:	60a3      	str	r3, [r4, #8]
   d6b42:	6923      	ldr	r3, [r4, #16]
   d6b44:	60e2      	str	r2, [r4, #12]
   d6b46:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6b4a:	428a      	cmp	r2, r1
   d6b4c:	dd46      	ble.n	d6bdc <localtime_r+0x1b8>
   d6b4e:	3301      	adds	r3, #1
   d6b50:	2b0c      	cmp	r3, #12
   d6b52:	bf0c      	ite	eq
   d6b54:	6963      	ldreq	r3, [r4, #20]
   d6b56:	6123      	strne	r3, [r4, #16]
   d6b58:	eba2 0201 	sub.w	r2, r2, r1
   d6b5c:	60e2      	str	r2, [r4, #12]
   d6b5e:	bf01      	itttt	eq
   d6b60:	3301      	addeq	r3, #1
   d6b62:	2200      	moveq	r2, #0
   d6b64:	6122      	streq	r2, [r4, #16]
   d6b66:	6163      	streq	r3, [r4, #20]
   d6b68:	bf08      	it	eq
   d6b6a:	61e2      	streq	r2, [r4, #28]
   d6b6c:	e036      	b.n	d6bdc <localtime_r+0x1b8>
   d6b6e:	2b00      	cmp	r3, #0
   d6b70:	da34      	bge.n	d6bdc <localtime_r+0x1b8>
   d6b72:	69e2      	ldr	r2, [r4, #28]
   d6b74:	3a01      	subs	r2, #1
   d6b76:	61e2      	str	r2, [r4, #28]
   d6b78:	69a2      	ldr	r2, [r4, #24]
   d6b7a:	3a01      	subs	r2, #1
   d6b7c:	bf48      	it	mi
   d6b7e:	2206      	movmi	r2, #6
   d6b80:	61a2      	str	r2, [r4, #24]
   d6b82:	68e2      	ldr	r2, [r4, #12]
   d6b84:	3318      	adds	r3, #24
   d6b86:	3a01      	subs	r2, #1
   d6b88:	60e2      	str	r2, [r4, #12]
   d6b8a:	60a3      	str	r3, [r4, #8]
   d6b8c:	bb32      	cbnz	r2, d6bdc <localtime_r+0x1b8>
   d6b8e:	6923      	ldr	r3, [r4, #16]
   d6b90:	3b01      	subs	r3, #1
   d6b92:	d401      	bmi.n	d6b98 <localtime_r+0x174>
   d6b94:	6123      	str	r3, [r4, #16]
   d6b96:	e01d      	b.n	d6bd4 <localtime_r+0x1b0>
   d6b98:	230b      	movs	r3, #11
   d6b9a:	6123      	str	r3, [r4, #16]
   d6b9c:	6963      	ldr	r3, [r4, #20]
   d6b9e:	1e5a      	subs	r2, r3, #1
   d6ba0:	f012 0f03 	tst.w	r2, #3
   d6ba4:	6162      	str	r2, [r4, #20]
   d6ba6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d6baa:	d105      	bne.n	d6bb8 <localtime_r+0x194>
   d6bac:	2164      	movs	r1, #100	; 0x64
   d6bae:	fb93 f2f1 	sdiv	r2, r3, r1
   d6bb2:	fb01 3212 	mls	r2, r1, r2, r3
   d6bb6:	b94a      	cbnz	r2, d6bcc <localtime_r+0x1a8>
   d6bb8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d6bbc:	fb93 f2f1 	sdiv	r2, r3, r1
   d6bc0:	fb01 3312 	mls	r3, r1, r2, r3
   d6bc4:	fab3 f383 	clz	r3, r3
   d6bc8:	095b      	lsrs	r3, r3, #5
   d6bca:	e000      	b.n	d6bce <localtime_r+0x1aa>
   d6bcc:	2301      	movs	r3, #1
   d6bce:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d6bd2:	61e3      	str	r3, [r4, #28]
   d6bd4:	6923      	ldr	r3, [r4, #16]
   d6bd6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d6bda:	60e3      	str	r3, [r4, #12]
   d6bdc:	f000 fee3 	bl	d79a6 <__tz_unlock>
   d6be0:	4620      	mov	r0, r4
   d6be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6be6:	bf00      	nop
   d6be8:	000d83d4 	.word	0x000d83d4
   d6bec:	2003e7e4 	.word	0x2003e7e4

000d6bf0 <memcmp>:
   d6bf0:	b510      	push	{r4, lr}
   d6bf2:	3901      	subs	r1, #1
   d6bf4:	4402      	add	r2, r0
   d6bf6:	4290      	cmp	r0, r2
   d6bf8:	d007      	beq.n	d6c0a <memcmp+0x1a>
   d6bfa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6bfe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6c02:	42a3      	cmp	r3, r4
   d6c04:	d0f7      	beq.n	d6bf6 <memcmp+0x6>
   d6c06:	1b18      	subs	r0, r3, r4
   d6c08:	bd10      	pop	{r4, pc}
   d6c0a:	2000      	movs	r0, #0
   d6c0c:	bd10      	pop	{r4, pc}

000d6c0e <memcpy>:
   d6c0e:	b510      	push	{r4, lr}
   d6c10:	1e43      	subs	r3, r0, #1
   d6c12:	440a      	add	r2, r1
   d6c14:	4291      	cmp	r1, r2
   d6c16:	d004      	beq.n	d6c22 <memcpy+0x14>
   d6c18:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6c20:	e7f8      	b.n	d6c14 <memcpy+0x6>
   d6c22:	bd10      	pop	{r4, pc}

000d6c24 <memset>:
   d6c24:	4402      	add	r2, r0
   d6c26:	4603      	mov	r3, r0
   d6c28:	4293      	cmp	r3, r2
   d6c2a:	d002      	beq.n	d6c32 <memset+0xe>
   d6c2c:	f803 1b01 	strb.w	r1, [r3], #1
   d6c30:	e7fa      	b.n	d6c28 <memset+0x4>
   d6c32:	4770      	bx	lr

000d6c34 <srand>:
   d6c34:	b538      	push	{r3, r4, r5, lr}
   d6c36:	4b12      	ldr	r3, [pc, #72]	; (d6c80 <srand+0x4c>)
   d6c38:	681c      	ldr	r4, [r3, #0]
   d6c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c3c:	4605      	mov	r5, r0
   d6c3e:	b9d3      	cbnz	r3, d6c76 <srand+0x42>
   d6c40:	2018      	movs	r0, #24
   d6c42:	f7fd fef3 	bl	d4a2c <malloc>
   d6c46:	f243 330e 	movw	r3, #13070	; 0x330e
   d6c4a:	63a0      	str	r0, [r4, #56]	; 0x38
   d6c4c:	8003      	strh	r3, [r0, #0]
   d6c4e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6c52:	8043      	strh	r3, [r0, #2]
   d6c54:	f241 2334 	movw	r3, #4660	; 0x1234
   d6c58:	8083      	strh	r3, [r0, #4]
   d6c5a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6c5e:	80c3      	strh	r3, [r0, #6]
   d6c60:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6c64:	8103      	strh	r3, [r0, #8]
   d6c66:	2305      	movs	r3, #5
   d6c68:	8143      	strh	r3, [r0, #10]
   d6c6a:	230b      	movs	r3, #11
   d6c6c:	8183      	strh	r3, [r0, #12]
   d6c6e:	2201      	movs	r2, #1
   d6c70:	2300      	movs	r3, #0
   d6c72:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6c76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6c78:	2200      	movs	r2, #0
   d6c7a:	611d      	str	r5, [r3, #16]
   d6c7c:	615a      	str	r2, [r3, #20]
   d6c7e:	bd38      	pop	{r3, r4, r5, pc}
   d6c80:	2003e21c 	.word	0x2003e21c

000d6c84 <strcmp>:
   d6c84:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6c88:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6c8c:	2a01      	cmp	r2, #1
   d6c8e:	bf28      	it	cs
   d6c90:	429a      	cmpcs	r2, r3
   d6c92:	d0f7      	beq.n	d6c84 <strcmp>
   d6c94:	1ad0      	subs	r0, r2, r3
   d6c96:	4770      	bx	lr

000d6c98 <strcpy>:
   d6c98:	4603      	mov	r3, r0
   d6c9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6c9e:	f803 2b01 	strb.w	r2, [r3], #1
   d6ca2:	2a00      	cmp	r2, #0
   d6ca4:	d1f9      	bne.n	d6c9a <strcpy+0x2>
   d6ca6:	4770      	bx	lr

000d6ca8 <iso_year_adjust>:
   d6ca8:	6941      	ldr	r1, [r0, #20]
   d6caa:	078b      	lsls	r3, r1, #30
   d6cac:	b510      	push	{r4, lr}
   d6cae:	d10c      	bne.n	d6cca <iso_year_adjust+0x22>
   d6cb0:	2900      	cmp	r1, #0
   d6cb2:	f240 736c 	movw	r3, #1900	; 0x76c
   d6cb6:	bfa8      	it	ge
   d6cb8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d6cbc:	440b      	add	r3, r1
   d6cbe:	2464      	movs	r4, #100	; 0x64
   d6cc0:	fb93 f2f4 	sdiv	r2, r3, r4
   d6cc4:	fb04 3312 	mls	r3, r4, r2, r3
   d6cc8:	b983      	cbnz	r3, d6cec <iso_year_adjust+0x44>
   d6cca:	2900      	cmp	r1, #0
   d6ccc:	f240 736c 	movw	r3, #1900	; 0x76c
   d6cd0:	bfa8      	it	ge
   d6cd2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d6cd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6cda:	440b      	add	r3, r1
   d6cdc:	fb93 f1f2 	sdiv	r1, r3, r2
   d6ce0:	fb02 3311 	mls	r3, r2, r1, r3
   d6ce4:	fab3 f283 	clz	r2, r3
   d6ce8:	0952      	lsrs	r2, r2, #5
   d6cea:	e000      	b.n	d6cee <iso_year_adjust+0x46>
   d6cec:	2201      	movs	r2, #1
   d6cee:	6983      	ldr	r3, [r0, #24]
   d6cf0:	69c1      	ldr	r1, [r0, #28]
   d6cf2:	005b      	lsls	r3, r3, #1
   d6cf4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d6cf8:	4413      	add	r3, r2
   d6cfa:	2b21      	cmp	r3, #33	; 0x21
   d6cfc:	dc0e      	bgt.n	d6d1c <iso_year_adjust+0x74>
   d6cfe:	2b20      	cmp	r3, #32
   d6d00:	da2f      	bge.n	d6d62 <iso_year_adjust+0xba>
   d6d02:	2b0d      	cmp	r3, #13
   d6d04:	dc02      	bgt.n	d6d0c <iso_year_adjust+0x64>
   d6d06:	2b0a      	cmp	r3, #10
   d6d08:	db05      	blt.n	d6d16 <iso_year_adjust+0x6e>
   d6d0a:	e02a      	b.n	d6d62 <iso_year_adjust+0xba>
   d6d0c:	2b10      	cmp	r3, #16
   d6d0e:	db26      	blt.n	d6d5e <iso_year_adjust+0xb6>
   d6d10:	2b11      	cmp	r3, #17
   d6d12:	dd26      	ble.n	d6d62 <iso_year_adjust+0xba>
   d6d14:	3b1c      	subs	r3, #28
   d6d16:	2b01      	cmp	r3, #1
   d6d18:	d923      	bls.n	d6d62 <iso_year_adjust+0xba>
   d6d1a:	e020      	b.n	d6d5e <iso_year_adjust+0xb6>
   d6d1c:	f241 62c6 	movw	r2, #5830	; 0x16c6
   d6d20:	4293      	cmp	r3, r2
   d6d22:	dc0e      	bgt.n	d6d42 <iso_year_adjust+0x9a>
   d6d24:	f241 62c2 	movw	r2, #5826	; 0x16c2
   d6d28:	4293      	cmp	r3, r2
   d6d2a:	da16      	bge.n	d6d5a <iso_year_adjust+0xb2>
   d6d2c:	f241 62a2 	movw	r2, #5794	; 0x16a2
   d6d30:	4293      	cmp	r3, r2
   d6d32:	d012      	beq.n	d6d5a <iso_year_adjust+0xb2>
   d6d34:	db13      	blt.n	d6d5e <iso_year_adjust+0xb6>
   d6d36:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   d6d3a:	3b12      	subs	r3, #18
   d6d3c:	2b02      	cmp	r3, #2
   d6d3e:	d90c      	bls.n	d6d5a <iso_year_adjust+0xb2>
   d6d40:	e00d      	b.n	d6d5e <iso_year_adjust+0xb6>
   d6d42:	f241 62d5 	movw	r2, #5845	; 0x16d5
   d6d46:	4293      	cmp	r3, r2
   d6d48:	d007      	beq.n	d6d5a <iso_year_adjust+0xb2>
   d6d4a:	f241 62d7 	movw	r2, #5847	; 0x16d7
   d6d4e:	4293      	cmp	r3, r2
   d6d50:	d003      	beq.n	d6d5a <iso_year_adjust+0xb2>
   d6d52:	f241 62d3 	movw	r2, #5843	; 0x16d3
   d6d56:	4293      	cmp	r3, r2
   d6d58:	d101      	bne.n	d6d5e <iso_year_adjust+0xb6>
   d6d5a:	2001      	movs	r0, #1
   d6d5c:	bd10      	pop	{r4, pc}
   d6d5e:	2000      	movs	r0, #0
   d6d60:	bd10      	pop	{r4, pc}
   d6d62:	f04f 30ff 	mov.w	r0, #4294967295
   d6d66:	bd10      	pop	{r4, pc}

000d6d68 <strftime>:
   d6d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d6c:	b093      	sub	sp, #76	; 0x4c
   d6d6e:	460e      	mov	r6, r1
   d6d70:	461d      	mov	r5, r3
   d6d72:	4607      	mov	r7, r0
   d6d74:	4691      	mov	r9, r2
   d6d76:	f000 fd5d 	bl	d7834 <__get_current_time_locale>
   d6d7a:	2300      	movs	r3, #0
   d6d7c:	9306      	str	r3, [sp, #24]
   d6d7e:	461c      	mov	r4, r3
   d6d80:	1e73      	subs	r3, r6, #1
   d6d82:	9003      	str	r0, [sp, #12]
   d6d84:	9302      	str	r3, [sp, #8]
   d6d86:	f899 3000 	ldrb.w	r3, [r9]
   d6d8a:	2b00      	cmp	r3, #0
   d6d8c:	f000 8492 	beq.w	d76b4 <strftime+0x94c>
   d6d90:	2b25      	cmp	r3, #37	; 0x25
   d6d92:	d008      	beq.n	d6da6 <strftime+0x3e>
   d6d94:	9a02      	ldr	r2, [sp, #8]
   d6d96:	4294      	cmp	r4, r2
   d6d98:	f080 8490 	bcs.w	d76bc <strftime+0x954>
   d6d9c:	553b      	strb	r3, [r7, r4]
   d6d9e:	f109 0901 	add.w	r9, r9, #1
   d6da2:	3401      	adds	r4, #1
   d6da4:	e7ef      	b.n	d6d86 <strftime+0x1e>
   d6da6:	f899 a001 	ldrb.w	sl, [r9, #1]
   d6daa:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   d6dae:	d007      	beq.n	d6dc0 <strftime+0x58>
   d6db0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d6db4:	d004      	beq.n	d6dc0 <strftime+0x58>
   d6db6:	f109 0901 	add.w	r9, r9, #1
   d6dba:	f04f 0a00 	mov.w	sl, #0
   d6dbe:	e001      	b.n	d6dc4 <strftime+0x5c>
   d6dc0:	f109 0902 	add.w	r9, r9, #2
   d6dc4:	f899 3000 	ldrb.w	r3, [r9]
   d6dc8:	3b31      	subs	r3, #49	; 0x31
   d6dca:	2b08      	cmp	r3, #8
   d6dcc:	d808      	bhi.n	d6de0 <strftime+0x78>
   d6dce:	4648      	mov	r0, r9
   d6dd0:	220a      	movs	r2, #10
   d6dd2:	a90a      	add	r1, sp, #40	; 0x28
   d6dd4:	f000 fd24 	bl	d7820 <strtoul>
   d6dd8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d6ddc:	4680      	mov	r8, r0
   d6dde:	e001      	b.n	d6de4 <strftime+0x7c>
   d6de0:	f04f 0800 	mov.w	r8, #0
   d6de4:	f899 3000 	ldrb.w	r3, [r9]
   d6de8:	2b45      	cmp	r3, #69	; 0x45
   d6dea:	d001      	beq.n	d6df0 <strftime+0x88>
   d6dec:	2b4f      	cmp	r3, #79	; 0x4f
   d6dee:	d101      	bne.n	d6df4 <strftime+0x8c>
   d6df0:	f109 0901 	add.w	r9, r9, #1
   d6df4:	f899 0000 	ldrb.w	r0, [r9]
   d6df8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   d6dfc:	2b55      	cmp	r3, #85	; 0x55
   d6dfe:	f200 845d 	bhi.w	d76bc <strftime+0x954>
   d6e02:	e8df f013 	tbh	[pc, r3, lsl #1]
   d6e06:	044a      	.short	0x044a
   d6e08:	045b045b 	.word	0x045b045b
   d6e0c:	045b045b 	.word	0x045b045b
   d6e10:	045b045b 	.word	0x045b045b
   d6e14:	045b045b 	.word	0x045b045b
   d6e18:	045b045b 	.word	0x045b045b
   d6e1c:	045b045b 	.word	0x045b045b
   d6e20:	045b045b 	.word	0x045b045b
   d6e24:	045b045b 	.word	0x045b045b
   d6e28:	045b045b 	.word	0x045b045b
   d6e2c:	045b045b 	.word	0x045b045b
   d6e30:	045b045b 	.word	0x045b045b
   d6e34:	045b045b 	.word	0x045b045b
   d6e38:	045b045b 	.word	0x045b045b
   d6e3c:	006f045b 	.word	0x006f045b
   d6e40:	00d400a1 	.word	0x00d400a1
   d6e44:	045b011a 	.word	0x045b011a
   d6e48:	01a0013f 	.word	0x01a0013f
   d6e4c:	022d0226 	.word	0x022d0226
   d6e50:	045b045b 	.word	0x045b045b
   d6e54:	0260045b 	.word	0x0260045b
   d6e58:	045b045b 	.word	0x045b045b
   d6e5c:	045b0268 	.word	0x045b0268
   d6e60:	031d0297 	.word	0x031d0297
   d6e64:	033b0325 	.word	0x033b0325
   d6e68:	03860343 	.word	0x03860343
   d6e6c:	03a000c6 	.word	0x03a000c6
   d6e70:	045b041f 	.word	0x045b041f
   d6e74:	045b045b 	.word	0x045b045b
   d6e78:	045b045b 	.word	0x045b045b
   d6e7c:	0056045b 	.word	0x0056045b
   d6e80:	00ba0089 	.word	0x00ba0089
   d6e84:	010c010c 	.word	0x010c010c
   d6e88:	0171045b 	.word	0x0171045b
   d6e8c:	045b0089 	.word	0x045b0089
   d6e90:	0226023d 	.word	0x0226023d
   d6e94:	025d022d 	.word	0x025d022d
   d6e98:	045b0262 	.word	0x045b0262
   d6e9c:	045b0268 	.word	0x045b0268
   d6ea0:	029c00be 	.word	0x029c00be
   d6ea4:	032e031f 	.word	0x032e031f
   d6ea8:	037f045b 	.word	0x037f045b
   d6eac:	039200c2 	.word	0x039200c2
   d6eb0:	03e7      	.short	0x03e7
   d6eb2:	69ab      	ldr	r3, [r5, #24]
   d6eb4:	9a03      	ldr	r2, [sp, #12]
   d6eb6:	3318      	adds	r3, #24
   d6eb8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d6ebc:	4640      	mov	r0, r8
   d6ebe:	f000 fc07 	bl	d76d0 <strlen>
   d6ec2:	f108 38ff 	add.w	r8, r8, #4294967295
   d6ec6:	193b      	adds	r3, r7, r4
   d6ec8:	4420      	add	r0, r4
   d6eca:	4284      	cmp	r4, r0
   d6ecc:	f000 83eb 	beq.w	d76a6 <strftime+0x93e>
   d6ed0:	9a02      	ldr	r2, [sp, #8]
   d6ed2:	4294      	cmp	r4, r2
   d6ed4:	f080 83f2 	bcs.w	d76bc <strftime+0x954>
   d6ed8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6edc:	f803 2b01 	strb.w	r2, [r3], #1
   d6ee0:	3401      	adds	r4, #1
   d6ee2:	e7f2      	b.n	d6eca <strftime+0x162>
   d6ee4:	69ab      	ldr	r3, [r5, #24]
   d6ee6:	9a03      	ldr	r2, [sp, #12]
   d6ee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d6eec:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   d6ef0:	4640      	mov	r0, r8
   d6ef2:	f000 fbed 	bl	d76d0 <strlen>
   d6ef6:	f108 38ff 	add.w	r8, r8, #4294967295
   d6efa:	193b      	adds	r3, r7, r4
   d6efc:	4420      	add	r0, r4
   d6efe:	4284      	cmp	r4, r0
   d6f00:	f000 83d1 	beq.w	d76a6 <strftime+0x93e>
   d6f04:	9a02      	ldr	r2, [sp, #8]
   d6f06:	4294      	cmp	r4, r2
   d6f08:	f080 83d8 	bcs.w	d76bc <strftime+0x954>
   d6f0c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6f10:	f803 2b01 	strb.w	r2, [r3], #1
   d6f14:	3401      	adds	r4, #1
   d6f16:	e7f2      	b.n	d6efe <strftime+0x196>
   d6f18:	692b      	ldr	r3, [r5, #16]
   d6f1a:	9a03      	ldr	r2, [sp, #12]
   d6f1c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d6f20:	4640      	mov	r0, r8
   d6f22:	f000 fbd5 	bl	d76d0 <strlen>
   d6f26:	f108 38ff 	add.w	r8, r8, #4294967295
   d6f2a:	193b      	adds	r3, r7, r4
   d6f2c:	4420      	add	r0, r4
   d6f2e:	4284      	cmp	r4, r0
   d6f30:	f000 83b9 	beq.w	d76a6 <strftime+0x93e>
   d6f34:	9a02      	ldr	r2, [sp, #8]
   d6f36:	4294      	cmp	r4, r2
   d6f38:	f080 83c0 	bcs.w	d76bc <strftime+0x954>
   d6f3c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6f40:	f803 2b01 	strb.w	r2, [r3], #1
   d6f44:	3401      	adds	r4, #1
   d6f46:	e7f2      	b.n	d6f2e <strftime+0x1c6>
   d6f48:	692b      	ldr	r3, [r5, #16]
   d6f4a:	9a03      	ldr	r2, [sp, #12]
   d6f4c:	330c      	adds	r3, #12
   d6f4e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d6f52:	4640      	mov	r0, r8
   d6f54:	f000 fbbc 	bl	d76d0 <strlen>
   d6f58:	f108 38ff 	add.w	r8, r8, #4294967295
   d6f5c:	193b      	adds	r3, r7, r4
   d6f5e:	4420      	add	r0, r4
   d6f60:	4284      	cmp	r4, r0
   d6f62:	f000 83a0 	beq.w	d76a6 <strftime+0x93e>
   d6f66:	9a02      	ldr	r2, [sp, #8]
   d6f68:	4294      	cmp	r4, r2
   d6f6a:	f080 83a7 	bcs.w	d76bc <strftime+0x954>
   d6f6e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d6f72:	f803 2b01 	strb.w	r2, [r3], #1
   d6f76:	3401      	adds	r4, #1
   d6f78:	e7f2      	b.n	d6f60 <strftime+0x1f8>
   d6f7a:	9b03      	ldr	r3, [sp, #12]
   d6f7c:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   d6f80:	e00a      	b.n	d6f98 <strftime+0x230>
   d6f82:	9b03      	ldr	r3, [sp, #12]
   d6f84:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   d6f88:	e006      	b.n	d6f98 <strftime+0x230>
   d6f8a:	9b03      	ldr	r3, [sp, #12]
   d6f8c:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   d6f90:	e002      	b.n	d6f98 <strftime+0x230>
   d6f92:	9b03      	ldr	r3, [sp, #12]
   d6f94:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   d6f98:	4640      	mov	r0, r8
   d6f9a:	f000 fb99 	bl	d76d0 <strlen>
   d6f9e:	f898 3000 	ldrb.w	r3, [r8]
   d6fa2:	2b00      	cmp	r3, #0
   d6fa4:	f000 837f 	beq.w	d76a6 <strftime+0x93e>
   d6fa8:	462b      	mov	r3, r5
   d6faa:	4642      	mov	r2, r8
   d6fac:	e093      	b.n	d70d6 <strftime+0x36e>
   d6fae:	49b6      	ldr	r1, [pc, #728]	; (d7288 <strftime+0x520>)
   d6fb0:	f8d5 b014 	ldr.w	fp, [r5, #20]
   d6fb4:	458b      	cmp	fp, r1
   d6fb6:	bfac      	ite	ge
   d6fb8:	2100      	movge	r1, #0
   d6fba:	2101      	movlt	r1, #1
   d6fbc:	f1bb 0f00 	cmp.w	fp, #0
   d6fc0:	db04      	blt.n	d6fcc <strftime+0x264>
   d6fc2:	2064      	movs	r0, #100	; 0x64
   d6fc4:	fb9b f0f0 	sdiv	r0, fp, r0
   d6fc8:	3013      	adds	r0, #19
   d6fca:	e008      	b.n	d6fde <strftime+0x276>
   d6fcc:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   d6fd0:	9107      	str	r1, [sp, #28]
   d6fd2:	f000 fe6f 	bl	d7cb4 <abs>
   d6fd6:	9907      	ldr	r1, [sp, #28]
   d6fd8:	2364      	movs	r3, #100	; 0x64
   d6fda:	fb90 f0f3 	sdiv	r0, r0, r3
   d6fde:	f1ba 0f00 	cmp.w	sl, #0
   d6fe2:	d008      	beq.n	d6ff6 <strftime+0x28e>
   d6fe4:	2863      	cmp	r0, #99	; 0x63
   d6fe6:	dd09      	ble.n	d6ffc <strftime+0x294>
   d6fe8:	4ba8      	ldr	r3, [pc, #672]	; (d728c <strftime+0x524>)
   d6fea:	4aa9      	ldr	r2, [pc, #676]	; (d7290 <strftime+0x528>)
   d6fec:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d6ff0:	bf18      	it	ne
   d6ff2:	4613      	movne	r3, r2
   d6ff4:	e003      	b.n	d6ffe <strftime+0x296>
   d6ff6:	4ba6      	ldr	r3, [pc, #664]	; (d7290 <strftime+0x528>)
   d6ff8:	4aa6      	ldr	r2, [pc, #664]	; (d7294 <strftime+0x52c>)
   d6ffa:	e001      	b.n	d7000 <strftime+0x298>
   d6ffc:	4ba4      	ldr	r3, [pc, #656]	; (d7290 <strftime+0x528>)
   d6ffe:	4aa6      	ldr	r2, [pc, #664]	; (d7298 <strftime+0x530>)
   d7000:	9001      	str	r0, [sp, #4]
   d7002:	f1b8 0f01 	cmp.w	r8, #1
   d7006:	bf98      	it	ls
   d7008:	f04f 0802 	movls.w	r8, #2
   d700c:	ebc1 0108 	rsb	r1, r1, r8
   d7010:	9100      	str	r1, [sp, #0]
   d7012:	489d      	ldr	r0, [pc, #628]	; (d7288 <strftime+0x520>)
   d7014:	49a1      	ldr	r1, [pc, #644]	; (d729c <strftime+0x534>)
   d7016:	4583      	cmp	fp, r0
   d7018:	bfb8      	it	lt
   d701a:	460b      	movlt	r3, r1
   d701c:	e21e      	b.n	d745c <strftime+0x6f4>
   d701e:	4aa0      	ldr	r2, [pc, #640]	; (d72a0 <strftime+0x538>)
   d7020:	49a0      	ldr	r1, [pc, #640]	; (d72a4 <strftime+0x53c>)
   d7022:	68eb      	ldr	r3, [r5, #12]
   d7024:	2864      	cmp	r0, #100	; 0x64
   d7026:	bf08      	it	eq
   d7028:	460a      	moveq	r2, r1
   d702a:	1b31      	subs	r1, r6, r4
   d702c:	1938      	adds	r0, r7, r4
   d702e:	f7fd fd35 	bl	d4a9c <sniprintf>
   d7032:	2800      	cmp	r0, #0
   d7034:	f280 8302 	bge.w	d763c <strftime+0x8d4>
   d7038:	e340      	b.n	d76bc <strftime+0x954>
   d703a:	6968      	ldr	r0, [r5, #20]
   d703c:	692b      	ldr	r3, [r5, #16]
   d703e:	2800      	cmp	r0, #0
   d7040:	f103 0b01 	add.w	fp, r3, #1
   d7044:	eb07 0804 	add.w	r8, r7, r4
   d7048:	ebc4 0a06 	rsb	sl, r4, r6
   d704c:	68eb      	ldr	r3, [r5, #12]
   d704e:	db05      	blt.n	d705c <strftime+0x2f4>
   d7050:	2264      	movs	r2, #100	; 0x64
   d7052:	fb90 f1f2 	sdiv	r1, r0, r2
   d7056:	fb02 0011 	mls	r0, r2, r1, r0
   d705a:	e00a      	b.n	d7072 <strftime+0x30a>
   d705c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7060:	9307      	str	r3, [sp, #28]
   d7062:	f000 fe27 	bl	d7cb4 <abs>
   d7066:	2264      	movs	r2, #100	; 0x64
   d7068:	9b07      	ldr	r3, [sp, #28]
   d706a:	fb90 f1f2 	sdiv	r1, r0, r2
   d706e:	fb01 0012 	mls	r0, r1, r2, r0
   d7072:	4a8d      	ldr	r2, [pc, #564]	; (d72a8 <strftime+0x540>)
   d7074:	9001      	str	r0, [sp, #4]
   d7076:	9300      	str	r3, [sp, #0]
   d7078:	4651      	mov	r1, sl
   d707a:	465b      	mov	r3, fp
   d707c:	4640      	mov	r0, r8
   d707e:	f7fd fd0d 	bl	d4a9c <sniprintf>
   d7082:	e7d6      	b.n	d7032 <strftime+0x2ca>
   d7084:	2325      	movs	r3, #37	; 0x25
   d7086:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d708a:	f1ba 0f00 	cmp.w	sl, #0
   d708e:	d007      	beq.n	d70a0 <strftime+0x338>
   d7090:	f1b8 0f05 	cmp.w	r8, #5
   d7094:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   d7098:	bf98      	it	ls
   d709a:	f04f 0806 	movls.w	r8, #6
   d709e:	e004      	b.n	d70aa <strftime+0x342>
   d70a0:	232b      	movs	r3, #43	; 0x2b
   d70a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   d70a6:	f04f 080a 	mov.w	r8, #10
   d70aa:	f1b8 0306 	subs.w	r3, r8, #6
   d70ae:	d102      	bne.n	d70b6 <strftime+0x34e>
   d70b0:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d70b4:	e00a      	b.n	d70cc <strftime+0x364>
   d70b6:	4a7d      	ldr	r2, [pc, #500]	; (d72ac <strftime+0x544>)
   d70b8:	211e      	movs	r1, #30
   d70ba:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d70be:	f7fd fced 	bl	d4a9c <sniprintf>
   d70c2:	2800      	cmp	r0, #0
   d70c4:	ddf4      	ble.n	d70b0 <strftime+0x348>
   d70c6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d70ca:	4418      	add	r0, r3
   d70cc:	4978      	ldr	r1, [pc, #480]	; (d72b0 <strftime+0x548>)
   d70ce:	f7ff fde3 	bl	d6c98 <strcpy>
   d70d2:	462b      	mov	r3, r5
   d70d4:	aa0a      	add	r2, sp, #40	; 0x28
   d70d6:	1b31      	subs	r1, r6, r4
   d70d8:	1938      	adds	r0, r7, r4
   d70da:	f7ff fe45 	bl	d6d68 <strftime>
   d70de:	2800      	cmp	r0, #0
   d70e0:	f340 82ec 	ble.w	d76bc <strftime+0x954>
   d70e4:	4404      	add	r4, r0
   d70e6:	e2de      	b.n	d76a6 <strftime+0x93e>
   d70e8:	4628      	mov	r0, r5
   d70ea:	f7ff fddd 	bl	d6ca8 <iso_year_adjust>
   d70ee:	4680      	mov	r8, r0
   d70f0:	6968      	ldr	r0, [r5, #20]
   d70f2:	2800      	cmp	r0, #0
   d70f4:	db05      	blt.n	d7102 <strftime+0x39a>
   d70f6:	2264      	movs	r2, #100	; 0x64
   d70f8:	fb90 f1f2 	sdiv	r1, r0, r2
   d70fc:	fb02 0011 	mls	r0, r2, r1, r0
   d7100:	e008      	b.n	d7114 <strftime+0x3ac>
   d7102:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7106:	f000 fdd5 	bl	d7cb4 <abs>
   d710a:	2264      	movs	r2, #100	; 0x64
   d710c:	fb90 f3f2 	sdiv	r3, r0, r2
   d7110:	fb03 0012 	mls	r0, r3, r2, r0
   d7114:	f1b8 0f00 	cmp.w	r8, #0
   d7118:	da06      	bge.n	d7128 <strftime+0x3c0>
   d711a:	696a      	ldr	r2, [r5, #20]
   d711c:	4b65      	ldr	r3, [pc, #404]	; (d72b4 <strftime+0x54c>)
   d711e:	429a      	cmp	r2, r3
   d7120:	bfb8      	it	lt
   d7122:	f04f 0801 	movlt.w	r8, #1
   d7126:	e006      	b.n	d7136 <strftime+0x3ce>
   d7128:	d005      	beq.n	d7136 <strftime+0x3ce>
   d712a:	696a      	ldr	r2, [r5, #20]
   d712c:	4b56      	ldr	r3, [pc, #344]	; (d7288 <strftime+0x520>)
   d712e:	429a      	cmp	r2, r3
   d7130:	bfb8      	it	lt
   d7132:	f04f 38ff 	movlt.w	r8, #4294967295
   d7136:	2364      	movs	r3, #100	; 0x64
   d7138:	4440      	add	r0, r8
   d713a:	fb90 f2f3 	sdiv	r2, r0, r3
   d713e:	fb03 0012 	mls	r0, r3, r2, r0
   d7142:	4418      	add	r0, r3
   d7144:	e1f9      	b.n	d753a <strftime+0x7d2>
   d7146:	4b50      	ldr	r3, [pc, #320]	; (d7288 <strftime+0x520>)
   d7148:	6969      	ldr	r1, [r5, #20]
   d714a:	9108      	str	r1, [sp, #32]
   d714c:	4299      	cmp	r1, r3
   d714e:	bfac      	ite	ge
   d7150:	2300      	movge	r3, #0
   d7152:	2301      	movlt	r3, #1
   d7154:	4628      	mov	r0, r5
   d7156:	9307      	str	r3, [sp, #28]
   d7158:	f7ff fda6 	bl	d6ca8 <iso_year_adjust>
   d715c:	9908      	ldr	r1, [sp, #32]
   d715e:	2900      	cmp	r1, #0
   d7160:	4683      	mov	fp, r0
   d7162:	db04      	blt.n	d716e <strftime+0x406>
   d7164:	2364      	movs	r3, #100	; 0x64
   d7166:	fb91 f3f3 	sdiv	r3, r1, r3
   d716a:	3313      	adds	r3, #19
   d716c:	e008      	b.n	d7180 <strftime+0x418>
   d716e:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   d7172:	9108      	str	r1, [sp, #32]
   d7174:	f000 fd9e 	bl	d7cb4 <abs>
   d7178:	9908      	ldr	r1, [sp, #32]
   d717a:	2364      	movs	r3, #100	; 0x64
   d717c:	fb90 f3f3 	sdiv	r3, r0, r3
   d7180:	6968      	ldr	r0, [r5, #20]
   d7182:	2800      	cmp	r0, #0
   d7184:	db06      	blt.n	d7194 <strftime+0x42c>
   d7186:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d718a:	fb90 fcfe 	sdiv	ip, r0, lr
   d718e:	fb0e 001c 	mls	r0, lr, ip, r0
   d7192:	e00d      	b.n	d71b0 <strftime+0x448>
   d7194:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7198:	9109      	str	r1, [sp, #36]	; 0x24
   d719a:	9308      	str	r3, [sp, #32]
   d719c:	f000 fd8a 	bl	d7cb4 <abs>
   d71a0:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d71a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d71a6:	9b08      	ldr	r3, [sp, #32]
   d71a8:	fb90 fcfe 	sdiv	ip, r0, lr
   d71ac:	fb0c 001e 	mls	r0, ip, lr, r0
   d71b0:	f1bb 0f00 	cmp.w	fp, #0
   d71b4:	da08      	bge.n	d71c8 <strftime+0x460>
   d71b6:	6969      	ldr	r1, [r5, #20]
   d71b8:	4a3e      	ldr	r2, [pc, #248]	; (d72b4 <strftime+0x54c>)
   d71ba:	4291      	cmp	r1, r2
   d71bc:	da0a      	bge.n	d71d4 <strftime+0x46c>
   d71be:	f04f 0b01 	mov.w	fp, #1
   d71c2:	f8cd b01c 	str.w	fp, [sp, #28]
   d71c6:	e005      	b.n	d71d4 <strftime+0x46c>
   d71c8:	d004      	beq.n	d71d4 <strftime+0x46c>
   d71ca:	4a2f      	ldr	r2, [pc, #188]	; (d7288 <strftime+0x520>)
   d71cc:	4291      	cmp	r1, r2
   d71ce:	bfb8      	it	lt
   d71d0:	f04f 3bff 	movlt.w	fp, #4294967295
   d71d4:	eb0b 0200 	add.w	r2, fp, r0
   d71d8:	1c50      	adds	r0, r2, #1
   d71da:	d102      	bne.n	d71e2 <strftime+0x47a>
   d71dc:	3b01      	subs	r3, #1
   d71de:	2263      	movs	r2, #99	; 0x63
   d71e0:	e003      	b.n	d71ea <strftime+0x482>
   d71e2:	2a64      	cmp	r2, #100	; 0x64
   d71e4:	bf04      	itt	eq
   d71e6:	3301      	addeq	r3, #1
   d71e8:	2200      	moveq	r2, #0
   d71ea:	2064      	movs	r0, #100	; 0x64
   d71ec:	fb00 2303 	mla	r3, r0, r3, r2
   d71f0:	9a07      	ldr	r2, [sp, #28]
   d71f2:	b142      	cbz	r2, d7206 <strftime+0x49e>
   d71f4:	222d      	movs	r2, #45	; 0x2d
   d71f6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d71fa:	f1b8 0f00 	cmp.w	r8, #0
   d71fe:	d013      	beq.n	d7228 <strftime+0x4c0>
   d7200:	f108 38ff 	add.w	r8, r8, #4294967295
   d7204:	e010      	b.n	d7228 <strftime+0x4c0>
   d7206:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d720a:	d110      	bne.n	d722e <strftime+0x4c6>
   d720c:	f242 720f 	movw	r2, #9999	; 0x270f
   d7210:	4293      	cmp	r3, r2
   d7212:	d90c      	bls.n	d722e <strftime+0x4c6>
   d7214:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d7218:	f1b8 0f00 	cmp.w	r8, #0
   d721c:	d1f0      	bne.n	d7200 <strftime+0x498>
   d721e:	aa12      	add	r2, sp, #72	; 0x48
   d7220:	2125      	movs	r1, #37	; 0x25
   d7222:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   d7226:	e00a      	b.n	d723e <strftime+0x4d6>
   d7228:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   d722c:	e000      	b.n	d7230 <strftime+0x4c8>
   d722e:	aa0a      	add	r2, sp, #40	; 0x28
   d7230:	2125      	movs	r1, #37	; 0x25
   d7232:	7011      	strb	r1, [r2, #0]
   d7234:	f1ba 0f00 	cmp.w	sl, #0
   d7238:	d101      	bne.n	d723e <strftime+0x4d6>
   d723a:	1c50      	adds	r0, r2, #1
   d723c:	e002      	b.n	d7244 <strftime+0x4dc>
   d723e:	2130      	movs	r1, #48	; 0x30
   d7240:	1c90      	adds	r0, r2, #2
   d7242:	7051      	strb	r1, [r2, #1]
   d7244:	491c      	ldr	r1, [pc, #112]	; (d72b8 <strftime+0x550>)
   d7246:	9307      	str	r3, [sp, #28]
   d7248:	f7ff fd26 	bl	d6c98 <strcpy>
   d724c:	9b07      	ldr	r3, [sp, #28]
   d724e:	9300      	str	r3, [sp, #0]
   d7250:	e1ad      	b.n	d75ae <strftime+0x846>
   d7252:	4a14      	ldr	r2, [pc, #80]	; (d72a4 <strftime+0x53c>)
   d7254:	4912      	ldr	r1, [pc, #72]	; (d72a0 <strftime+0x538>)
   d7256:	68ab      	ldr	r3, [r5, #8]
   d7258:	286b      	cmp	r0, #107	; 0x6b
   d725a:	bf08      	it	eq
   d725c:	460a      	moveq	r2, r1
   d725e:	e6e4      	b.n	d702a <strftime+0x2c2>
   d7260:	68a9      	ldr	r1, [r5, #8]
   d7262:	230c      	movs	r3, #12
   d7264:	b131      	cbz	r1, d7274 <strftime+0x50c>
   d7266:	4299      	cmp	r1, r3
   d7268:	bf0e      	itee	eq
   d726a:	460b      	moveq	r3, r1
   d726c:	fb91 f2f3 	sdivne	r2, r1, r3
   d7270:	fb03 1312 	mlsne	r3, r3, r2, r1
   d7274:	4a0a      	ldr	r2, [pc, #40]	; (d72a0 <strftime+0x538>)
   d7276:	490b      	ldr	r1, [pc, #44]	; (d72a4 <strftime+0x53c>)
   d7278:	2849      	cmp	r0, #73	; 0x49
   d727a:	bf08      	it	eq
   d727c:	460a      	moveq	r2, r1
   d727e:	e6d4      	b.n	d702a <strftime+0x2c2>
   d7280:	69eb      	ldr	r3, [r5, #28]
   d7282:	4a0e      	ldr	r2, [pc, #56]	; (d72bc <strftime+0x554>)
   d7284:	3301      	adds	r3, #1
   d7286:	e6d0      	b.n	d702a <strftime+0x2c2>
   d7288:	fffff894 	.word	0xfffff894
   d728c:	000d8443 	.word	0x000d8443
   d7290:	000d807c 	.word	0x000d807c
   d7294:	000d8434 	.word	0x000d8434
   d7298:	000d843b 	.word	0x000d843b
   d729c:	000d8445 	.word	0x000d8445
   d72a0:	000d8447 	.word	0x000d8447
   d72a4:	000d8455 	.word	0x000d8455
   d72a8:	000d844b 	.word	0x000d844b
   d72ac:	000d845a 	.word	0x000d845a
   d72b0:	000d845e 	.word	0x000d845e
   d72b4:	fffff895 	.word	0xfffff895
   d72b8:	000d8466 	.word	0x000d8466
   d72bc:	000d846a 	.word	0x000d846a
   d72c0:	692b      	ldr	r3, [r5, #16]
   d72c2:	3301      	adds	r3, #1
   d72c4:	e13d      	b.n	d7542 <strftime+0x7da>
   d72c6:	686b      	ldr	r3, [r5, #4]
   d72c8:	e13b      	b.n	d7542 <strftime+0x7da>
   d72ca:	9b02      	ldr	r3, [sp, #8]
   d72cc:	429c      	cmp	r4, r3
   d72ce:	f080 81f5 	bcs.w	d76bc <strftime+0x954>
   d72d2:	230a      	movs	r3, #10
   d72d4:	e1e5      	b.n	d76a2 <strftime+0x93a>
   d72d6:	68ab      	ldr	r3, [r5, #8]
   d72d8:	9a03      	ldr	r2, [sp, #12]
   d72da:	2b0b      	cmp	r3, #11
   d72dc:	bfcc      	ite	gt
   d72de:	23a4      	movgt	r3, #164	; 0xa4
   d72e0:	23a0      	movle	r3, #160	; 0xa0
   d72e2:	4413      	add	r3, r2
   d72e4:	f8d3 8004 	ldr.w	r8, [r3, #4]
   d72e8:	4640      	mov	r0, r8
   d72ea:	f000 f9f1 	bl	d76d0 <strlen>
   d72ee:	4bb2      	ldr	r3, [pc, #712]	; (d75b8 <strftime+0x850>)
   d72f0:	f8d3 e000 	ldr.w	lr, [r3]
   d72f4:	1939      	adds	r1, r7, r4
   d72f6:	4642      	mov	r2, r8
   d72f8:	4420      	add	r0, r4
   d72fa:	4284      	cmp	r4, r0
   d72fc:	f000 81d3 	beq.w	d76a6 <strftime+0x93e>
   d7300:	9b02      	ldr	r3, [sp, #8]
   d7302:	429c      	cmp	r4, r3
   d7304:	f080 81da 	bcs.w	d76bc <strftime+0x954>
   d7308:	f899 3000 	ldrb.w	r3, [r9]
   d730c:	2b50      	cmp	r3, #80	; 0x50
   d730e:	f104 0401 	add.w	r4, r4, #1
   d7312:	7813      	ldrb	r3, [r2, #0]
   d7314:	d10a      	bne.n	d732c <strftime+0x5c4>
   d7316:	eb0e 0c03 	add.w	ip, lr, r3
   d731a:	f89c c001 	ldrb.w	ip, [ip, #1]
   d731e:	f00c 0c03 	and.w	ip, ip, #3
   d7322:	f1bc 0f01 	cmp.w	ip, #1
   d7326:	bf08      	it	eq
   d7328:	3320      	addeq	r3, #32
   d732a:	b2db      	uxtb	r3, r3
   d732c:	f801 3b01 	strb.w	r3, [r1], #1
   d7330:	3201      	adds	r2, #1
   d7332:	e7e2      	b.n	d72fa <strftime+0x592>
   d7334:	686b      	ldr	r3, [r5, #4]
   d7336:	9300      	str	r3, [sp, #0]
   d7338:	4aa0      	ldr	r2, [pc, #640]	; (d75bc <strftime+0x854>)
   d733a:	68ab      	ldr	r3, [r5, #8]
   d733c:	e139      	b.n	d75b2 <strftime+0x84a>
   d733e:	6a2b      	ldr	r3, [r5, #32]
   d7340:	2b00      	cmp	r3, #0
   d7342:	db17      	blt.n	d7374 <strftime+0x60c>
   d7344:	f000 fb2e 	bl	d79a4 <__tz_lock>
   d7348:	9b06      	ldr	r3, [sp, #24]
   d734a:	b91b      	cbnz	r3, d7354 <strftime+0x5ec>
   d734c:	f000 fb2c 	bl	d79a8 <_tzset_unlocked>
   d7350:	2301      	movs	r3, #1
   d7352:	9306      	str	r3, [sp, #24]
   d7354:	f000 fcf6 	bl	d7d44 <__gettzinfo>
   d7358:	6a2b      	ldr	r3, [r5, #32]
   d735a:	2b00      	cmp	r3, #0
   d735c:	bfd4      	ite	le
   d735e:	2300      	movle	r3, #0
   d7360:	2301      	movgt	r3, #1
   d7362:	221c      	movs	r2, #28
   d7364:	fb02 0003 	mla	r0, r2, r3, r0
   d7368:	6a03      	ldr	r3, [r0, #32]
   d736a:	f1c3 0800 	rsb	r8, r3, #0
   d736e:	f000 fb1a 	bl	d79a6 <__tz_unlock>
   d7372:	e001      	b.n	d7378 <strftime+0x610>
   d7374:	f04f 0800 	mov.w	r8, #0
   d7378:	f8d5 e014 	ldr.w	lr, [r5, #20]
   d737c:	4670      	mov	r0, lr
   d737e:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   d7382:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d7386:	f141 33ff 	adc.w	r3, r1, #4294967295
   d738a:	2a00      	cmp	r2, #0
   d738c:	f173 0b00 	sbcs.w	fp, r3, #0
   d7390:	ebc4 0c06 	rsb	ip, r4, r6
   d7394:	eb07 0a04 	add.w	sl, r7, r4
   d7398:	da03      	bge.n	d73a2 <strftime+0x63a>
   d739a:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   d739e:	f141 33ff 	adc.w	r3, r1, #4294967295
   d73a2:	0891      	lsrs	r1, r2, #2
   d73a4:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   d73a8:	109b      	asrs	r3, r3, #2
   d73aa:	9104      	str	r1, [sp, #16]
   d73ac:	9305      	str	r3, [sp, #20]
   d73ae:	f10e 31ff 	add.w	r1, lr, #4294967295
   d73b2:	2364      	movs	r3, #100	; 0x64
   d73b4:	fb91 f1f3 	sdiv	r1, r1, r3
   d73b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d73bc:	1a52      	subs	r2, r2, r1
   d73be:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   d73c2:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   d73c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d73ca:	fb90 f1f1 	sdiv	r1, r0, r1
   d73ce:	1852      	adds	r2, r2, r1
   d73d0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d73d4:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   d73d8:	f240 116d 	movw	r1, #365	; 0x16d
   d73dc:	fb01 fe0e 	mul.w	lr, r1, lr
   d73e0:	69e9      	ldr	r1, [r5, #28]
   d73e2:	eb12 020e 	adds.w	r2, r2, lr
   d73e6:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   d73ea:	1852      	adds	r2, r2, r1
   d73ec:	f04f 0e18 	mov.w	lr, #24
   d73f0:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d73f4:	fba2 010e 	umull	r0, r1, r2, lr
   d73f8:	fb0e 1103 	mla	r1, lr, r3, r1
   d73fc:	68ab      	ldr	r3, [r5, #8]
   d73fe:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   d7402:	18c0      	adds	r0, r0, r3
   d7404:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d7408:	fba0 230e 	umull	r2, r3, r0, lr
   d740c:	fb0e 3301 	mla	r3, lr, r1, r3
   d7410:	6869      	ldr	r1, [r5, #4]
   d7412:	1852      	adds	r2, r2, r1
   d7414:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d7418:	fba2 010e 	umull	r0, r1, r2, lr
   d741c:	fb0e 1103 	mla	r1, lr, r3, r1
   d7420:	682b      	ldr	r3, [r5, #0]
   d7422:	4a67      	ldr	r2, [pc, #412]	; (d75c0 <strftime+0x858>)
   d7424:	18c0      	adds	r0, r0, r3
   d7426:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d742a:	ebb0 0008 	subs.w	r0, r0, r8
   d742e:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   d7432:	e9cd 0100 	strd	r0, r1, [sp]
   d7436:	4661      	mov	r1, ip
   d7438:	4650      	mov	r0, sl
   d743a:	f7fd fb2f 	bl	d4a9c <sniprintf>
   d743e:	e5f8      	b.n	d7032 <strftime+0x2ca>
   d7440:	682b      	ldr	r3, [r5, #0]
   d7442:	e07e      	b.n	d7542 <strftime+0x7da>
   d7444:	9b02      	ldr	r3, [sp, #8]
   d7446:	429c      	cmp	r4, r3
   d7448:	f080 8138 	bcs.w	d76bc <strftime+0x954>
   d744c:	2309      	movs	r3, #9
   d744e:	e128      	b.n	d76a2 <strftime+0x93a>
   d7450:	682b      	ldr	r3, [r5, #0]
   d7452:	9301      	str	r3, [sp, #4]
   d7454:	686b      	ldr	r3, [r5, #4]
   d7456:	9300      	str	r3, [sp, #0]
   d7458:	4a5a      	ldr	r2, [pc, #360]	; (d75c4 <strftime+0x85c>)
   d745a:	68ab      	ldr	r3, [r5, #8]
   d745c:	1b31      	subs	r1, r6, r4
   d745e:	1938      	adds	r0, r7, r4
   d7460:	e60d      	b.n	d707e <strftime+0x316>
   d7462:	9b02      	ldr	r3, [sp, #8]
   d7464:	429c      	cmp	r4, r3
   d7466:	f080 8129 	bcs.w	d76bc <strftime+0x954>
   d746a:	69ab      	ldr	r3, [r5, #24]
   d746c:	1c62      	adds	r2, r4, #1
   d746e:	b90b      	cbnz	r3, d7474 <strftime+0x70c>
   d7470:	2337      	movs	r3, #55	; 0x37
   d7472:	e000      	b.n	d7476 <strftime+0x70e>
   d7474:	3330      	adds	r3, #48	; 0x30
   d7476:	553b      	strb	r3, [r7, r4]
   d7478:	4614      	mov	r4, r2
   d747a:	e114      	b.n	d76a6 <strftime+0x93e>
   d747c:	69eb      	ldr	r3, [r5, #28]
   d747e:	69aa      	ldr	r2, [r5, #24]
   d7480:	3307      	adds	r3, #7
   d7482:	1a9b      	subs	r3, r3, r2
   d7484:	2207      	movs	r2, #7
   d7486:	fb93 f3f2 	sdiv	r3, r3, r2
   d748a:	e05a      	b.n	d7542 <strftime+0x7da>
   d748c:	4628      	mov	r0, r5
   d748e:	f7ff fc0b 	bl	d6ca8 <iso_year_adjust>
   d7492:	69aa      	ldr	r2, [r5, #24]
   d7494:	b10a      	cbz	r2, d749a <strftime+0x732>
   d7496:	1e53      	subs	r3, r2, #1
   d7498:	e000      	b.n	d749c <strftime+0x734>
   d749a:	2306      	movs	r3, #6
   d749c:	2800      	cmp	r0, #0
   d749e:	dc2f      	bgt.n	d7500 <strftime+0x798>
   d74a0:	69ea      	ldr	r2, [r5, #28]
   d74a2:	d101      	bne.n	d74a8 <strftime+0x740>
   d74a4:	320a      	adds	r2, #10
   d74a6:	e03b      	b.n	d7520 <strftime+0x7b8>
   d74a8:	1a9a      	subs	r2, r3, r2
   d74aa:	696b      	ldr	r3, [r5, #20]
   d74ac:	f240 716b 	movw	r1, #1899	; 0x76b
   d74b0:	2b00      	cmp	r3, #0
   d74b2:	bfb4      	ite	lt
   d74b4:	4608      	movlt	r0, r1
   d74b6:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   d74ba:	4418      	add	r0, r3
   d74bc:	0781      	lsls	r1, r0, #30
   d74be:	d107      	bne.n	d74d0 <strftime+0x768>
   d74c0:	4601      	mov	r1, r0
   d74c2:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d74c6:	fb90 f0fe 	sdiv	r0, r0, lr
   d74ca:	fb0e 1110 	mls	r1, lr, r0, r1
   d74ce:	b981      	cbnz	r1, d74f2 <strftime+0x78a>
   d74d0:	2b00      	cmp	r3, #0
   d74d2:	f240 716b 	movw	r1, #1899	; 0x76b
   d74d6:	bfa8      	it	ge
   d74d8:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   d74dc:	4419      	add	r1, r3
   d74de:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d74e2:	fb91 f0f3 	sdiv	r0, r1, r3
   d74e6:	fb03 1110 	mls	r1, r3, r0, r1
   d74ea:	fab1 f181 	clz	r1, r1
   d74ee:	0949      	lsrs	r1, r1, #5
   d74f0:	e000      	b.n	d74f4 <strftime+0x78c>
   d74f2:	2101      	movs	r1, #1
   d74f4:	1a52      	subs	r2, r2, r1
   d74f6:	2a05      	cmp	r2, #5
   d74f8:	bfb4      	ite	lt
   d74fa:	2335      	movlt	r3, #53	; 0x35
   d74fc:	2334      	movge	r3, #52	; 0x34
   d74fe:	e020      	b.n	d7542 <strftime+0x7da>
   d7500:	2301      	movs	r3, #1
   d7502:	e01e      	b.n	d7542 <strftime+0x7da>
   d7504:	9b02      	ldr	r3, [sp, #8]
   d7506:	429c      	cmp	r4, r3
   d7508:	f080 80d8 	bcs.w	d76bc <strftime+0x954>
   d750c:	69ab      	ldr	r3, [r5, #24]
   d750e:	3330      	adds	r3, #48	; 0x30
   d7510:	e0c7      	b.n	d76a2 <strftime+0x93a>
   d7512:	69aa      	ldr	r2, [r5, #24]
   d7514:	b10a      	cbz	r2, d751a <strftime+0x7b2>
   d7516:	1e53      	subs	r3, r2, #1
   d7518:	e000      	b.n	d751c <strftime+0x7b4>
   d751a:	2306      	movs	r3, #6
   d751c:	69ea      	ldr	r2, [r5, #28]
   d751e:	3207      	adds	r2, #7
   d7520:	1ad2      	subs	r2, r2, r3
   d7522:	2307      	movs	r3, #7
   d7524:	fb92 f3f3 	sdiv	r3, r2, r3
   d7528:	e00b      	b.n	d7542 <strftime+0x7da>
   d752a:	6968      	ldr	r0, [r5, #20]
   d752c:	2800      	cmp	r0, #0
   d752e:	da03      	bge.n	d7538 <strftime+0x7d0>
   d7530:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d7534:	f000 fbbe 	bl	d7cb4 <abs>
   d7538:	2364      	movs	r3, #100	; 0x64
   d753a:	fb90 f2f3 	sdiv	r2, r0, r3
   d753e:	fb02 0313 	mls	r3, r2, r3, r0
   d7542:	4a21      	ldr	r2, [pc, #132]	; (d75c8 <strftime+0x860>)
   d7544:	e571      	b.n	d702a <strftime+0x2c2>
   d7546:	696b      	ldr	r3, [r5, #20]
   d7548:	4a20      	ldr	r2, [pc, #128]	; (d75cc <strftime+0x864>)
   d754a:	4293      	cmp	r3, r2
   d754c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   d7550:	da05      	bge.n	d755e <strftime+0x7f6>
   d7552:	232d      	movs	r3, #45	; 0x2d
   d7554:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d7558:	f1cb 0b00 	rsb	fp, fp, #0
   d755c:	e008      	b.n	d7570 <strftime+0x808>
   d755e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d7562:	d10d      	bne.n	d7580 <strftime+0x818>
   d7564:	f242 730f 	movw	r3, #9999	; 0x270f
   d7568:	459b      	cmp	fp, r3
   d756a:	d911      	bls.n	d7590 <strftime+0x828>
   d756c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d7570:	f1b8 0f00 	cmp.w	r8, #0
   d7574:	d001      	beq.n	d757a <strftime+0x812>
   d7576:	f108 38ff 	add.w	r8, r8, #4294967295
   d757a:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   d757e:	e000      	b.n	d7582 <strftime+0x81a>
   d7580:	ab0a      	add	r3, sp, #40	; 0x28
   d7582:	2225      	movs	r2, #37	; 0x25
   d7584:	701a      	strb	r2, [r3, #0]
   d7586:	f1ba 0f00 	cmp.w	sl, #0
   d758a:	d108      	bne.n	d759e <strftime+0x836>
   d758c:	1c58      	adds	r0, r3, #1
   d758e:	e009      	b.n	d75a4 <strftime+0x83c>
   d7590:	f1b8 0f00 	cmp.w	r8, #0
   d7594:	d1f4      	bne.n	d7580 <strftime+0x818>
   d7596:	2325      	movs	r3, #37	; 0x25
   d7598:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d759c:	ab0a      	add	r3, sp, #40	; 0x28
   d759e:	2230      	movs	r2, #48	; 0x30
   d75a0:	1c98      	adds	r0, r3, #2
   d75a2:	705a      	strb	r2, [r3, #1]
   d75a4:	490a      	ldr	r1, [pc, #40]	; (d75d0 <strftime+0x868>)
   d75a6:	f7ff fb77 	bl	d6c98 <strcpy>
   d75aa:	f8cd b000 	str.w	fp, [sp]
   d75ae:	4643      	mov	r3, r8
   d75b0:	aa0a      	add	r2, sp, #40	; 0x28
   d75b2:	1b31      	subs	r1, r6, r4
   d75b4:	1938      	adds	r0, r7, r4
   d75b6:	e03e      	b.n	d7636 <strftime+0x8ce>
   d75b8:	2003e1b8 	.word	0x2003e1b8
   d75bc:	000d8479 	.word	0x000d8479
   d75c0:	000d846f 	.word	0x000d846f
   d75c4:	000d8474 	.word	0x000d8474
   d75c8:	000d8455 	.word	0x000d8455
   d75cc:	fffff894 	.word	0xfffff894
   d75d0:	000d8466 	.word	0x000d8466
   d75d4:	6a2b      	ldr	r3, [r5, #32]
   d75d6:	2b00      	cmp	r3, #0
   d75d8:	db65      	blt.n	d76a6 <strftime+0x93e>
   d75da:	f000 f9e3 	bl	d79a4 <__tz_lock>
   d75de:	9b06      	ldr	r3, [sp, #24]
   d75e0:	b91b      	cbnz	r3, d75ea <strftime+0x882>
   d75e2:	f000 f9e1 	bl	d79a8 <_tzset_unlocked>
   d75e6:	2301      	movs	r3, #1
   d75e8:	9306      	str	r3, [sp, #24]
   d75ea:	f000 fbab 	bl	d7d44 <__gettzinfo>
   d75ee:	6a2b      	ldr	r3, [r5, #32]
   d75f0:	2b00      	cmp	r3, #0
   d75f2:	bfd4      	ite	le
   d75f4:	2300      	movle	r3, #0
   d75f6:	2301      	movgt	r3, #1
   d75f8:	221c      	movs	r2, #28
   d75fa:	fb02 0003 	mla	r0, r2, r3, r0
   d75fe:	eb07 0a04 	add.w	sl, r7, r4
   d7602:	6a03      	ldr	r3, [r0, #32]
   d7604:	f1c3 0800 	rsb	r8, r3, #0
   d7608:	f000 f9cd 	bl	d79a6 <__tz_unlock>
   d760c:	233c      	movs	r3, #60	; 0x3c
   d760e:	fb98 f0f3 	sdiv	r0, r8, r3
   d7612:	9307      	str	r3, [sp, #28]
   d7614:	f000 fc32 	bl	d7e7c <labs>
   d7618:	9b07      	ldr	r3, [sp, #28]
   d761a:	fb90 f2f3 	sdiv	r2, r0, r3
   d761e:	ebc4 0b06 	rsb	fp, r4, r6
   d7622:	fb02 0013 	mls	r0, r2, r3, r0
   d7626:	4a28      	ldr	r2, [pc, #160]	; (d76c8 <strftime+0x960>)
   d7628:	9000      	str	r0, [sp, #0]
   d762a:	4659      	mov	r1, fp
   d762c:	4650      	mov	r0, sl
   d762e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7632:	fb98 f3f3 	sdiv	r3, r8, r3
   d7636:	f7fd fa31 	bl	d4a9c <sniprintf>
   d763a:	e4fa      	b.n	d7032 <strftime+0x2ca>
   d763c:	4404      	add	r4, r0
   d763e:	42a6      	cmp	r6, r4
   d7640:	d831      	bhi.n	d76a6 <strftime+0x93e>
   d7642:	e03b      	b.n	d76bc <strftime+0x954>
   d7644:	6a2b      	ldr	r3, [r5, #32]
   d7646:	2b00      	cmp	r3, #0
   d7648:	db2d      	blt.n	d76a6 <strftime+0x93e>
   d764a:	f000 f9ab 	bl	d79a4 <__tz_lock>
   d764e:	9b06      	ldr	r3, [sp, #24]
   d7650:	b91b      	cbnz	r3, d765a <strftime+0x8f2>
   d7652:	f000 f9a9 	bl	d79a8 <_tzset_unlocked>
   d7656:	2301      	movs	r3, #1
   d7658:	9306      	str	r3, [sp, #24]
   d765a:	6a2b      	ldr	r3, [r5, #32]
   d765c:	4a1b      	ldr	r2, [pc, #108]	; (d76cc <strftime+0x964>)
   d765e:	2b00      	cmp	r3, #0
   d7660:	bfd4      	ite	le
   d7662:	2300      	movle	r3, #0
   d7664:	2301      	movgt	r3, #1
   d7666:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d766a:	4640      	mov	r0, r8
   d766c:	f000 f830 	bl	d76d0 <strlen>
   d7670:	f108 38ff 	add.w	r8, r8, #4294967295
   d7674:	193b      	adds	r3, r7, r4
   d7676:	4420      	add	r0, r4
   d7678:	4284      	cmp	r4, r0
   d767a:	d00b      	beq.n	d7694 <strftime+0x92c>
   d767c:	9a02      	ldr	r2, [sp, #8]
   d767e:	4294      	cmp	r4, r2
   d7680:	d205      	bcs.n	d768e <strftime+0x926>
   d7682:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d7686:	f803 2b01 	strb.w	r2, [r3], #1
   d768a:	3401      	adds	r4, #1
   d768c:	e7f4      	b.n	d7678 <strftime+0x910>
   d768e:	f000 f98a 	bl	d79a6 <__tz_unlock>
   d7692:	e013      	b.n	d76bc <strftime+0x954>
   d7694:	f000 f987 	bl	d79a6 <__tz_unlock>
   d7698:	e005      	b.n	d76a6 <strftime+0x93e>
   d769a:	9b02      	ldr	r3, [sp, #8]
   d769c:	429c      	cmp	r4, r3
   d769e:	d20d      	bcs.n	d76bc <strftime+0x954>
   d76a0:	2325      	movs	r3, #37	; 0x25
   d76a2:	553b      	strb	r3, [r7, r4]
   d76a4:	3401      	adds	r4, #1
   d76a6:	f899 3000 	ldrb.w	r3, [r9]
   d76aa:	b11b      	cbz	r3, d76b4 <strftime+0x94c>
   d76ac:	f109 0901 	add.w	r9, r9, #1
   d76b0:	f7ff bb69 	b.w	d6d86 <strftime+0x1e>
   d76b4:	b126      	cbz	r6, d76c0 <strftime+0x958>
   d76b6:	2300      	movs	r3, #0
   d76b8:	553b      	strb	r3, [r7, r4]
   d76ba:	e001      	b.n	d76c0 <strftime+0x958>
   d76bc:	2000      	movs	r0, #0
   d76be:	e000      	b.n	d76c2 <strftime+0x95a>
   d76c0:	4620      	mov	r0, r4
   d76c2:	b013      	add	sp, #76	; 0x4c
   d76c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76c8:	000d8483 	.word	0x000d8483
   d76cc:	2003e220 	.word	0x2003e220

000d76d0 <strlen>:
   d76d0:	4603      	mov	r3, r0
   d76d2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d76d6:	2a00      	cmp	r2, #0
   d76d8:	d1fb      	bne.n	d76d2 <strlen+0x2>
   d76da:	1a18      	subs	r0, r3, r0
   d76dc:	3801      	subs	r0, #1
   d76de:	4770      	bx	lr

000d76e0 <strncmp>:
   d76e0:	b530      	push	{r4, r5, lr}
   d76e2:	b182      	cbz	r2, d7706 <strncmp+0x26>
   d76e4:	1e45      	subs	r5, r0, #1
   d76e6:	3901      	subs	r1, #1
   d76e8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d76ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d76f0:	42a3      	cmp	r3, r4
   d76f2:	d106      	bne.n	d7702 <strncmp+0x22>
   d76f4:	43ec      	mvns	r4, r5
   d76f6:	4414      	add	r4, r2
   d76f8:	42e0      	cmn	r0, r4
   d76fa:	d001      	beq.n	d7700 <strncmp+0x20>
   d76fc:	2b00      	cmp	r3, #0
   d76fe:	d1f3      	bne.n	d76e8 <strncmp+0x8>
   d7700:	461c      	mov	r4, r3
   d7702:	1b18      	subs	r0, r3, r4
   d7704:	bd30      	pop	{r4, r5, pc}
   d7706:	4610      	mov	r0, r2
   d7708:	bd30      	pop	{r4, r5, pc}

000d770a <strnlen>:
   d770a:	b510      	push	{r4, lr}
   d770c:	4603      	mov	r3, r0
   d770e:	4401      	add	r1, r0
   d7710:	428b      	cmp	r3, r1
   d7712:	d004      	beq.n	d771e <strnlen+0x14>
   d7714:	781a      	ldrb	r2, [r3, #0]
   d7716:	1c5c      	adds	r4, r3, #1
   d7718:	b10a      	cbz	r2, d771e <strnlen+0x14>
   d771a:	4623      	mov	r3, r4
   d771c:	e7f8      	b.n	d7710 <strnlen+0x6>
   d771e:	1a18      	subs	r0, r3, r0
   d7720:	bd10      	pop	{r4, pc}
	...

000d7724 <_strtoul_r>:
   d7724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7728:	4680      	mov	r8, r0
   d772a:	483c      	ldr	r0, [pc, #240]	; (d781c <_strtoul_r+0xf8>)
   d772c:	f8d0 9000 	ldr.w	r9, [r0]
   d7730:	460e      	mov	r6, r1
   d7732:	4635      	mov	r5, r6
   d7734:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7738:	eb09 0004 	add.w	r0, r9, r4
   d773c:	7840      	ldrb	r0, [r0, #1]
   d773e:	f000 0008 	and.w	r0, r0, #8
   d7742:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7746:	b108      	cbz	r0, d774c <_strtoul_r+0x28>
   d7748:	462e      	mov	r6, r5
   d774a:	e7f2      	b.n	d7732 <_strtoul_r+0xe>
   d774c:	2c2d      	cmp	r4, #45	; 0x2d
   d774e:	d103      	bne.n	d7758 <_strtoul_r+0x34>
   d7750:	1cb5      	adds	r5, r6, #2
   d7752:	7874      	ldrb	r4, [r6, #1]
   d7754:	2701      	movs	r7, #1
   d7756:	e003      	b.n	d7760 <_strtoul_r+0x3c>
   d7758:	2c2b      	cmp	r4, #43	; 0x2b
   d775a:	bf04      	itt	eq
   d775c:	7874      	ldrbeq	r4, [r6, #1]
   d775e:	1cb5      	addeq	r5, r6, #2
   d7760:	b113      	cbz	r3, d7768 <_strtoul_r+0x44>
   d7762:	2b10      	cmp	r3, #16
   d7764:	d10a      	bne.n	d777c <_strtoul_r+0x58>
   d7766:	e053      	b.n	d7810 <_strtoul_r+0xec>
   d7768:	2c30      	cmp	r4, #48	; 0x30
   d776a:	d14f      	bne.n	d780c <_strtoul_r+0xe8>
   d776c:	7828      	ldrb	r0, [r5, #0]
   d776e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7772:	2858      	cmp	r0, #88	; 0x58
   d7774:	d145      	bne.n	d7802 <_strtoul_r+0xde>
   d7776:	786c      	ldrb	r4, [r5, #1]
   d7778:	2310      	movs	r3, #16
   d777a:	3502      	adds	r5, #2
   d777c:	f04f 3cff 	mov.w	ip, #4294967295
   d7780:	2600      	movs	r6, #0
   d7782:	fbbc fcf3 	udiv	ip, ip, r3
   d7786:	fb03 fa0c 	mul.w	sl, r3, ip
   d778a:	ea6f 0a0a 	mvn.w	sl, sl
   d778e:	4630      	mov	r0, r6
   d7790:	eb09 0e04 	add.w	lr, r9, r4
   d7794:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7798:	f01e 0f04 	tst.w	lr, #4
   d779c:	d001      	beq.n	d77a2 <_strtoul_r+0x7e>
   d779e:	3c30      	subs	r4, #48	; 0x30
   d77a0:	e00b      	b.n	d77ba <_strtoul_r+0x96>
   d77a2:	f01e 0e03 	ands.w	lr, lr, #3
   d77a6:	d01a      	beq.n	d77de <_strtoul_r+0xba>
   d77a8:	f1be 0f01 	cmp.w	lr, #1
   d77ac:	bf0c      	ite	eq
   d77ae:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d77b2:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d77b6:	ebce 0404 	rsb	r4, lr, r4
   d77ba:	42a3      	cmp	r3, r4
   d77bc:	dd0f      	ble.n	d77de <_strtoul_r+0xba>
   d77be:	2e00      	cmp	r6, #0
   d77c0:	db08      	blt.n	d77d4 <_strtoul_r+0xb0>
   d77c2:	4560      	cmp	r0, ip
   d77c4:	d806      	bhi.n	d77d4 <_strtoul_r+0xb0>
   d77c6:	d101      	bne.n	d77cc <_strtoul_r+0xa8>
   d77c8:	4554      	cmp	r4, sl
   d77ca:	dc03      	bgt.n	d77d4 <_strtoul_r+0xb0>
   d77cc:	fb03 4000 	mla	r0, r3, r0, r4
   d77d0:	2601      	movs	r6, #1
   d77d2:	e001      	b.n	d77d8 <_strtoul_r+0xb4>
   d77d4:	f04f 36ff 	mov.w	r6, #4294967295
   d77d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d77dc:	e7d8      	b.n	d7790 <_strtoul_r+0x6c>
   d77de:	2e00      	cmp	r6, #0
   d77e0:	da07      	bge.n	d77f2 <_strtoul_r+0xce>
   d77e2:	2322      	movs	r3, #34	; 0x22
   d77e4:	f8c8 3000 	str.w	r3, [r8]
   d77e8:	f04f 30ff 	mov.w	r0, #4294967295
   d77ec:	b92a      	cbnz	r2, d77fa <_strtoul_r+0xd6>
   d77ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77f2:	b107      	cbz	r7, d77f6 <_strtoul_r+0xd2>
   d77f4:	4240      	negs	r0, r0
   d77f6:	b172      	cbz	r2, d7816 <_strtoul_r+0xf2>
   d77f8:	b106      	cbz	r6, d77fc <_strtoul_r+0xd8>
   d77fa:	1e69      	subs	r1, r5, #1
   d77fc:	6011      	str	r1, [r2, #0]
   d77fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7802:	2430      	movs	r4, #48	; 0x30
   d7804:	2b00      	cmp	r3, #0
   d7806:	d1b9      	bne.n	d777c <_strtoul_r+0x58>
   d7808:	2308      	movs	r3, #8
   d780a:	e7b7      	b.n	d777c <_strtoul_r+0x58>
   d780c:	230a      	movs	r3, #10
   d780e:	e7b5      	b.n	d777c <_strtoul_r+0x58>
   d7810:	2c30      	cmp	r4, #48	; 0x30
   d7812:	d0ab      	beq.n	d776c <_strtoul_r+0x48>
   d7814:	e7b2      	b.n	d777c <_strtoul_r+0x58>
   d7816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d781a:	bf00      	nop
   d781c:	2003e1b8 	.word	0x2003e1b8

000d7820 <strtoul>:
   d7820:	4613      	mov	r3, r2
   d7822:	460a      	mov	r2, r1
   d7824:	4601      	mov	r1, r0
   d7826:	4802      	ldr	r0, [pc, #8]	; (d7830 <strtoul+0x10>)
   d7828:	6800      	ldr	r0, [r0, #0]
   d782a:	f7ff bf7b 	b.w	d7724 <_strtoul_r>
   d782e:	bf00      	nop
   d7830:	2003e21c 	.word	0x2003e21c

000d7834 <__get_current_time_locale>:
   d7834:	4b04      	ldr	r3, [pc, #16]	; (d7848 <__get_current_time_locale+0x14>)
   d7836:	4a05      	ldr	r2, [pc, #20]	; (d784c <__get_current_time_locale+0x18>)
   d7838:	6818      	ldr	r0, [r3, #0]
   d783a:	4b05      	ldr	r3, [pc, #20]	; (d7850 <__get_current_time_locale+0x1c>)
   d783c:	2800      	cmp	r0, #0
   d783e:	bf14      	ite	ne
   d7840:	4610      	movne	r0, r2
   d7842:	4618      	moveq	r0, r3
   d7844:	4770      	bx	lr
   d7846:	bf00      	nop
   d7848:	2003e6c8 	.word	0x2003e6c8
   d784c:	2003e6cc 	.word	0x2003e6cc
   d7850:	000d85c0 	.word	0x000d85c0

000d7854 <__tzcalc_limits>:
   d7854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7858:	4604      	mov	r4, r0
   d785a:	f000 fa73 	bl	d7d44 <__gettzinfo>
   d785e:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7862:	429c      	cmp	r4, r3
   d7864:	f340 8096 	ble.w	d7994 <__tzcalc_limits+0x140>
   d7868:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d786c:	18e3      	adds	r3, r4, r3
   d786e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7872:	109b      	asrs	r3, r3, #2
   d7874:	f240 156d 	movw	r5, #365	; 0x16d
   d7878:	fb05 3502 	mla	r5, r5, r2, r3
   d787c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7880:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7884:	fb92 f3f3 	sdiv	r3, r2, r3
   d7888:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d788c:	442b      	add	r3, r5
   d788e:	18a5      	adds	r5, r4, r2
   d7890:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7894:	fb95 f5f2 	sdiv	r5, r5, r2
   d7898:	441d      	add	r5, r3
   d789a:	2364      	movs	r3, #100	; 0x64
   d789c:	fb94 f7f2 	sdiv	r7, r4, r2
   d78a0:	fb94 f6f3 	sdiv	r6, r4, r3
   d78a4:	fb02 4717 	mls	r7, r2, r7, r4
   d78a8:	fb03 4616 	mls	r6, r3, r6, r4
   d78ac:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d78b0:	fab7 fe87 	clz	lr, r7
   d78b4:	9301      	str	r3, [sp, #4]
   d78b6:	f004 0303 	and.w	r3, r4, #3
   d78ba:	6044      	str	r4, [r0, #4]
   d78bc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d78c0:	4601      	mov	r1, r0
   d78c2:	9300      	str	r3, [sp, #0]
   d78c4:	f04f 0c07 	mov.w	ip, #7
   d78c8:	7a0b      	ldrb	r3, [r1, #8]
   d78ca:	2b4a      	cmp	r3, #74	; 0x4a
   d78cc:	d10e      	bne.n	d78ec <__tzcalc_limits+0x98>
   d78ce:	694b      	ldr	r3, [r1, #20]
   d78d0:	9a00      	ldr	r2, [sp, #0]
   d78d2:	18ec      	adds	r4, r5, r3
   d78d4:	b902      	cbnz	r2, d78d8 <__tzcalc_limits+0x84>
   d78d6:	b906      	cbnz	r6, d78da <__tzcalc_limits+0x86>
   d78d8:	b927      	cbnz	r7, d78e4 <__tzcalc_limits+0x90>
   d78da:	2b3b      	cmp	r3, #59	; 0x3b
   d78dc:	bfd4      	ite	le
   d78de:	2300      	movle	r3, #0
   d78e0:	2301      	movgt	r3, #1
   d78e2:	e000      	b.n	d78e6 <__tzcalc_limits+0x92>
   d78e4:	2300      	movs	r3, #0
   d78e6:	4423      	add	r3, r4
   d78e8:	3b01      	subs	r3, #1
   d78ea:	e03f      	b.n	d796c <__tzcalc_limits+0x118>
   d78ec:	2b44      	cmp	r3, #68	; 0x44
   d78ee:	d102      	bne.n	d78f6 <__tzcalc_limits+0xa2>
   d78f0:	694b      	ldr	r3, [r1, #20]
   d78f2:	442b      	add	r3, r5
   d78f4:	e03a      	b.n	d796c <__tzcalc_limits+0x118>
   d78f6:	9b00      	ldr	r3, [sp, #0]
   d78f8:	b92b      	cbnz	r3, d7906 <__tzcalc_limits+0xb2>
   d78fa:	2e00      	cmp	r6, #0
   d78fc:	bf0c      	ite	eq
   d78fe:	46f0      	moveq	r8, lr
   d7900:	f04f 0801 	movne.w	r8, #1
   d7904:	e000      	b.n	d7908 <__tzcalc_limits+0xb4>
   d7906:	46f0      	mov	r8, lr
   d7908:	4b24      	ldr	r3, [pc, #144]	; (d799c <__tzcalc_limits+0x148>)
   d790a:	68cc      	ldr	r4, [r1, #12]
   d790c:	2230      	movs	r2, #48	; 0x30
   d790e:	fb02 3808 	mla	r8, r2, r8, r3
   d7912:	f1a8 0a04 	sub.w	sl, r8, #4
   d7916:	46a9      	mov	r9, r5
   d7918:	2301      	movs	r3, #1
   d791a:	42a3      	cmp	r3, r4
   d791c:	da04      	bge.n	d7928 <__tzcalc_limits+0xd4>
   d791e:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7922:	3301      	adds	r3, #1
   d7924:	44d9      	add	r9, fp
   d7926:	e7f8      	b.n	d791a <__tzcalc_limits+0xc6>
   d7928:	f109 0304 	add.w	r3, r9, #4
   d792c:	fb93 fbfc 	sdiv	fp, r3, ip
   d7930:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7934:	2c01      	cmp	r4, #1
   d7936:	ebca 0a03 	rsb	sl, sl, r3
   d793a:	694b      	ldr	r3, [r1, #20]
   d793c:	bfb8      	it	lt
   d793e:	2401      	movlt	r4, #1
   d7940:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7944:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7948:	690b      	ldr	r3, [r1, #16]
   d794a:	f104 34ff 	add.w	r4, r4, #4294967295
   d794e:	f103 33ff 	add.w	r3, r3, #4294967295
   d7952:	bf48      	it	mi
   d7954:	f10a 0a07 	addmi.w	sl, sl, #7
   d7958:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d795c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7960:	4453      	add	r3, sl
   d7962:	42a3      	cmp	r3, r4
   d7964:	db01      	blt.n	d796a <__tzcalc_limits+0x116>
   d7966:	3b07      	subs	r3, #7
   d7968:	e7fb      	b.n	d7962 <__tzcalc_limits+0x10e>
   d796a:	444b      	add	r3, r9
   d796c:	698c      	ldr	r4, [r1, #24]
   d796e:	4a0c      	ldr	r2, [pc, #48]	; (d79a0 <__tzcalc_limits+0x14c>)
   d7970:	fb02 4303 	mla	r3, r2, r3, r4
   d7974:	6a0c      	ldr	r4, [r1, #32]
   d7976:	4423      	add	r3, r4
   d7978:	f841 3f1c 	str.w	r3, [r1, #28]!
   d797c:	9b01      	ldr	r3, [sp, #4]
   d797e:	4299      	cmp	r1, r3
   d7980:	d1a2      	bne.n	d78c8 <__tzcalc_limits+0x74>
   d7982:	69c3      	ldr	r3, [r0, #28]
   d7984:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7986:	4293      	cmp	r3, r2
   d7988:	bfac      	ite	ge
   d798a:	2300      	movge	r3, #0
   d798c:	2301      	movlt	r3, #1
   d798e:	6003      	str	r3, [r0, #0]
   d7990:	2001      	movs	r0, #1
   d7992:	e000      	b.n	d7996 <__tzcalc_limits+0x142>
   d7994:	2000      	movs	r0, #0
   d7996:	b003      	add	sp, #12
   d7998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d799c:	000d83d4 	.word	0x000d83d4
   d79a0:	00015180 	.word	0x00015180

000d79a4 <__tz_lock>:
   d79a4:	4770      	bx	lr

000d79a6 <__tz_unlock>:
   d79a6:	4770      	bx	lr

000d79a8 <_tzset_unlocked>:
   d79a8:	4b01      	ldr	r3, [pc, #4]	; (d79b0 <_tzset_unlocked+0x8>)
   d79aa:	6818      	ldr	r0, [r3, #0]
   d79ac:	f000 b802 	b.w	d79b4 <_tzset_unlocked_r>
   d79b0:	2003e21c 	.word	0x2003e21c

000d79b4 <_tzset_unlocked_r>:
   d79b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79b8:	b08d      	sub	sp, #52	; 0x34
   d79ba:	4607      	mov	r7, r0
   d79bc:	f000 f9c2 	bl	d7d44 <__gettzinfo>
   d79c0:	49b0      	ldr	r1, [pc, #704]	; (d7c84 <_tzset_unlocked_r+0x2d0>)
   d79c2:	4eb1      	ldr	r6, [pc, #708]	; (d7c88 <_tzset_unlocked_r+0x2d4>)
   d79c4:	4604      	mov	r4, r0
   d79c6:	4638      	mov	r0, r7
   d79c8:	f000 f9b4 	bl	d7d34 <_getenv_r>
   d79cc:	4605      	mov	r5, r0
   d79ce:	b960      	cbnz	r0, d79ea <_tzset_unlocked_r+0x36>
   d79d0:	4bae      	ldr	r3, [pc, #696]	; (d7c8c <_tzset_unlocked_r+0x2d8>)
   d79d2:	4aaf      	ldr	r2, [pc, #700]	; (d7c90 <_tzset_unlocked_r+0x2dc>)
   d79d4:	6018      	str	r0, [r3, #0]
   d79d6:	4baf      	ldr	r3, [pc, #700]	; (d7c94 <_tzset_unlocked_r+0x2e0>)
   d79d8:	6018      	str	r0, [r3, #0]
   d79da:	4baf      	ldr	r3, [pc, #700]	; (d7c98 <_tzset_unlocked_r+0x2e4>)
   d79dc:	6830      	ldr	r0, [r6, #0]
   d79de:	601a      	str	r2, [r3, #0]
   d79e0:	605a      	str	r2, [r3, #4]
   d79e2:	f7fd f82b 	bl	d4a3c <free>
   d79e6:	6035      	str	r5, [r6, #0]
   d79e8:	e148      	b.n	d7c7c <_tzset_unlocked_r+0x2c8>
   d79ea:	6831      	ldr	r1, [r6, #0]
   d79ec:	b979      	cbnz	r1, d7a0e <_tzset_unlocked_r+0x5a>
   d79ee:	6830      	ldr	r0, [r6, #0]
   d79f0:	f7fd f824 	bl	d4a3c <free>
   d79f4:	4628      	mov	r0, r5
   d79f6:	f7ff fe6b 	bl	d76d0 <strlen>
   d79fa:	1c41      	adds	r1, r0, #1
   d79fc:	4638      	mov	r0, r7
   d79fe:	f7fd f865 	bl	d4acc <_malloc_r>
   d7a02:	6030      	str	r0, [r6, #0]
   d7a04:	b148      	cbz	r0, d7a1a <_tzset_unlocked_r+0x66>
   d7a06:	4629      	mov	r1, r5
   d7a08:	f7ff f946 	bl	d6c98 <strcpy>
   d7a0c:	e005      	b.n	d7a1a <_tzset_unlocked_r+0x66>
   d7a0e:	f7ff f939 	bl	d6c84 <strcmp>
   d7a12:	2800      	cmp	r0, #0
   d7a14:	f000 8132 	beq.w	d7c7c <_tzset_unlocked_r+0x2c8>
   d7a18:	e7e9      	b.n	d79ee <_tzset_unlocked_r+0x3a>
   d7a1a:	782b      	ldrb	r3, [r5, #0]
   d7a1c:	4a9f      	ldr	r2, [pc, #636]	; (d7c9c <_tzset_unlocked_r+0x2e8>)
   d7a1e:	49a0      	ldr	r1, [pc, #640]	; (d7ca0 <_tzset_unlocked_r+0x2ec>)
   d7a20:	2b3a      	cmp	r3, #58	; 0x3a
   d7a22:	bf08      	it	eq
   d7a24:	3501      	addeq	r5, #1
   d7a26:	ae0a      	add	r6, sp, #40	; 0x28
   d7a28:	4633      	mov	r3, r6
   d7a2a:	4628      	mov	r0, r5
   d7a2c:	f7fd f826 	bl	d4a7c <siscanf>
   d7a30:	2800      	cmp	r0, #0
   d7a32:	f340 8123 	ble.w	d7c7c <_tzset_unlocked_r+0x2c8>
   d7a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7a38:	18ef      	adds	r7, r5, r3
   d7a3a:	5ceb      	ldrb	r3, [r5, r3]
   d7a3c:	2b2d      	cmp	r3, #45	; 0x2d
   d7a3e:	d103      	bne.n	d7a48 <_tzset_unlocked_r+0x94>
   d7a40:	3701      	adds	r7, #1
   d7a42:	f04f 35ff 	mov.w	r5, #4294967295
   d7a46:	e003      	b.n	d7a50 <_tzset_unlocked_r+0x9c>
   d7a48:	2b2b      	cmp	r3, #43	; 0x2b
   d7a4a:	bf08      	it	eq
   d7a4c:	3701      	addeq	r7, #1
   d7a4e:	2501      	movs	r5, #1
   d7a50:	f10d 0a20 	add.w	sl, sp, #32
   d7a54:	f10d 0b1e 	add.w	fp, sp, #30
   d7a58:	f04f 0800 	mov.w	r8, #0
   d7a5c:	9603      	str	r6, [sp, #12]
   d7a5e:	f8cd a008 	str.w	sl, [sp, #8]
   d7a62:	9601      	str	r6, [sp, #4]
   d7a64:	f8cd b000 	str.w	fp, [sp]
   d7a68:	4633      	mov	r3, r6
   d7a6a:	aa07      	add	r2, sp, #28
   d7a6c:	498d      	ldr	r1, [pc, #564]	; (d7ca4 <_tzset_unlocked_r+0x2f0>)
   d7a6e:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7a72:	4638      	mov	r0, r7
   d7a74:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7a78:	f7fd f800 	bl	d4a7c <siscanf>
   d7a7c:	4540      	cmp	r0, r8
   d7a7e:	f340 80fd 	ble.w	d7c7c <_tzset_unlocked_r+0x2c8>
   d7a82:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7a86:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7a8a:	f8df 9224 	ldr.w	r9, [pc, #548]	; d7cb0 <_tzset_unlocked_r+0x2fc>
   d7a8e:	213c      	movs	r1, #60	; 0x3c
   d7a90:	fb01 3302 	mla	r3, r1, r2, r3
   d7a94:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7a98:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7a9c:	fb01 3302 	mla	r3, r1, r2, r3
   d7aa0:	435d      	muls	r5, r3
   d7aa2:	6225      	str	r5, [r4, #32]
   d7aa4:	4d7c      	ldr	r5, [pc, #496]	; (d7c98 <_tzset_unlocked_r+0x2e4>)
   d7aa6:	4b7d      	ldr	r3, [pc, #500]	; (d7c9c <_tzset_unlocked_r+0x2e8>)
   d7aa8:	602b      	str	r3, [r5, #0]
   d7aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7aac:	497c      	ldr	r1, [pc, #496]	; (d7ca0 <_tzset_unlocked_r+0x2ec>)
   d7aae:	441f      	add	r7, r3
   d7ab0:	464a      	mov	r2, r9
   d7ab2:	4633      	mov	r3, r6
   d7ab4:	4638      	mov	r0, r7
   d7ab6:	f7fc ffe1 	bl	d4a7c <siscanf>
   d7aba:	4540      	cmp	r0, r8
   d7abc:	dc08      	bgt.n	d7ad0 <_tzset_unlocked_r+0x11c>
   d7abe:	682b      	ldr	r3, [r5, #0]
   d7ac0:	606b      	str	r3, [r5, #4]
   d7ac2:	4b72      	ldr	r3, [pc, #456]	; (d7c8c <_tzset_unlocked_r+0x2d8>)
   d7ac4:	6a22      	ldr	r2, [r4, #32]
   d7ac6:	601a      	str	r2, [r3, #0]
   d7ac8:	4b72      	ldr	r3, [pc, #456]	; (d7c94 <_tzset_unlocked_r+0x2e0>)
   d7aca:	f8c3 8000 	str.w	r8, [r3]
   d7ace:	e0d5      	b.n	d7c7c <_tzset_unlocked_r+0x2c8>
   d7ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ad2:	f8c5 9004 	str.w	r9, [r5, #4]
   d7ad6:	18fd      	adds	r5, r7, r3
   d7ad8:	5cfb      	ldrb	r3, [r7, r3]
   d7ada:	2b2d      	cmp	r3, #45	; 0x2d
   d7adc:	d103      	bne.n	d7ae6 <_tzset_unlocked_r+0x132>
   d7ade:	3501      	adds	r5, #1
   d7ae0:	f04f 37ff 	mov.w	r7, #4294967295
   d7ae4:	e003      	b.n	d7aee <_tzset_unlocked_r+0x13a>
   d7ae6:	2b2b      	cmp	r3, #43	; 0x2b
   d7ae8:	bf08      	it	eq
   d7aea:	3501      	addeq	r5, #1
   d7aec:	2701      	movs	r7, #1
   d7aee:	2300      	movs	r3, #0
   d7af0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7af4:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7af8:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7afc:	930a      	str	r3, [sp, #40]	; 0x28
   d7afe:	9603      	str	r6, [sp, #12]
   d7b00:	f8cd a008 	str.w	sl, [sp, #8]
   d7b04:	9601      	str	r6, [sp, #4]
   d7b06:	f8cd b000 	str.w	fp, [sp]
   d7b0a:	4633      	mov	r3, r6
   d7b0c:	aa07      	add	r2, sp, #28
   d7b0e:	4965      	ldr	r1, [pc, #404]	; (d7ca4 <_tzset_unlocked_r+0x2f0>)
   d7b10:	4628      	mov	r0, r5
   d7b12:	f7fc ffb3 	bl	d4a7c <siscanf>
   d7b16:	2800      	cmp	r0, #0
   d7b18:	dc04      	bgt.n	d7b24 <_tzset_unlocked_r+0x170>
   d7b1a:	6a23      	ldr	r3, [r4, #32]
   d7b1c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7b20:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7b22:	e00e      	b.n	d7b42 <_tzset_unlocked_r+0x18e>
   d7b24:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7b28:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7b2c:	213c      	movs	r1, #60	; 0x3c
   d7b2e:	fb01 3302 	mla	r3, r1, r2, r3
   d7b32:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7b36:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7b3a:	fb01 3302 	mla	r3, r1, r2, r3
   d7b3e:	435f      	muls	r7, r3
   d7b40:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7b44:	4627      	mov	r7, r4
   d7b46:	441d      	add	r5, r3
   d7b48:	f04f 0900 	mov.w	r9, #0
   d7b4c:	782b      	ldrb	r3, [r5, #0]
   d7b4e:	2b2c      	cmp	r3, #44	; 0x2c
   d7b50:	bf08      	it	eq
   d7b52:	3501      	addeq	r5, #1
   d7b54:	f895 8000 	ldrb.w	r8, [r5]
   d7b58:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7b5c:	d126      	bne.n	d7bac <_tzset_unlocked_r+0x1f8>
   d7b5e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7b62:	9302      	str	r3, [sp, #8]
   d7b64:	ab09      	add	r3, sp, #36	; 0x24
   d7b66:	9300      	str	r3, [sp, #0]
   d7b68:	9603      	str	r6, [sp, #12]
   d7b6a:	9601      	str	r6, [sp, #4]
   d7b6c:	4633      	mov	r3, r6
   d7b6e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7b72:	494d      	ldr	r1, [pc, #308]	; (d7ca8 <_tzset_unlocked_r+0x2f4>)
   d7b74:	4628      	mov	r0, r5
   d7b76:	f7fc ff81 	bl	d4a7c <siscanf>
   d7b7a:	2803      	cmp	r0, #3
   d7b7c:	d17e      	bne.n	d7c7c <_tzset_unlocked_r+0x2c8>
   d7b7e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d7b82:	1e4b      	subs	r3, r1, #1
   d7b84:	2b0b      	cmp	r3, #11
   d7b86:	d879      	bhi.n	d7c7c <_tzset_unlocked_r+0x2c8>
   d7b88:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d7b8c:	1e53      	subs	r3, r2, #1
   d7b8e:	2b04      	cmp	r3, #4
   d7b90:	d874      	bhi.n	d7c7c <_tzset_unlocked_r+0x2c8>
   d7b92:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d7b96:	2b06      	cmp	r3, #6
   d7b98:	d870      	bhi.n	d7c7c <_tzset_unlocked_r+0x2c8>
   d7b9a:	f887 8008 	strb.w	r8, [r7, #8]
   d7b9e:	60f9      	str	r1, [r7, #12]
   d7ba0:	613a      	str	r2, [r7, #16]
   d7ba2:	617b      	str	r3, [r7, #20]
   d7ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ba6:	eb05 0803 	add.w	r8, r5, r3
   d7baa:	e02a      	b.n	d7c02 <_tzset_unlocked_r+0x24e>
   d7bac:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d7bb0:	bf06      	itte	eq
   d7bb2:	3501      	addeq	r5, #1
   d7bb4:	4643      	moveq	r3, r8
   d7bb6:	2344      	movne	r3, #68	; 0x44
   d7bb8:	220a      	movs	r2, #10
   d7bba:	a90b      	add	r1, sp, #44	; 0x2c
   d7bbc:	4628      	mov	r0, r5
   d7bbe:	9305      	str	r3, [sp, #20]
   d7bc0:	f7ff fe2e 	bl	d7820 <strtoul>
   d7bc4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d7bc8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d7bcc:	4545      	cmp	r5, r8
   d7bce:	9b05      	ldr	r3, [sp, #20]
   d7bd0:	d114      	bne.n	d7bfc <_tzset_unlocked_r+0x248>
   d7bd2:	234d      	movs	r3, #77	; 0x4d
   d7bd4:	f1b9 0f00 	cmp.w	r9, #0
   d7bd8:	d107      	bne.n	d7bea <_tzset_unlocked_r+0x236>
   d7bda:	7223      	strb	r3, [r4, #8]
   d7bdc:	2303      	movs	r3, #3
   d7bde:	60e3      	str	r3, [r4, #12]
   d7be0:	2302      	movs	r3, #2
   d7be2:	6123      	str	r3, [r4, #16]
   d7be4:	f8c4 9014 	str.w	r9, [r4, #20]
   d7be8:	e00b      	b.n	d7c02 <_tzset_unlocked_r+0x24e>
   d7bea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d7bee:	230b      	movs	r3, #11
   d7bf0:	62a3      	str	r3, [r4, #40]	; 0x28
   d7bf2:	2301      	movs	r3, #1
   d7bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
   d7bf6:	2300      	movs	r3, #0
   d7bf8:	6323      	str	r3, [r4, #48]	; 0x30
   d7bfa:	e002      	b.n	d7c02 <_tzset_unlocked_r+0x24e>
   d7bfc:	b280      	uxth	r0, r0
   d7bfe:	723b      	strb	r3, [r7, #8]
   d7c00:	6178      	str	r0, [r7, #20]
   d7c02:	2302      	movs	r3, #2
   d7c04:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7c08:	2300      	movs	r3, #0
   d7c0a:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7c0e:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7c12:	930a      	str	r3, [sp, #40]	; 0x28
   d7c14:	f898 3000 	ldrb.w	r3, [r8]
   d7c18:	2b2f      	cmp	r3, #47	; 0x2f
   d7c1a:	d10b      	bne.n	d7c34 <_tzset_unlocked_r+0x280>
   d7c1c:	9603      	str	r6, [sp, #12]
   d7c1e:	f8cd a008 	str.w	sl, [sp, #8]
   d7c22:	9601      	str	r6, [sp, #4]
   d7c24:	f8cd b000 	str.w	fp, [sp]
   d7c28:	4633      	mov	r3, r6
   d7c2a:	aa07      	add	r2, sp, #28
   d7c2c:	491f      	ldr	r1, [pc, #124]	; (d7cac <_tzset_unlocked_r+0x2f8>)
   d7c2e:	4640      	mov	r0, r8
   d7c30:	f7fc ff24 	bl	d4a7c <siscanf>
   d7c34:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7c38:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7c3c:	213c      	movs	r1, #60	; 0x3c
   d7c3e:	fb01 3302 	mla	r3, r1, r2, r3
   d7c42:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7c46:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7c4a:	fb01 3302 	mla	r3, r1, r2, r3
   d7c4e:	61bb      	str	r3, [r7, #24]
   d7c50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d7c52:	f109 0901 	add.w	r9, r9, #1
   d7c56:	f1b9 0f02 	cmp.w	r9, #2
   d7c5a:	4445      	add	r5, r8
   d7c5c:	f107 071c 	add.w	r7, r7, #28
   d7c60:	f47f af74 	bne.w	d7b4c <_tzset_unlocked_r+0x198>
   d7c64:	6860      	ldr	r0, [r4, #4]
   d7c66:	f7ff fdf5 	bl	d7854 <__tzcalc_limits>
   d7c6a:	4b08      	ldr	r3, [pc, #32]	; (d7c8c <_tzset_unlocked_r+0x2d8>)
   d7c6c:	6a22      	ldr	r2, [r4, #32]
   d7c6e:	601a      	str	r2, [r3, #0]
   d7c70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7c72:	1a9b      	subs	r3, r3, r2
   d7c74:	4a07      	ldr	r2, [pc, #28]	; (d7c94 <_tzset_unlocked_r+0x2e0>)
   d7c76:	bf18      	it	ne
   d7c78:	2301      	movne	r3, #1
   d7c7a:	6013      	str	r3, [r2, #0]
   d7c7c:	b00d      	add	sp, #52	; 0x34
   d7c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7c82:	bf00      	nop
   d7c84:	000d86bc 	.word	0x000d86bc
   d7c88:	2003e7e0 	.word	0x2003e7e0
   d7c8c:	2003e7e8 	.word	0x2003e7e8
   d7c90:	000d86bf 	.word	0x000d86bf
   d7c94:	2003e7e4 	.word	0x2003e7e4
   d7c98:	2003e220 	.word	0x2003e220
   d7c9c:	2003e7d3 	.word	0x2003e7d3
   d7ca0:	000d86c3 	.word	0x000d86c3
   d7ca4:	000d86e6 	.word	0x000d86e6
   d7ca8:	000d86d2 	.word	0x000d86d2
   d7cac:	000d86e5 	.word	0x000d86e5
   d7cb0:	2003e7c8 	.word	0x2003e7c8

000d7cb4 <abs>:
   d7cb4:	2800      	cmp	r0, #0
   d7cb6:	bfb8      	it	lt
   d7cb8:	4240      	neglt	r0, r0
   d7cba:	4770      	bx	lr

000d7cbc <_findenv_r>:
   d7cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cc0:	4607      	mov	r7, r0
   d7cc2:	468b      	mov	fp, r1
   d7cc4:	4690      	mov	r8, r2
   d7cc6:	f000 f8dd 	bl	d7e84 <__env_lock>
   d7cca:	4b19      	ldr	r3, [pc, #100]	; (d7d30 <_findenv_r+0x74>)
   d7ccc:	681d      	ldr	r5, [r3, #0]
   d7cce:	469a      	mov	sl, r3
   d7cd0:	b13d      	cbz	r5, d7ce2 <_findenv_r+0x26>
   d7cd2:	465c      	mov	r4, fp
   d7cd4:	4623      	mov	r3, r4
   d7cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7cda:	b142      	cbz	r2, d7cee <_findenv_r+0x32>
   d7cdc:	2a3d      	cmp	r2, #61	; 0x3d
   d7cde:	461c      	mov	r4, r3
   d7ce0:	d1f8      	bne.n	d7cd4 <_findenv_r+0x18>
   d7ce2:	4638      	mov	r0, r7
   d7ce4:	f000 f8cf 	bl	d7e86 <__env_unlock>
   d7ce8:	2000      	movs	r0, #0
   d7cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7cee:	ebcb 0404 	rsb	r4, fp, r4
   d7cf2:	46a9      	mov	r9, r5
   d7cf4:	f859 0b04 	ldr.w	r0, [r9], #4
   d7cf8:	2800      	cmp	r0, #0
   d7cfa:	d0f2      	beq.n	d7ce2 <_findenv_r+0x26>
   d7cfc:	4622      	mov	r2, r4
   d7cfe:	4659      	mov	r1, fp
   d7d00:	f7ff fcee 	bl	d76e0 <strncmp>
   d7d04:	b988      	cbnz	r0, d7d2a <_findenv_r+0x6e>
   d7d06:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d7d0a:	191e      	adds	r6, r3, r4
   d7d0c:	5d1b      	ldrb	r3, [r3, r4]
   d7d0e:	2b3d      	cmp	r3, #61	; 0x3d
   d7d10:	d10b      	bne.n	d7d2a <_findenv_r+0x6e>
   d7d12:	f8da 3000 	ldr.w	r3, [sl]
   d7d16:	1aed      	subs	r5, r5, r3
   d7d18:	10ad      	asrs	r5, r5, #2
   d7d1a:	4638      	mov	r0, r7
   d7d1c:	f8c8 5000 	str.w	r5, [r8]
   d7d20:	f000 f8b1 	bl	d7e86 <__env_unlock>
   d7d24:	1c70      	adds	r0, r6, #1
   d7d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d2a:	464d      	mov	r5, r9
   d7d2c:	e7e1      	b.n	d7cf2 <_findenv_r+0x36>
   d7d2e:	bf00      	nop
   d7d30:	2003e268 	.word	0x2003e268

000d7d34 <_getenv_r>:
   d7d34:	b507      	push	{r0, r1, r2, lr}
   d7d36:	aa01      	add	r2, sp, #4
   d7d38:	f7ff ffc0 	bl	d7cbc <_findenv_r>
   d7d3c:	b003      	add	sp, #12
   d7d3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7d44 <__gettzinfo>:
   d7d44:	4800      	ldr	r0, [pc, #0]	; (d7d48 <__gettzinfo+0x4>)
   d7d46:	4770      	bx	lr
   d7d48:	2003e228 	.word	0x2003e228

000d7d4c <gmtime_r>:
   d7d4c:	6802      	ldr	r2, [r0, #0]
   d7d4e:	4b47      	ldr	r3, [pc, #284]	; (d7e6c <gmtime_r+0x120>)
   d7d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7d52:	fb92 f4f3 	sdiv	r4, r2, r3
   d7d56:	fb03 2214 	mls	r2, r3, r4, r2
   d7d5a:	2a00      	cmp	r2, #0
   d7d5c:	bfbc      	itt	lt
   d7d5e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7d62:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7d66:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7d6a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7d6e:	fb92 f3f0 	sdiv	r3, r2, r0
   d7d72:	fb00 2213 	mls	r2, r0, r3, r2
   d7d76:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7d7a:	bfac      	ite	ge
   d7d7c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7d80:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7d84:	608b      	str	r3, [r1, #8]
   d7d86:	fb92 f3f0 	sdiv	r3, r2, r0
   d7d8a:	fb00 2213 	mls	r2, r0, r3, r2
   d7d8e:	604b      	str	r3, [r1, #4]
   d7d90:	600a      	str	r2, [r1, #0]
   d7d92:	2307      	movs	r3, #7
   d7d94:	1ce2      	adds	r2, r4, #3
   d7d96:	fb92 f3f3 	sdiv	r3, r2, r3
   d7d9a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7d9e:	1ad3      	subs	r3, r2, r3
   d7da0:	618b      	str	r3, [r1, #24]
   d7da2:	4b33      	ldr	r3, [pc, #204]	; (d7e70 <gmtime_r+0x124>)
   d7da4:	4d33      	ldr	r5, [pc, #204]	; (d7e74 <gmtime_r+0x128>)
   d7da6:	fb94 f5f5 	sdiv	r5, r4, r5
   d7daa:	fb03 4405 	mla	r4, r3, r5, r4
   d7dae:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7db2:	fbb4 f2f2 	udiv	r2, r4, r2
   d7db6:	4422      	add	r2, r4
   d7db8:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7dbc:	fbb4 f3f7 	udiv	r3, r4, r7
   d7dc0:	1ad2      	subs	r2, r2, r3
   d7dc2:	482d      	ldr	r0, [pc, #180]	; (d7e78 <gmtime_r+0x12c>)
   d7dc4:	fbb4 f0f0 	udiv	r0, r4, r0
   d7dc8:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7dcc:	1a13      	subs	r3, r2, r0
   d7dce:	fbb3 f6f6 	udiv	r6, r3, r6
   d7dd2:	4434      	add	r4, r6
   d7dd4:	f240 126d 	movw	r2, #365	; 0x16d
   d7dd8:	fbb3 f0f2 	udiv	r0, r3, r2
   d7ddc:	fbb3 f3f7 	udiv	r3, r3, r7
   d7de0:	1ae3      	subs	r3, r4, r3
   d7de2:	fb02 3310 	mls	r3, r2, r0, r3
   d7de6:	2499      	movs	r4, #153	; 0x99
   d7de8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d7dec:	3202      	adds	r2, #2
   d7dee:	fbb2 f2f4 	udiv	r2, r2, r4
   d7df2:	2a0a      	cmp	r2, #10
   d7df4:	fb04 f402 	mul.w	r4, r4, r2
   d7df8:	f104 0602 	add.w	r6, r4, #2
   d7dfc:	f04f 0405 	mov.w	r4, #5
   d7e00:	fbb6 f4f4 	udiv	r4, r6, r4
   d7e04:	bf34      	ite	cc
   d7e06:	2602      	movcc	r6, #2
   d7e08:	f06f 0609 	mvncs.w	r6, #9
   d7e0c:	4416      	add	r6, r2
   d7e0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7e12:	fb02 0505 	mla	r5, r2, r5, r0
   d7e16:	1c5f      	adds	r7, r3, #1
   d7e18:	2e01      	cmp	r6, #1
   d7e1a:	bf98      	it	ls
   d7e1c:	3501      	addls	r5, #1
   d7e1e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d7e22:	eba7 0704 	sub.w	r7, r7, r4
   d7e26:	d302      	bcc.n	d7e2e <gmtime_r+0xe2>
   d7e28:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d7e2c:	e014      	b.n	d7e58 <gmtime_r+0x10c>
   d7e2e:	0782      	lsls	r2, r0, #30
   d7e30:	d105      	bne.n	d7e3e <gmtime_r+0xf2>
   d7e32:	2464      	movs	r4, #100	; 0x64
   d7e34:	fbb0 f2f4 	udiv	r2, r0, r4
   d7e38:	fb04 0212 	mls	r2, r4, r2, r0
   d7e3c:	b94a      	cbnz	r2, d7e52 <gmtime_r+0x106>
   d7e3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7e42:	fbb0 f4f2 	udiv	r4, r0, r2
   d7e46:	fb02 0014 	mls	r0, r2, r4, r0
   d7e4a:	fab0 f280 	clz	r2, r0
   d7e4e:	0952      	lsrs	r2, r2, #5
   d7e50:	e000      	b.n	d7e54 <gmtime_r+0x108>
   d7e52:	2201      	movs	r2, #1
   d7e54:	333b      	adds	r3, #59	; 0x3b
   d7e56:	441a      	add	r2, r3
   d7e58:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d7e5c:	2300      	movs	r3, #0
   d7e5e:	61ca      	str	r2, [r1, #28]
   d7e60:	614d      	str	r5, [r1, #20]
   d7e62:	610e      	str	r6, [r1, #16]
   d7e64:	60cf      	str	r7, [r1, #12]
   d7e66:	620b      	str	r3, [r1, #32]
   d7e68:	4608      	mov	r0, r1
   d7e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7e6c:	00015180 	.word	0x00015180
   d7e70:	fffdc54f 	.word	0xfffdc54f
   d7e74:	00023ab1 	.word	0x00023ab1
   d7e78:	00023ab0 	.word	0x00023ab0

000d7e7c <labs>:
   d7e7c:	2800      	cmp	r0, #0
   d7e7e:	bfb8      	it	lt
   d7e80:	4240      	neglt	r0, r0
   d7e82:	4770      	bx	lr

000d7e84 <__env_lock>:
   d7e84:	4770      	bx	lr

000d7e86 <__env_unlock>:
   d7e86:	4770      	bx	lr

000d7e88 <dynalib_user>:
   d7e88:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7e98:	0000 0000 6143 6c6c 6162 6b63 7b00 6422     ....Callback.{"d
   d7ea8:	7665 6369 4965 2244 223a 7325 2c22 7422     eviceID":"%s","t
   d7eb8:	6d69 7365 6174 706d 3a22 2522 2273 222c     imestamp":"%s","
   d7ec8:	6574 706d 7265 7461 7275 2265 223a 6625     temperature":"%f
   d7ed8:	2c22 7422 6d65 5570 696e 2274 223a 6325     ","tempUnit":"%c
   d7ee8:	2c22 6822 6d75 6469 7469 2279 223a 6625     ","humidity":"%f
   d7ef8:	2c22 6822 6d75 6e55 7469 3a22 2522 2263     ","humUnit":"%c"
   d7f08:	007d 7325 7300 6e65 6f73 4472 7461 0061     }.%s.sensorData.
   d7f18:	7570 6c62 7369 6568 0064 0000               published...

000d7f24 <_ZTVN5spark13EthernetClassE>:
	...
   d7f2c:	4b3b 000d 4b31 000d 4b27 000d 4b1d 000d     ;K..1K..'K...K..
   d7f3c:	4b11 000d 4b05 000d 4af9 000d 4af1 000d     .K...K...J...J..
   d7f4c:	4ae7 000d 4add 000d 6155 000d               .J...J..Ua..

000d7f58 <_ZTV8SPIClass>:
	...
   d7f60:	4b59 000d 4b5b 000d                         YK..[K..

000d7f68 <_ZTV3UDP>:
	...
   d7f70:	51f5 000d 5219 000d 4bd1 000d 4cfb 000d     .Q...R...K...L..
   d7f80:	4bc9 000d 4be7 000d 4c05 000d 4c1f 000d     .K...K...L...L..
   d7f90:	4c43 000d 4cdf 000d 4fe1 000d 4d81 000d     CL...L...O...M..
   d7fa0:	4f01 000d 4bb1 000d 5189 000d 4e85 000d     .O...K...Q...N..
   d7fb0:	4db9 000d 51b7 000d 4d25 000d 4bbf 000d     .M...Q..%M...K..
   d7fc0:	4d61 000d 4bc5 000d 4c21 000d fff0 ffff     aM...K..!L......
   d7fd0:	0000 0000 4c3b 000d 6162 6475 5300 7265     ....;L..baud.Ser
   d7fe0:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7ff0:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8000:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8010:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8020:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8030:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8040:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8050:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d8060:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d8070:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   d8080:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   d8090:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d80a0:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d80b0:	0063 6c61 006c 2b25 3330 3a64 3025 7532     c.all.%+03d:%02u
   d80c0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d80d0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d80e0 <_ZTV9IPAddress>:
	...
   d80e8:	57c1 000d 57b1 000d 57b3 000d               .W...W...W..

000d80f4 <_ZTV9USBSerial>:
	...
   d80fc:	58c5 000d 5915 000d 5923 000d 5309 000d     .X...Y..#Y...S..
   d810c:	5901 000d 58c7 000d 58dd 000d 590f 000d     .Y...X...X...Y..
   d811c:	58f3 000d 58c1 000d                         .X...X..

000d8124 <_ZTV11USARTSerial>:
	...
   d812c:	59d9 000d 5a29 000d 5a37 000d 5309 000d     .Y..)Z..7Z...S..
   d813c:	59ed 000d 5a0f 000d 59fb 000d 5a23 000d     .Y...Z...Y..#Z..
   d814c:	59db 000d 59df 000d                         .Y...Y..

000d8154 <_ZTV7TwoWire>:
	...
   d815c:	5add 000d 5b27 000d 5aff 000d 5adf 000d     .Z..'[...Z...Z..
   d816c:	5b07 000d 5b0f 000d 5b17 000d 5b1f 000d     .[...[...[...[..

000d817c <_ZTVN5spark9MeshClassE>:
	...
   d8184:	5bed 000d 5be3 000d 5bd9 000d 5bcf 000d     .[...[...[...[..
   d8194:	5bc3 000d 5bb7 000d 5bab 000d 5ba3 000d     .[...[...[...[..
   d81a4:	5b99 000d 5b8f 000d 6155 000d 6666 3330     .[...[..Ua..ff03
   d81b4:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   d81c4:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   d81d4:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000d81e0 <_ZTVN5spark12NetworkClassE>:
	...
   d81e8:	60ed 000d 60f7 000d 6101 000d 610b 000d     .`...`...a...a..
   d81f8:	6115 000d 6121 000d 612d 000d 6139 000d     .a..!a..-a..9a..
   d8208:	6141 000d 614b 000d 6155 000d               Aa..Ka..Ua..

000d8214 <_ZSt7nothrow>:
	...

000d8215 <day_name.4725>:
   d8215:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d8225:	6972 6153 4a74                                   riSat

000d822a <mon_name.4726>:
   d822a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d823a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d824a:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d825a:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d826a:	6425 000a                                   %d..

000d826e <_ctype_>:
   d826e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d827e:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d828e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d829e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d82ae:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d82be:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d82ce:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d82de:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d82ee:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8370 <__sf_fake_stdin>:
	...

000d8390 <__sf_fake_stdout>:
	...

000d83b0 <__sf_fake_stderr>:
	...
   d83d0:	0043 0000                                   C...

000d83d4 <__month_lengths>:
   d83d4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d83e4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d83f4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8404:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d8414:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d8424:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d8434:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   d8444:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   d8454:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   d8464:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   d8474:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   d8484:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   d8494:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   d84a4:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   d84b4:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   d84c4:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   d84d4:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   d84e4:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   d84f4:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   d8504:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   d8514:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   d8524:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   d8534:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   d8544:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   d8554:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   d8564:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   d8574:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   d8584:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   d8594:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   d85a4:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   d85b4:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000d85c0 <_C_time_locale>:
   d85c0:	8497 000d 849b 000d 849f 000d 84a3 000d     ................
   d85d0:	84a7 000d 84ab 000d 84af 000d 84b3 000d     ................
   d85e0:	84b7 000d 84bb 000d 84bf 000d 84c3 000d     ................
   d85f0:	84c7 000d 84cf 000d 84d8 000d 84de 000d     ................
   d8600:	84a7 000d 84e4 000d 84e9 000d 84ee 000d     ................
   d8610:	84f5 000d 84ff 000d 8507 000d 8510 000d     ................
   d8620:	8519 000d 851d 000d 8521 000d 8525 000d     ........!...%...
   d8630:	8529 000d 852d 000d 8531 000d 8535 000d     )...-...1...5...
   d8640:	853c 000d 8543 000d 854b 000d 8555 000d     <...C...K...U...
   d8650:	855e 000d 8565 000d 856e 000d 8577 000d     ^...e...n...w...
   d8660:	8580 000d 8595 000d 8598 000d 859b 000d     ................
   d8670:	84c7 000d 84cf 000d 84d8 000d 84de 000d     ................
   d8680:	84a7 000d 84e4 000d 84e9 000d 84ee 000d     ................
   d8690:	84f5 000d 84ff 000d 8507 000d 8510 000d     ................
   d86a0:	7ff8 000d 85b3 000d 807c 000d 807c 000d     ........|...|...
   d86b0:	807c 000d 807c 000d 807c 000d 5a54 4700     |...|...|...TZ.G
   d86c0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   d86d0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   d86e0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   d86f0:	3a6e 6825 2575 006e                         n:%hu%n.

000d86f8 <link_const_variable_data_end>:
   d86f8:	000d41fd 	.word	0x000d41fd
   d86fc:	000d4235 	.word	0x000d4235
   d8700:	000d44b1 	.word	0x000d44b1
   d8704:	000d4b45 	.word	0x000d4b45
   d8708:	000d4b99 	.word	0x000d4b99
   d870c:	000d52f9 	.word	0x000d52f9
   d8710:	000d5461 	.word	0x000d5461
   d8714:	000d5679 	.word	0x000d5679
   d8718:	000d56b1 	.word	0x000d56b1
   d871c:	000d609d 	.word	0x000d609d
   d8720:	000d6221 	.word	0x000d6221
   d8724:	000d62a1 	.word	0x000d62a1
   d8728:	000d636d 	.word	0x000d636d
   d872c:	000d63f1 	.word	0x000d63f1
   d8730:	000d64b5 	.word	0x000d64b5
   d8734:	000d6579 	.word	0x000d6579

000d8738 <link_constructors_end>:
	...
